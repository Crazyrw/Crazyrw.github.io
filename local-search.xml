<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>搭建Hexo博客</title>
    <link href="/2020/11/28/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/11/28/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>转载于：转载：<a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&amp;seid=929421542723130144">https://www.bilibili.com/video/BV1Yb411a7ty?from=search&amp;seid=929421542723130144</a></p><h2 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1. 安装node.js"></a>1. 安装node.js</h2><p>首先安装Node.js，可以自行百度搜索</p><p>e.g.</p><p>下载地址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p><p>根据自己电脑系统及位数选择，我这里选择<code>windows64位.msi</code>格式安装包。</p><p><code>.msi</code>和<code>.zip</code>格式区别：</p><ul><li><code>.msi</code>是Windows installer开发出来的程序安装文件，它可以让你安装，修改，卸载你所安装的程序。说白了.msi就是Windows installer的数据包，把所有和安装文件相关的内容封装在一个包里。</li><li><code>.zip</code>是一个压缩包，解压之后即可，不需要安装。但是缺点是需要自己配置环境变量。</li></ul><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128143905680.png" alt="image-20201128143905680" style="zoom:50%;" /><p>下载完成后，双击安装包，开始安装，一直点<code>next</code>即可，安装路径默认在<code>C:\Program Files</code>下，也可以自定义修改。</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/14070366-a969da838224343f" alt="img"></p><p>（网图）</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/14070366-ce5dd1d718fca7d9" alt="img"></p><p>（网图）</p><p>直接一直next，知道结束就可以。</p><h2 id="2-安装git并部署到github"><a href="#2-安装git并部署到github" class="headerlink" title="2.安装git并部署到github"></a>2.安装git并部署到github</h2><ol><li><strong>查看node及npm版本。</strong></li></ol><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128144241089.png" alt="image-20201128144241089"></p><p>现在是兼容的。容易出的问题是：npm与node版本不相容。</p><p>不相容的话，读者可以先从网上搜索相关的解决方法，有大量的解决方法。</p><p>我这里出现的问题比较难找，单独拿出来说明一下<img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128144505044.png" alt="image-20201128144505044"></p><p><strong>问题：</strong></p><p>在运行npm命令时总会出现如下报错：</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/2020060910034833.PNG" alt="img"></p><p>发现是node版本和npm版本不匹配造成的，于是想使用npm uninstall -g npm删除之后重新安装对应版本的npm。但是让人头疼的是：</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/20200609102006627.PNG" alt="img"></p><p>并且在执行其他npm命令时一直报npm does not support Node.js v12.18.0的错误，即使是在控制面版删除了node之后再从官网下载包含匹配版本的node，npm的版本也还是不会匹配。</p><p><strong>解决方法：</strong></p><p>我发现我之前安装过node，卸载之后，原来的npm环境并没有删除，所以只需要将下面的两个文件删除就可以了。</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/8DI2VH%7D@_L%5D%60Q65IJM%60VDJ.png" alt="img"></p><ol start="2"><li>安装淘宝的cnpm管理器</li></ol><p>这样运行速度比较快。</p><pre><code class="hljs bash">npm install -g cnpm --registry=http://registry.npm.taobao.org</code></pre><p>查看cnpm版本：</p><pre><code class="hljs bash">cnpm -v</code></pre><ol start="3"><li>安装hexo框架</li></ol><pre><code class="hljs bash">cnpm install -g hexo-cli</code></pre><p>查看hexo版本</p><pre><code class="hljs bash">hexo -v</code></pre><ol start="4"><li>搭建博客</li></ol><p>可以自己选择该文件夹所在的盘，之后有关博客所有的东西，都会存放在这个文件夹。</p><pre><code class="hljs bash">mkdir blog</code></pre><p>进入目录：</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> blog</code></pre><p>初始化博客：</p><pre><code class="hljs bash">hexo init</code></pre><p>启动本地博客服务：</p><pre><code class="hljs bash">hexo s</code></pre><p>此时本地的访问地址为：<a href="http://localhost:4000/">http://localhost:4000/</a></p><p>创建博客，可以结合Typora进行编写、创建，这里先不进行论述，有需要可以查阅另一篇博客**<em>Hexo和Typora的结合使用**</em>。</p><ol start="5"><li>部署到github</li></ol><p>在github上创建一个仓库。命名为repoName.github.io</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128145550669.png" alt="image-20201128145550669"></p><p>在blog目录下安装git部署插件。</p><pre><code class="hljs bash">cnpm install --save hexo-deployer-git</code></pre><p>修改hexo根目录下的_config.yml文件（修改内容在最底部）</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128145724021.png" alt="image-20201128145724021"></p><p>部署到github仓库</p><pre><code class="hljs bash">hexo d<span class="hljs-comment">#部署到Github仓库里</span></code></pre><p>可以了，现在可以通过<a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a>  来查看我们的博客了。</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128145940182.png" alt="image-20201128145940182"></p><h2 id="3-更换Hexo主题"><a href="#3-更换Hexo主题" class="headerlink" title="3. 更换Hexo主题"></a>3. 更换Hexo主题</h2><p>我选用的是Fluid这个主题。</p><p>官方文档：<a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a></p><p>github地址：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p><strong>步骤：</strong></p><ol><li>下载主题</li></ol><p>首先进入本地博客目录下的themes目录下，然后克隆选择的主题的github仓库到本地。</p><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/fluid-dev/hexo-theme-fluid.git</code></pre><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128150425602.png" alt="image-20201128150425602"></p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128150536270.png" alt="image-20201128150536270"></p><ol start="2"><li>修改_config.yml</li></ol><p>修改blog目录下的_config.yml</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128150628711.png" alt="image-20201128150628711"></p><ol start="3"><li>commit到github</li></ol><pre><code class="hljs bash">hexo chexo ghexo d</code></pre><p>好了，基本大功告成了！！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring5</title>
    <link href="/2020/11/27/Spring5/"/>
    <url>/2020/11/27/Spring5/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Spring"><a href="#1-Spring" class="headerlink" title="1. Spring"></a>1. Spring</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><ul><li><p>Spring:春天-&gt;给软件行业带来了春天</p></li><li><p>2002，首次推出了spring框架的雏形:interface21框架</p></li><li><p>Spring框架即以interface21框架为基础，经过重新设计，并不断丰富其内涵，于2004年3月24 发布了1.0正式版本。</p></li><li><p><strong><em>Rod Johnson</em></strong>   SpringFramework创始人，著名作者。他是<a href="https://baike.baidu.com/item/%E6%82%89%E5%B0%BC%E5%A4%A7%E5%AD%A6">悉尼大学</a>的博士，然而他的专业不是计算机，而是音乐学。</p></li><li><p>Spring理念：使现有的技术更加容易使用，本身是一个<strong>大杂烩</strong>，整合了现有的技术框架。</p></li></ul><ul><li>SSH：Struct2 + Spring + Hinernate（全自动化）</li><li>SSM：SpringMVC + Spring + MyBatis（半自动化）</li></ul><p>官网地址：<a href="https://spring.io/projects/spring-framework#learn">https://spring.io/projects/spring-framework#learn</a></p><p>官方文档：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/overview.html#overview">https://docs.spring.io/spring-framework/docs/current/reference/html/overview.html#overview</a></p><p>下载zip地址：<a href="https://repo.spring.io/release/org/springframework/spring/">https://repo.spring.io/release/org/springframework/spring/</a></p><p>GitHub：<a href="https://github.com/spring-projects/spring-framework">https://github.com/spring-projects/spring-framework</a></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h3><ul><li>Spring是一个开源的免费的框架（容器）！</li><li>Spring是一个轻量级的、非入侵式的框架！（非入侵式：引入不对项目的其他东西造成影响）</li><li>控制反转（IOC）、面向切面编程（AOP）！</li><li>支持事务的处理，对框架整合的支持！</li></ul><p>==<strong>总结：</strong> Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架！==</p><h3 id="1-3-组成"><a href="#1-3-组成" class="headerlink" title="1.3 组成"></a>1.3 组成</h3><p><img src="/images/Spring5/1078856-20170205160357354-490660449.gif" alt="img"></p><h3 id="1-4-扩展"><a href="#1-4-扩展" class="headerlink" title="1.4 扩展"></a>1.4 扩展</h3><p><img src="/images/Spring5/image-20201114221151976.png" alt="image-20201114221151976"></p><p>Spring:现代化的开发!说白了就是基于Spring的开发！</p><ul><li>Build Anything 构建一切</li><li>Coordinate Anything 协调一切</li><li>Connect Everything 连接一切</li></ul><ol><li><strong>Spring Boot</strong></li></ol><ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速的开发单个微服务。</li><li>约定大于配置</li></ul><ol start="2"><li><strong>Spring Cloud</strong></li></ol><ul><li>SpringCloud是基于SpringBoot实现的</li></ul><p>因为现在大多数公司都在使用SpringBoot进行快速开发，学习SpringBoot的前提，需要完全掌握Spring以及SpringMVC。承上启下的作用！</p><p><strong>弊端：发展了太久之后，违背了原来的理念！配置十分繁琐，人称“配置地狱”。</strong></p><h2 id="2-IOC理论推导"><a href="#2-IOC理论推导" class="headerlink" title="2. IOC理论推导"></a>2. IOC理论推导</h2><p><strong>引入背景：</strong></p><p>在之前的框架中，我们实现业务，一般分为Dao接口、Dao接口实现类、Service接口、Service实现类。</p><p>假设UserDao.java、UserDaoImpl.java、UserService.java、UserServiceImpl.java</p><p>如果UserDao接口对应一个实现类，那么UserService中一般会写：</p><pre><code class="hljs java">UserDao userDao = <span class="hljs-keyword">new</span> UserDaoImpl()</code></pre><p>用户使用时直接调用service，是调用不到dao层的。因此，程序会一直默认都是调用的UserDaoImpl实现类。</p><p>那么，如果UserDao有多个实现类呢？例如，UserDaoImpl、UserDaoMySqlImpl、UserDaoOracleImp等。</p><p>如果程序员根据需求改动service代码，就会显得非常的不灵活：</p><pre><code class="hljs java">UserDao userDao = <span class="hljs-keyword">new</span> UserDaoMySqlImpl();</code></pre><img src="/images/Spring5/image-20201115105127424.png" alt="image-20201115105127424" style="zoom:50%;" /><hr><p><strong>基于这，我们想到，可以使用set进行动态实现值的注入！<img src="/images/Spring5/image-20201115103836967.png" alt="image-20201115103836967"></strong></p><pre><code class="hljs java"><span class="hljs-keyword">private</span> UserDao userDao;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span></span>&#123;<span class="hljs-keyword">this</span>.userDao = userDao;&#125;</code></pre><img src="/images/Spring5/image-20201115105233723.png" alt="image-20201115105233723" style="zoom:50%;" /><hr><p>在之前的业务中，用户的需求可能会影响我们原来的代码，我们根据用户的需求去修改源代码。如果程序代码量十分大，修改一次的成本代价十分昂贵！</p><p>使用set之后，发生了革命性的变化！</p><ul><li>之前，程序是主动创建对象，控制权在程序员身上！</li><li>使用set注入之后，程序不再具有主动性，而是变成了被动的接受对象！</li></ul><hr><p>这种思想从本质上解决了问题，我们程序员不用再去管理对象的创建。系统的耦合性大大降低，可以更加专注的在业务的实现上！</p><p>这是IOC的原型！（IOC：控制反转）</p><h2 id="3-IOC本质"><a href="#3-IOC本质" class="headerlink" title="3. IOC本质"></a>3. IOC本质</h2><p><strong>控制反转IOC（Inversion of Control），是一种设计思想，DI（依赖注入）是实现IOC的一种方法。</strong></p><p>在没有IOC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p><img src="/images/Spring5/6a63f6246b600c337b73ab94174c510fd9f9a160" alt="img" style="zoom:50%;" /><p><strong>IOC是Spring框架的核心内容，</strong>使用很多方式完美的实现了IOC，可以使用XML配置，也可以使用注解，新版本的Spring也可以零配置实现IOC。</p><p>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从IOC容器中取出需要的对象。</p><img src="/images/Spring5/image-20201115111043907.png" alt="image-20201115111043907" style="zoom:50%;" /><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到零配置的目的。</p><p><strong>控制反转是通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IOC容器，其实现方法是依赖注入DI（Dependency Injection, DI）</strong></p><h4 id="4-HelloSpring"><a href="#4-HelloSpring" class="headerlink" title="4. HelloSpring"></a>4. HelloSpring</h4><p>我们理解了IOC的基本思想，我们现在来看下Spring的应用：</p><ol><li>导入jar包</li></ol><blockquote><p>注 : spring 需要导入commons-logging进行日志记录 . 我们利用maven , 他会自动下载对应的依赖项 .</p></blockquote><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><ol start="2"><li>编写Hello实体类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;  <span class="hljs-comment">//一定要有set方法，不然beans.xml中无法实现赋值</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;Hello,&quot;</span>+ name );    &#125;&#125;</code></pre><ol start="3"><li>编写beans.xml</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--使用Spring来创建对象，在Spring中这些都叫做Bean--&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">        id：相当于变量名，class则是想要创建的对象的类型</span><span class="hljs-comment">        property : 对象的属性，value设置具体的值，</span><span class="hljs-comment">如果是一个对象则使用ref来设置，ref指向的是beans.xml中已经定义好的对象。</span><span class="hljs-comment">    --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Hello&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="4"><li>测试：</li></ol><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);        <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>        Hello hello = (Hello) applicationContext.getBean(<span class="hljs-string">&quot;hello&quot;</span>);        System.out.println(hello.toString());    &#125;</code></pre><img src="/images/Spring5/image-20201115132219497.png" alt="image-20201115132219497" style="zoom:50%;" /><hr><p><strong>思考：</strong></p><ul><li>Hello 对象是谁创建的 ?             hello 对象是由Spring创建的</li><li>Hello 对象的属性是怎么设置的 ?     hello 对象的属性是由Spring容器设置的</li></ul><p>这个过程就叫控制反转 :</p><ul><li><strong>控制</strong> : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用Spring后 , 对象是由Spring来创建的</li><li><strong>反转</strong> : 程序本身不创建对象 , 而变成被动的接收对象 .</li></ul><p><strong>依赖注入</strong> : 就是利用set方法来进行注入的.</p><p> <strong>IOC是一种编程思想，由主动的编程变成被动的接收。</strong></p><p>可以通过newClassPathXmlApplicationContext去浏览一下底层源码 。</p><p>==之前说是由用户主动进行设置对象，其实配置文件就是相当于用户的一个角色，让用户去修改一个配置文件，远远比修改源代码更简单！！==</p><p><strong>OK，到了现在，我们彻底不用在程序中修改代码去实现不同的操作，我们只需要在xml配置文件中进行修改，所谓的IOC，一句话：对象由Spring创建、管理、装配。</strong></p><h2 id="4-IOC创建对象方式"><a href="#4-IOC创建对象方式" class="headerlink" title="4. IOC创建对象方式"></a>4. IOC创建对象方式</h2><h3 id="4-1-通过无参构造方法来创建"><a href="#4-1-通过无参构造方法来创建" class="headerlink" title="4.1 通过无参构造方法来创建"></a>4.1 通过无参构造方法来创建</h3><p><strong>无参构造是默认的！</strong></p><ol><li>实体类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Hello</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;无参构造&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;Hello,&quot;</span>+ name );    &#125;&#125;</code></pre><ol start="2"><li>beans.xml</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Hello&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><ol start="3"><li>测试</li></ol><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);        <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>        Hello hello = (Hello) applicationContext.getBean(<span class="hljs-string">&quot;hello&quot;</span>);        <span class="hljs-comment">//System.out.println(hello.toString());</span>    &#125;</code></pre><img src="/images/Spring5/image-20201115163212571.png" alt="image-20201115163212571" style="zoom:50%;" /><img src="/images/Spring5/image-20201115163454860.png" alt="image-20201115163454860" style="zoom:50%;" /><p>通过结果发现，在调用show()方法之前，Hello对象在getBean()时已经通过无参构造初始化了！</p><h3 id="4-2-通过有参构造方法来创建"><a href="#4-2-通过有参构造方法来创建" class="headerlink" title="4.2 通过有参构造方法来创建"></a>4.2 通过有参构造方法来创建</h3><ol><li>实体类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Hello</span><span class="hljs-params">(String name)</span></span>&#123;        <span class="hljs-keyword">this</span>.name = name;        System.out.println(<span class="hljs-string">&quot;有参构造：name= &quot;</span>+<span class="hljs-keyword">this</span>.name);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;Hello,&quot;</span>+ name );    &#125;&#125;</code></pre><ol start="2"><li>beans.xml（有三种编写方式）</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Hello&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 第一种根据index参数下标设置 --&gt;</span>  <span class="hljs-comment">&lt;!-- index指构造方法 , 下标从0开始 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;spring1&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><ol start="3"><li>测试</li></ol><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;  <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>  ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);  <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>  Hello hello = (Hello) applicationContext.getBean(<span class="hljs-string">&quot;hello&quot;</span>);  hello.show();&#125;</code></pre><img src="/images/Spring5/image-20201115164314916.png" alt="image-20201115164314916" style="zoom:50%;" /><p>另外两种编写方式：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Hello&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 第二种根据参数名字设置 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;spring2&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Hello&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 第三种根据参数类型设置 --&gt;</span>  <span class="hljs-comment">&lt;!--不建议使用，如果两个都是String类型就不好了--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;spring3&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><hr><p>现在我们测试一个比较有意思的东西，<img src="/images/Spring5/image-20201115165603497.png" alt="image-20201115165603497"></p><ol><li>我们再创建一个实体类User.java</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;User无参构造&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;Hello,&quot;</span>+ name );    &#125;&#125;</code></pre><ol start="2"><li>在beans.xml中注入</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Hello&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 第三种根据参数类型设置 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;spring3&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><ol start="3"><li>测试</li></ol><p>测试，我们只get Hello对象，看一下结果</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);        <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>        Hello hello = (Hello) applicationContext.getBean(<span class="hljs-string">&quot;hello&quot;</span>);        hello.show();    &#125;</code></pre><img src="/images/Spring5/image-20201115165819922.png" alt="image-20201115165819922" style="zoom:50%;" /><p>User竟然也被实例化了？！！</p><p>==原来，<strong>在配置文件加载的时候。其中管理的对象都已经初始化了！</strong> 也就是说，配置文件在加载的时候，所有注册到里面的对象都被实例化好了，就等着getBean()调用了！！==<img src="/images/Spring5/image-20201115171224430.png" alt="image-20201115171224430"></p><h2 id="5-Spring配置说明"><a href="#5-Spring配置说明" class="headerlink" title="5. Spring配置说明"></a>5. Spring配置说明</h2><h3 id="5-1-别名"><a href="#5-1-别名" class="headerlink" title="5.1 别名"></a>5.1 别名</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Hello&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 第三种根据参数类型设置 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;spring3&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;hello2&quot;</span>/&gt;</span></code></pre><p>起别名之后，两个名字都可以用，都可以通过getBean()获取到Bean。</p><h3 id="5-2-Bean的配置"><a href="#5-2-Bean的配置" class="headerlink" title="5.2 Bean的配置"></a>5.2 Bean的配置</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user2,user3 user4;user5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!--</span><span class="hljs-comment">         id 是bean的标识符,要唯一,如果没有配置id,name就是默认标识符</span><span class="hljs-comment">            name就是别名，所以说alias标签就没啥用了，name中可以有很多别名，空格、逗号、分号  分隔都可以</span><span class="hljs-comment">         class是bean的全限定名=包名+类名</span><span class="hljs-comment">    --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;hello2&quot;</span>/&gt;</span></code></pre><h3 id="5-3-import"><a href="#5-3-import" class="headerlink" title="5.3 import"></a>5.3 import</h3><p>import，一般用于团队开发使用，它可以将多个配置文件，导入合并为一个。</p><img src="/images/Spring5/image-20201115174123736.png" alt="image-20201115174123736" style="zoom:50%;" /><p>将beans.xml导入到总的配置文件中，applicationContext.xml。</p><p>使用的时候，直接使用总的是applicationContext.xml</p><img src="/images/Spring5/image-20201115174337377.png" alt="image-20201115174337377" style="zoom:50%;" /><h2 id="6-DI依赖注入"><a href="#6-DI依赖注入" class="headerlink" title="6. DI依赖注入"></a>6. DI依赖注入</h2><h3 id="6-1-构造器注入"><a href="#6-1-构造器注入" class="headerlink" title="6.1 构造器注入"></a>6.1 构造器注入</h3><p>前面已经说过</p><img src="/images/Spring5/image-20201116140844471.png" alt="image-20201116140844471" style="zoom:50%;" /><h3 id="6-2-Setter注入—属性注入【重点】"><a href="#6-2-Setter注入—属性注入【重点】" class="headerlink" title="6.2 Setter注入—属性注入【重点】"></a>6.2 Setter注入—属性注入【重点】</h3><ul><li>依赖：指Bean对象的创建依赖于容器 . Bean对象的依赖资源 .</li><li>注入：Bean对象中的所有属性，由容器来注入。</li></ul><p>要求被注入的属性，必须有set方法 ，set方法的方法名由set + 属性首字母大写 ，如果属性是boolean类型 ，没有set方法 ，是 is 。</p><p>测试POJO类：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span> </span>&#123;    <span class="hljs-keyword">private</span> String address;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> address;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;        <span class="hljs-keyword">this</span>.address = address;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.pojo;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-keyword">import</span> java.util.Set;<span class="hljs-comment">//使用注解来代替所有的getter setter</span><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Address address;    <span class="hljs-keyword">private</span> String[] books;    <span class="hljs-keyword">private</span> List&lt;String&gt; hobbys;    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; card;    <span class="hljs-keyword">private</span> Set&lt;String&gt; games;<span class="hljs-comment">//集合</span>    <span class="hljs-keyword">private</span> String wife;<span class="hljs-comment">//空指针</span>    <span class="hljs-keyword">private</span> Properties info;<span class="hljs-comment">//配置类</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;name=&quot;</span>+ name                + <span class="hljs-string">&quot;,address=&quot;</span>+ address.getAddress()                + <span class="hljs-string">&quot;,books=&quot;</span>        );        <span class="hljs-keyword">for</span> (String book:books)&#123;            System.out.print(<span class="hljs-string">&quot;&lt;&lt;&quot;</span>+book+<span class="hljs-string">&quot;&gt;&gt;\t&quot;</span>);        &#125;        System.out.println(<span class="hljs-string">&quot;\n爱好:&quot;</span>+hobbys);        System.out.println(<span class="hljs-string">&quot;card:&quot;</span>+card);        System.out.println(<span class="hljs-string">&quot;games:&quot;</span>+games);        System.out.println(<span class="hljs-string">&quot;wife:&quot;</span>+wife);        System.out.println(<span class="hljs-string">&quot;info:&quot;</span>+info);    &#125;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><h4 id="6-2-1-常量注入"><a href="#6-2-1-常量注入" class="headerlink" title="6.2.1 常量注入"></a>6.2.1 常量注入</h4><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Student&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--1.普通值注入--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;任文&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><p>测试类：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;  <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>  ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);  <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>  Student student = (Student) applicationContext.getBean(<span class="hljs-string">&quot;student&quot;</span>);  System.out.println(student.getName());&#125;</code></pre><p>//output: 任文</p><h4 id="6-2-2-Bean注入"><a href="#6-2-2-Bean注入" class="headerlink" title="6.2.2 Bean注入"></a>6.2.2 <strong>Bean注入</strong></h4><p>(Address)</p><p><strong>注意点：这里的值是一个引用，ref</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Address&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;青岛&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Student&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--1.普通值注入--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;任文&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--2. Bean注入--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;address&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;  <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>  ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);  <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>  Student student = (Student) applicationContext.getBean(<span class="hljs-string">&quot;student&quot;</span>);  System.out.println(student.getAddress().getAddress());&#125;</code></pre><p>//output: 青岛</p><h4 id="6-2-3-数组注入"><a href="#6-2-3-数组注入" class="headerlink" title="6.2.3 数组注入"></a>6.2.3 数组注入</h4><pre><code class="hljs java"><span class="hljs-keyword">private</span> String[] books;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Student&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--1.普通值注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;任文&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--2. Bean注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;address&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--3.String[] 数组注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;books&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>book1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>book2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>book3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);    <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>    Student student = (Student) applicationContext.getBean(<span class="hljs-string">&quot;student&quot;</span>);    System.out.println(Arrays.toString(student.getBooks()));&#125;</code></pre><p>//output: [book1, book2, book3]</p><h4 id="6-2-4-List注入"><a href="#6-2-4-List注入" class="headerlink" title="6.2.4 List注入"></a>6.2.4 List注入</h4><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;String&gt; hobbys;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Student&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--1.普通值注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;任文&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--2. Bean注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;address&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--3.String[] 数组注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;books&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>book1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>book2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>book3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbys&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>唱歌<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>画画<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>跑步<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);    <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>    Student student = (Student) applicationContext.getBean(<span class="hljs-string">&quot;student&quot;</span>);    System.out.println(student.getHobbys().toString());&#125;</code></pre><p>//output: [唱歌, 画画, 跑步]</p><h4 id="6-2-5-Map注入"><a href="#6-2-5-Map注入" class="headerlink" title="6.2.5 Map注入"></a>6.2.5 Map注入</h4><pre><code class="hljs java"><span class="hljs-keyword">private</span> Map&lt;String,String&gt; card;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;邮政&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;111&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;建行&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;222&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);    <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>    Student student = (Student) applicationContext.getBean(<span class="hljs-string">&quot;student&quot;</span>);    System.out.println(student.getCard().toString());&#125;</code></pre><p>//output: {邮政=111, 建行=222}</p><h4 id="6-2-6-set注入"><a href="#6-2-6-set注入" class="headerlink" title="6.2.6 set注入"></a>6.2.6 set注入</h4><pre><code class="hljs java"><span class="hljs-keyword">private</span> Set&lt;String&gt; games;<span class="hljs-comment">//集合</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;games&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bbb<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);    <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>    Student student = (Student) applicationContext.getBean(<span class="hljs-string">&quot;student&quot;</span>);    System.out.println(student.getGames().toString());&#125;</code></pre><p>output: [bbb, ccc, aaa]</p><h4 id="6-2-7-Null注入"><a href="#6-2-7-Null注入" class="headerlink" title="6.2.7 Null注入"></a>6.2.7 Null注入</h4><pre><code class="hljs java"><span class="hljs-keyword">private</span> String wife;<span class="hljs-comment">//空指针</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wife&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><pre><code class="hljs java">System.out.println(student.getWife());</code></pre><p>//output：null</p><blockquote><p>其实经过测试，发现无论进不进行NULL的注入，输出的结果都是null</p></blockquote><h4 id="6-2-8-Properties注入"><a href="#6-2-8-Properties注入" class="headerlink" title="6.2.8 Properties注入"></a>6.2.8 Properties注入</h4><pre><code class="hljs java"><span class="hljs-keyword">private</span> Properties info;</code></pre><p>Properties：表示一个持久的属性集.属性列表中每个键及其对应值都是一个字符串。</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span>555<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><pre><code class="hljs java">System.out.println(student.getInfo());</code></pre><p>总体测试：</p><pre><code class="hljs java">student.show();</code></pre><img src="/images/Spring5/image-20201115192239414.png" alt="image-20201115192239414" style="zoom:50%;" /><h4 id="6-2-9-p命名和c命名注入"><a href="#6-2-9-p命名和c命名注入" class="headerlink" title="6.2.9 p命名和c命名注入"></a>6.2.9 p命名和c命名注入</h4><p>User.java ：【注意：这里没有有参构造器！】</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;        <span class="hljs-keyword">this</span>.age = age;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +                <span class="hljs-string">&quot;, age=&quot;</span> + age +                <span class="hljs-string">&#x27;&#125;&#x27;</span>;    &#125;&#125;</code></pre><ol><li><strong>P命名空间注入</strong></li></ol><p>需要在头文件中加入约束文件:</p><pre><code class="hljs xml">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;<span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span>&gt;</span>     <span class="hljs-comment">&lt;!--P(属性: properties)命名空间 , 属性依然要设置set方法  需要有无参构造器和set方法--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;任文&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);    <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>    User user = (User) applicationContext.getBean(<span class="hljs-string">&quot;user&quot;</span>);    System.out.println(user.toString());&#125;</code></pre><img src="/images/Spring5/image-20201115214244836.png" alt="image-20201115214244836" style="zoom:50%;" /><ol start="2"><li><strong>c 命名空间注入</strong></li></ol><p>需要在头文件中加入约束文件</p><pre><code class="hljs xml">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">&quot;renwen&quot;</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">&quot;101&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--这个需要User实体类中有全参的构造器！！属性依然要设置set方法--&gt;</span></code></pre><img src="/images/Spring5/image-20201115214800388.png" alt="image-20201115214800388" style="zoom:50%;" /><p>注意点：</p><ul><li>p命名注入和c命名注入都需要导入约束！</li></ul><pre><code class="hljs xml">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</code></pre><h3 id="6-3-Bean-Scopes（Bean的作用域）"><a href="#6-3-Bean-Scopes（Bean的作用域）" class="headerlink" title="6.3 Bean Scopes（Bean的作用域）"></a>6.3 Bean Scopes（Bean的作用域）</h3><img src="/images/Spring5/image-20201115215212779.png" alt="image-20201115215212779" style="zoom:50%;" /><ul><li><strong>Singleton</strong> </li></ul><p>在Spring IOC容器中仅存在一个Bean实例，Bean以单例方式存在，默认值。</p><ul><li><h4 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h4></li></ul><p>每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean时，相当于执行new xxBean()</p><ul><li><strong>Request</strong></li></ul><p>每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境。</p><ul><li><strong>Session</strong></li></ul><p>同一个HTTP Session共享一个Bean，不同的Session使用不同Bean，仅适用于WebApplicationContext环境</p><h4 id="6-3-1-The-Singleton-Scope"><a href="#6-3-1-The-Singleton-Scope" class="headerlink" title="6.3.1 The Singleton Scope"></a>6.3.1 The Singleton Scope</h4><p>单例模式</p><img src="/images/Spring5/image-20201115215615293.png" alt="image-20201115215615293" style="zoom:50%;" /><p>当一个bean的作用域为Singleton，那么Spring IoC容器中<strong>只会存在一个共享的bean实例</strong>，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。Singleton是单例类型，就是在创建起容器时就同时自动创建了一个bean的对象，不管你是否使用，他都存在了，每次获取到的对象都是同一个对象。注意，Singleton作用域是Spring中的缺省作用域。要在XML中将bean定义成singleton，可以这样配置(Spring默认机制):</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.something.DefaultAccountService&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>/&gt;</span></code></pre><h4 id="6-3-2-The-Prototype-Scope"><a href="#6-3-2-The-Prototype-Scope" class="headerlink" title="6.3.2 The Prototype Scope"></a>6.3.2 The Prototype Scope</h4><p>原型模式</p><p>当一个bean的作用域为Prototype，表示一个bean定义对应多个对象实例。Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例。Prototype是原型类型，它在我们创建容器的时候并没有实例化，而是当我们获取bean的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象。根据经验，对有状态的bean应该使用prototype作用域，而对无状态的bean则应该使用singleton作用域。在XML中将bean定义成prototype，可以这样配置：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.foo.DefaultAccount&quot;</span><span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;</span>    或者 <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.foo.DefaultAccount&quot;</span><span class="hljs-attr">singleton</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span></code></pre><h4 id="6-3-3-Request"><a href="#6-3-3-Request" class="headerlink" title="6.3.3 Request"></a>6.3.3 Request</h4><p>当一个bean的作用域为Request，表示在一次HTTP请求中，一个bean定义对应一个实例；即每个HTTP请求都会有各自的bean实例，它们依据某个bean定义创建而成。该作用域仅在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginAction&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">cn.csdn.LoginAction</span>&quot; <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;request&quot;</span>/&gt;</span></code></pre><p>针对每次HTTP请求，Spring容器会根据loginAction bean的定义创建一个全新的LoginAction bean实例，且该loginAction bean实例仅在当前HTTP request内有效，因此可以根据需要放心的更改所建实例的内部状态，而其他请求中根据loginAction bean定义创建的实例，将不会看到这些特定于某个请求的状态变化。当处理请求结束，request作用域的bean实例将被销毁。</p><h4 id="6-3-4-Session"><a href="#6-3-4-Session" class="headerlink" title="6.3.4 Session"></a>6.3.4 Session</h4><p>当一个bean的作用域为Session，表示在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userPreferences&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.foo.UserPreferences&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;session&quot;</span>/&gt;</span></code></pre><p>针对某个HTTP Session，Spring容器会根据userPreferences bean定义创建一个全新的userPreferences bean实例，且该userPreferences bean仅在当前HTTP Session内有效。与request作用域一样，可以根据需要放心的更改所创建实例的内部状态，而别的HTTP Session中根据userPreferences创建的实例，将不会看到这些特定于某个HTTP Session的状态变化。当HTTP Session最终被废弃的时候，在该HTTP Session作用域内的bean也会被废弃掉。</p><h4 id="6-3-5-小结"><a href="#6-3-5-小结" class="headerlink" title="6.3.5 小结"></a>6.3.5 小结</h4><p>request、session、application，这些只能在web开发中使用。</p><h2 id="7-Bean的自动装配"><a href="#7-Bean的自动装配" class="headerlink" title="7. Bean的自动装配"></a>7. Bean的自动装配</h2><img src="/images/Spring5/image-20201115221023159.png" alt="image-20201115221023159" style="zoom:50%;" /><p>以上所有bean的属性都是手动设置的。</p><p>因此引入了自动装配的概念。</p><ul><li>自动装配时Spring满足bean依赖的一种方式！</li><li>Spring会在上下文中自动寻找，并自动给bean装配属性。</li></ul><p>Spring中bean有三种装配机制，分别是：</p><ul><li>在xml中显示配置；</li><li>在java中显示配置；</li><li>隐式的bean发现机制和自动装配；【重要】</li></ul><p>Spring的自动装配需要从两个角度实现，或者说是两个操作：</p><ol><li>组件扫描（component scanning）:<strong>Spring会自动发现应用上下文中所创建的bean；</strong></li><li>自动装配(autowriting)：<strong>Spring自动满足bean之间的依赖</strong>，也就是我们说的IOC/DI</li></ol><p>组件扫描和自动装配组合发会巨大威力，使得显示的配置降低到最少。</p><p>==<strong>推荐：不使用自动装配xml配置，使用注解！</strong>==</p><hr><p>个人理解：所谓的自动装配，可以简单的理解为，spring会自动在spring容器中寻找我们需要装配的bean对象。</p><hr><h3 id="7-1-测试环境搭建"><a href="#7-1-测试环境搭建" class="headerlink" title="7.1 测试环境搭建"></a>7.1 测试环境搭建</h3><ol><li>创建实体类Cat、Dog、User</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;miao~&quot;</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;wang~&quot;</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> Cat cat;    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-keyword">private</span> String str;&#125;</code></pre><p>测试：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);        User user = applicationContext.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);        user.getDog().shout();        user.getCat().shout();    &#125;</code></pre><img src="/images/Spring5/image-20201116140915343.png" alt="image-20201116140915343" style="zoom:50%;" /><p>测试成功！！</p><h3 id="7-2-autowire-“byName”-按照名称自动装配-autowriting"><a href="#7-2-autowire-“byName”-按照名称自动装配-autowriting" class="headerlink" title="7.2 autowire  “byName” 按照名称自动装配-autowriting"></a>7.2 autowire  “byName” 按照名称自动装配-autowriting</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Dog&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Cat&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;str&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;renwen&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><p>去除原来的原来的property引入，换成autowire自动装配，测试依然成功。</p><hr><p>autowire-byName的工作机制：</p><p>当一个bean节点带有 autowire byName的属性时。</p><ul><li>先查找该bean中所有set方法，当找到其中一个set方法时，如setCat，它将会自动将set去除，剩余Cat，并将Cat大写的首字母转换成小写cat</li><li>转换之后，去Spring容器中寻找beanid为cat的bean节点</li><li>如果找到，就取出注入；没有找到，就报空指针异常！</li></ul><hr><p>如果我们将cat的beanid换成别的，如catcc，那么将会报错！</p><img src="/images/Spring5/image-20201116142333671.png" alt="image-20201116142333671" style="zoom:50%;" /><img src="/images/Spring5/image-20201116142344885.png" alt="image-20201116142344885" style="zoom:50%;" /><img src="/images/Spring5/image-20201116142344885-1606489287311.png" alt="image-20201116142344885" style="zoom:50%;" /><h3 id="7-3-autowire-“byType”-按照类型自动装配-autowriting"><a href="#7-3-autowire-“byType”-按照类型自动装配-autowriting" class="headerlink" title="7.3 autowire “byType” 按照类型自动装配-autowriting"></a>7.3 autowire “byType” 按照类型自动装配-autowriting</h3><p>上一节，我们将cat的beanid改成了catcc，spring找不到了，因为名字不一样了，但是！</p><p>我们可以将<strong>autowire改成byType</strong>，说白了，就是<strong>通过查找spring中与自己对象属性相同的bean对象进行装配</strong>。这样一来，代码就能正常运行了!</p><img src="/images/Spring5/image-20201116142952541.png" alt="image-20201116142952541" style="zoom:50%;" /><p><strong>但是</strong>，这个也有一定的弊端，如果spring容器中，还有Cat类型 注册的对象，如下面的cat2</p><img src="/images/Spring5/image-20201116143151850.png" alt="image-20201116143151850" style="zoom:50%;" /><p>这样一来，容器中出现两个相同类型的bean对象，在对user进行按类型自动装配时就会报错，出现不唯一的异常！因此，<strong>要保证同一类型的对象，在spring容器中唯一。</strong></p><p>在byType中，即使bean没有id，但是要保证唯一，这样也可以自动装配，因为是按照类型进行装配的，与id无关！</p><h3 id="7-4-Spring中的自动装配和Autowired"><a href="#7-4-Spring中的自动装配和Autowired" class="headerlink" title="7.4 ==Spring中的自动装配和Autowired=="></a>7.4 ==Spring中的自动装配和Autowired==</h3><h4 id="1-自动装配"><a href="#1-自动装配" class="headerlink" title="1. 自动装配"></a>1. 自动装配</h4><p>当Spring装配Bean属性时，又是胡非常明确，就是需要将某个Bean的引用装配给指定属性。</p><p>为了应对这个明确的装配场景，Spring提供了自动装配（autowriting）。与其显式的装配Bean属性，为何不让Spring识别可以自动装配的场景。</p><p>当涉及到自动装配Bean的依赖关系时，Spring有多种处理方式。因此，Spring提供了4种装配策略。</p><ol><li>byName</li></ol><p>把与Bean的属性具有相同名字的其他Bean自动装配到Bean的对应属性中。</p><ol start="2"><li><p>byType</p></li><li><p>constructor</p></li></ol><p>它是说，把与Bean的构造器入参具有相同类型的其他Bean自动装配到Bean构造器的对应入参中。值得注意的是：具有相同类型的其他Bean这句话说明它在查找入参的时候，还是通过Bean的类型来确定。</p><p><strong>e.g.</strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<span class="hljs-keyword">private</span> Role role;  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(Role role)</span> </span>&#123;<span class="hljs-keyword">this</span>.role = role;&#125;&#125; &lt;bean id=&quot;user&quot; class=&quot;com.viewscenes.netsupervisor.entity.User&quot; autowire=&quot;constructor&quot;&gt;&lt;/bean&gt;复制代码</code></pre><ol start="4"><li>autodetect</li></ol><p>这种方法被标记为果实方法，在Spring3.0之后已经不再支持。</p><p>它首先会尝试使用constructor进行自动装配，如果失败再尝试使用byType。不过，它在Spring3.0之后已经被标记为@Deprecated。</p><ol start="5"><li>默认自动装配</li></ol><p>默认情况下，default-autowired属性被设置为none，表示所有的Bean都不使用自动装配，除非Bean上配置了autowired属性。如果需要为所有的Bean配置相同的autowired属性，有个办法可以简化这一操作。在根元素Beans上增加属性default-autowired=”ByType”.</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">default-autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span></code></pre><p><strong>Spring自动装配的优点不言而喻，但是事实上，在Spring XML配置文件里的自动装配并不推荐使用，其中最大的缺点在于不确定性。或者除非你对整个Spring应用中的所有Bean的情况了如指掌，不然虽则Bean的增多和关系复杂度的上升，情况可能会更糟糕。</strong></p><h4 id="2-Autowired"><a href="#2-Autowired" class="headerlink" title="2. Autowired"></a>2. Autowired</h4><p>从spring3.5 开始，开始支持使用注解来自动装配Bean属性。它允许更细粒度的自动装配，我们可以选择性的标注某一个属性来对其应用自动装配。</p><p>Spring支持集中不同的应用于自动装配的注解。</p><ul><li>Spring自带的@Autowired注解。</li><li>JSR-330的Inject注解。</li><li>JSR-250的@Resource注解</li></ul><p>我们今天只重点关注Autowired注解！</p><p><strong>只需要在需要注入的属性加入注解即可！</strong></p><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span>UserService userService;</code></pre><p>不过，使用它有几个点需要注意。</p><ol><li>强制性</li></ol><p>默认情况下，它具有强制契约特性，其所标注的属性必须是可装配的。如果没有Bean可以装配到Autowired所标注的属性或参数中，那么你会看到NoSuchBeanDefinitionException的异常信息。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">doResolveDependency</span><span class="hljs-params">(DependencyDescriptor descriptor, String beanName,</span></span><span class="hljs-function"><span class="hljs-params">Set&lt;String&gt; autowiredBeanNames, TypeConverter typeConverter)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<span class="hljs-comment">//查找Bean</span>Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, type, descriptor);<span class="hljs-comment">//如果拿到的Bean集合为空，且isRequired，就抛出异常。</span><span class="hljs-keyword">if</span> (matchingBeans.isEmpty()) &#123;<span class="hljs-keyword">if</span> (descriptor.isRequired()) &#123;raiseNoSuchBeanDefinitionException(type, <span class="hljs-string">&quot;&quot;</span>, descriptor);&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;&#125;</code></pre><p>看到上面的源码，我们可以得到这一信息，Bean集合为空不要紧，关键是isRequired条件不能成立，那么，如果我们不确定属性是否可以装配，可以这样来使用Autowired。</p><pre><code class="hljs dart"><span class="hljs-meta">@Autowired</span>(<span class="hljs-keyword">required</span>=<span class="hljs-keyword">false</span>)UserService userService</code></pre><ol start="2"><li>装配策略</li></ol><p>曾经有一个面试题：<strong>Autowired是按照什么策略来自动装配的呢？</strong></p><p>关于这个问题，不能一概而论，你不能简单的说按照类型或者按照名称。但是可以确定的一点是，<strong>它默认是按照类型来自动装配的，即byType。</strong></p><p>关键点findAutowireCandidates这个方法。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> Map&lt;String, Object&gt; <span class="hljs-title">findAutowireCandidates</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">String beanName, Class&lt;?&gt; requiredType, DependencyDescriptor descriptor)</span> </span>&#123;<span class="hljs-comment">//获取给定类型的所有bean名称，里面实际循环所有的beanName，获取它的实例</span><span class="hljs-comment">//再通过isTypeMatch方法来确定</span>String[] candidateNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(<span class="hljs-keyword">this</span>, requiredType, <span class="hljs-keyword">true</span>, descriptor.isEager());Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> LinkedHashMap&lt;String, Object&gt;(candidateNames.length);<span class="hljs-comment">//根据返回的beanName，获取其实例返回</span><span class="hljs-keyword">for</span> (String candidateName : candidateNames) &#123;<span class="hljs-keyword">if</span> (!isSelfReference(beanName, candidateName) &amp;&amp; isAutowireCandidate(candidateName, descriptor)) &#123;result.put(candidateName, getBean(candidateName));&#125;&#125;<span class="hljs-keyword">return</span> result;&#125;</code></pre><p>final: <strong>@Autowired默认使用byType来装配属性，如果匹配到类型的多个实例，再通过byName来确定Bean。</strong></p><p>如果通过名称还是确定不了。还是determineAutowireCandidate这个方法，它还有两种方式来确定。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> String <span class="hljs-title">determineAutowireCandidate</span><span class="hljs-params">(Map&lt;String, Object&gt; candidateBeans, </span></span><span class="hljs-function"><span class="hljs-params">DependencyDescriptor descriptor)</span> </span>&#123;Class&lt;?&gt; requiredType = descriptor.getDependencyType();<span class="hljs-comment">//通过@Primary注解来标识Bean</span>String primaryCandidate = determinePrimaryCandidate(candidateBeans, requiredType);<span class="hljs-keyword">if</span> (primaryCandidate != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">return</span> primaryCandidate;&#125;<span class="hljs-comment">//通过@Priority(value = 0)注解来标识Bean value为优先级大小</span>String priorityCandidate = determineHighestPriorityCandidate(candidateBeans, requiredType);<span class="hljs-keyword">if</span> (priorityCandidate != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">return</span> priorityCandidate;&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;</code></pre><ul><li>Primary</li></ul><p>它的作用是看Bean上是否包含@Primary注解，如果包含就返回。当然了，你不能把多个Bean都设置为@Primary，不然将会得到NoUniqueBeanDefinitionException异常。</p><ul><li>Priority</li></ul><p>你也可以在Bean上配置@Priority注解，它有个int类型的属性value，可以配置优先级大小。数字越小的，就会被优先匹配。同样的，你也不能把多个Bean的优先级配置成相同大小的数值，否则NoUniqueBeanDefinitionException异常照样会出现。</p><p><strong>最后需要注意的是：Priority的包在javax.annotation.Priority  如果想使用它还需要引入一个坐标。</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.annotation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.annotation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h4 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h4><p>主要阐述了Spring中的自动装配的集中策略，又通过源码分析了Autowired注解的使用方法。在Spring3.0之后，有效的自动装配策略分为byType、byName、constructor三种方式。注解Autowired默认使用byType来自动装配，如果存在类型的多个实例就尝试使用byName匹配，如果通过byName也确定不了，可以通过Primary和Priority注解来确定。</p><h3 id="7-5-自动装配Autowired"><a href="#7-5-自动装配Autowired" class="headerlink" title="7.5 自动装配Autowired"></a>7.5 自动装配Autowired</h3><ol><li>注解实现自动装配</li></ol><p>JDK1.5开始支持注解，Spring2.5开始去全面支持注解。</p><p>准备工作：<strong>利用注解的方式注入属性。</strong></p><ol><li>在spring配置文件中引入context文件头约束</li></ol><pre><code class="hljs xml"> xmlns:context=&quot;http://www.springframework.org/schema/context&quot;http://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd</code></pre><ol start="2"><li>开启<strong>属性</strong>注解支持</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span></code></pre><hr><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><img src="/images/Spring5/image-20201120084923684.png" alt="image-20201120084923684" style="zoom:50%;" /><hr><h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a><strong>@Autowired</strong></h4><p>直接在属性上使用即可！也可以直接在setter方法上使用。</p><p><strong>使用Autowired 我们可以不用编写setter方法，但是前提是这个自动配置的属性在IOC(Spring)容器中存在，且符合名字byName。</strong></p><p><strong>测试：</strong></p><ol><li>将将User类中的setter方法去掉，使用@Autowired注解。</li></ol><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-keyword">private</span> Cat cat;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-keyword">private</span> Dog dog;  <span class="hljs-keyword">private</span> String str;  <span class="hljs-function"><span class="hljs-keyword">public</span> Cat <span class="hljs-title">getCat</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> cat;  &#125;  <span class="hljs-function"><span class="hljs-keyword">public</span> Dog <span class="hljs-title">getDog</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> dog;  &#125;  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getStr</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> str;  &#125;&#125;</code></pre><ol start="2"><li>此时配置文件中的内容</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">                           https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           &quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Cat&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Dog&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="3"><li>测试成功，输出结果！</li></ol><p><strong>科普：</strong></p><ul><li>@Nullable  字段标记了这个注解，说明这个字段可以为null</li><li>@Autowired(required = false)</li></ul><p>如果显式定义了Autowired的required属性为false，说明这个对象可以为null，否则不允许。因为required的值默认为true。</p><h4 id="Qualifer"><a href="#Qualifer" class="headerlink" title="@Qualifer"></a>@Qualifer</h4><p><strong>@Autowired + @Qualifier</strong></p><ul><li><p>@Autowired是根据类型自动装配的，<strong>加上</strong>@Qualifier则根据byName的方式自动装配。</p></li><li><p><strong>@Qualifier不能单独使用。</strong></p></li></ul><p>测试实验步骤：</p><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Cat cat;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-keyword">private</span> String str;&#125;</code></pre><p>配置文件修改内容，保证类型存在对象。且名字不为类的默认名字！</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">                           https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           &quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Cat&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Cat&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Dog&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Dog&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="2"><li>没有加Qualifier测试，直接报错</li></ol><img src="/images/Spring5/image-20201120104904576.png" alt="image-20201120104904576" style="zoom:50%;" /><p>因为显示按照类型找寻，发现有两个，之后按照name寻找，找不到相匹配的项，所以报错了！</p><ol start="3"><li>在属性上添加Qualifier注解</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-meta">@Qualifier(value = &quot;cat1&quot;)</span>  <span class="hljs-keyword">private</span> Cat cat;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-meta">@Qualifier(value = &quot;dog1&quot;)</span>  <span class="hljs-keyword">private</span> Dog dog;  <span class="hljs-keyword">private</span> String str;&#125;</code></pre><ol start="4"><li>测试，测试成功，成功输出！</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);    User user = applicationContext.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);    user.getCat().shout();  &#125;&#125;</code></pre><img src="/images/Spring5/image-20201120105240612.png" alt="image-20201120105240612" style="zoom:50%;" /><h4 id="Resources"><a href="#Resources" class="headerlink" title="@Resources"></a>@Resources</h4><ol><li>Resources如有指定的name属性，先按照该属性进行byName方式查找装配。</li><li>其次再进行默认的byName方式进行装配</li><li>如果以上都不成功，则按byType的方式自动装配。</li><li>都不成功，则报异常</li></ol><p>测试实验：</p><ol><li>beans中的配置</li></ol><p>Cat设置两个，必须设置Resources 指定名称进行查找。Dog设置一个，保证可以自动找到！</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">                           https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           &quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Cat&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Cat&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Dog&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="2"><li>实体类</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-meta">@Resource(name = &quot;cat1&quot;)</span>  <span class="hljs-keyword">private</span> Cat cat;  <span class="hljs-meta">@Resource</span>  <span class="hljs-keyword">private</span> Dog dog;  <span class="hljs-keyword">private</span> String str;&#125;</code></pre><ol start="3"><li>测试</li></ol><p>测试类：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);    User user = applicationContext.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);    user.getCat().shout();  &#125;&#125;</code></pre><p>测试成功！！</p><img src="/images/Spring5/image-20201120111233221.png" alt="image-20201120111233221" style="zoom:50%;" /><p><strong>结论：</strong></p><p>主要过程：先进行byName查找，失败；再进行byType查找，成功！</p><p>@Autowired与@Resource异同：</p><p>1、@Autowired与@Resource都可以用来装配bean。都可以写在字段上，或写在setter方法上。</p><p>2、@Autowired默认按类型装配（属于spring规范），默认情况下必须要求依赖对象必须存在，如果要允许null 值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用</p><p>3、@Resource（属于J2EE复返），默认按照名称进行装配，名称可以通过name属性进行指定。如果没有指定name属性，当注解写在字段上时，默认取字段名进行按照名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。</p><p>它们的作用相同都是用注解方式注入对象，但执行顺序不同。@Autowired先byType，@Resource先byName。</p><h2 id="8-Spring注解开发"><a href="#8-Spring注解开发" class="headerlink" title="8. Spring注解开发"></a>8. Spring注解开发</h2><img src="/images/Spring5/image-20201120114001211.png" alt="image-20201120114001211" style="zoom:50%;" /><p>在spring4 之后，想要使用注解形式，必须要引入aop包。其实在引入webmvc的依赖之后，就已经引入aop的包。</p><p>在配置文件中，还得要引入一个context约束！</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">                           https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           &quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Cat&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Cat&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Dog&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><h3 id="8-1-Bean的实现"><a href="#8-1-Bean的实现" class="headerlink" title="8.1 Bean的实现"></a>8.1 Bean的实现</h3><p>我们之前都是使用bean的标签进行bean注入，但是实际开发中，我们一般都会使用注解！</p><ol><li>配置扫描哪些包下的注解</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">                           https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--指定注解扫描包--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wen.pojo&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="2"><li>在指定包下编写类，增加注解</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;user&quot;)</span><span class="hljs-comment">/* 相当于 &lt;bean id=&quot;user&quot; class=&quot;com.wen.pojo.User&quot;&gt;*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-keyword">private</span> String name = <span class="hljs-string">&quot;2222&quot;</span>;&#125;</code></pre><ol start="3"><li>测试</li></ol><img src="/images/Spring5/image-20201120142244915.png" alt="image-20201120142244915" style="zoom:50%;" /><h3 id="8-2-属性如何注入"><a href="#8-2-属性如何注入" class="headerlink" title="8.2 属性如何注入"></a>8.2 属性如何注入</h3><p>使用注解注入属性。</p><ol><li>可以不使用set方法，直接在定义属性名上方添加@Value(“值”)</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;user&quot;)</span><span class="hljs-comment">/* 相当于 &lt;bean id=&quot;user&quot; class=&quot;com.wen.pojo.User&quot;&gt;*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-meta">@Value(&quot;333&quot;)</span>  <span class="hljs-comment">/* 相当于配置文件中 &lt;property name=&quot;name&quot; value=&quot;333&quot;&gt;*/</span>  <span class="hljs-keyword">private</span> String name;&#125;</code></pre><img src="/images/Spring5/image-20201120142530432.png" alt="image-20201120142530432" style="zoom:50%;" /><ol start="2"><li>如果提供了set方法，在set方法上添加@Value(“值”)</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;user&quot;)</span><span class="hljs-comment">/* 相当于 &lt;bean id=&quot;user&quot; class=&quot;com.wen.pojo.User&quot;&gt;*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-comment">//    @Value(&quot;333&quot;)</span>  <span class="hljs-comment">/* 相当于配置文件中 &lt;property name=&quot;name&quot; value=&quot;333&quot;&gt;*/</span>  <span class="hljs-keyword">private</span> String name;  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> name;  &#125;  <span class="hljs-meta">@Value(&quot;444&quot;)</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;    <span class="hljs-keyword">this</span>.name = name;  &#125;&#125;</code></pre><img src="/images/Spring5/image-20201120142815550.png" alt="image-20201120142815550" style="zoom:50%;" /><h3 id="8-3-衍生的注解"><a href="#8-3-衍生的注解" class="headerlink" title="8.3 衍生的注解"></a>8.3 衍生的注解</h3><p>我们的这些注解，就是代替了在配置文件当中配置步骤而已！更加的方便快捷！</p><p><strong>@Component三个衍生注解</strong></p><p>为了更好的进行分层，Spring可以使用其他三个注解，功能一样，目前使用哪一个功能都一样。</p><ul><li>@Controller：Web层</li><li>@Service：service层</li><li>@Repository：dao层</li></ul><p>写上这些注解，就相当于将这个类交给Spring管理装配了！</p><h3 id="8-4-自动装配"><a href="#8-4-自动装配" class="headerlink" title="8.4 自动装配"></a>8.4 自动装配</h3><p>在Bean的自动装配中讲解过，就不写了！</p><h3 id="8-5-作用域"><a href="#8-5-作用域" class="headerlink" title="8.5 作用域"></a>8.5 作用域</h3><p><strong>@Scope</strong></p><ul><li><strong>singleton</strong>：默认的，Spring会采用单例模式创建这个对象。关闭工厂，所有的对象都会销毁。</li><li><strong>prototype</strong>：多例模式。关闭工厂，所有的对象不会销毁。内部的垃圾回收机制会回收。</li></ul><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;user&quot;)</span><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-keyword">private</span> String name;  <span class="hljs-meta">@Value(&quot;444&quot;)</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;    <span class="hljs-keyword">this</span>.name = name;  &#125;&#125;</code></pre><h3 id="8-6-小结"><a href="#8-6-小结" class="headerlink" title="8.6 小结"></a>8.6 小结</h3><p><strong>XML与注解比较</strong></p><ul><li>XML可以适用任何场景，结构清晰，维护方便。</li><li>注解不是自己提供的类使用不了，开发简单。</li></ul><p><strong>XML与注解整合开发：推荐最佳实践</strong></p><ul><li>XML管理Bean</li><li>注解完成属性注入</li><li>==<strong>使用过程中，可以不用扫描，扫描是为了类上的注解。</strong>==</li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span></code></pre><p><strong>作用：</strong>(上面这句<a href="context:annotation-config/">context:annotation-config/</a>的作用)</p><ul><li>进行注解驱动注册，从而使注解生效。</li><li>用于激活那些已经在Spring容器里注册过的bean上面的注解，也就是显式的向Spring注册。</li><li>如果不扫描包，就需要手动配置bean</li><li>如果不加注解驱动，则注入的值为Null！</li></ul><h3 id="8-7-基于Java类进行配置"><a href="#8-7-基于Java类进行配置" class="headerlink" title="8.7 基于Java类进行配置"></a>8.7 基于Java类进行配置</h3><p>JavaConfig原来是一个Spring的一个子项目，它通过Java类的方式提供Bean的定义信息，在Spring4的版本，JavaConfig已经正式成为Spring4的核心功能。</p><p><strong>测试：</strong></p><ol><li>编写一个实体类 User</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//将这个类标注为Spring的一个组件，放到容器中！</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-meta">@Value(&quot;999&quot;)</span>  <span class="hljs-keyword">private</span> String name;  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> name;  &#125;&#125;</code></pre><ol start="2"><li>新建一个config配置包，编写一个MyConfig配置类</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">// 代表这是一个配置类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfig</span> </span>&#123;      <span class="hljs-meta">@Bean</span>  <span class="hljs-comment">//t通过方法注册一个bean</span>  <span class="hljs-comment">//这里的返回值就是Bean的类型，方法名就是Bean的id</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User();    &#125;&#125;</code></pre><ol start="3"><li>编写测试类，注意这里测试类变化了，不再是从配置文件中获取容器的上下文了！！</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    <span class="hljs-comment">//不再是从配置文件中获取上下文，而是从配置类中获取上下文！！</span>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(MyConfig.class);    User user = applicationContext.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);    System.out.println(user.getName());  &#125;&#125;</code></pre><p>测试成功！</p><img src="/images/Spring5/image-20201120151212913.png" alt="image-20201120151212913" style="zoom:50%;" /><p><strong>同时配置类也可以像之前配置文件那样，导入其他的配置类！</strong></p><ol><li>我们再编写一个测试类！</li></ol><pre><code class="hljs java"><span class="hljs-meta">@COnfiguration</span> <span class="hljs-comment">//代表这是一个配置类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfig2</span></span>&#123;  &#125;</code></pre><ol start="2"><li>在之前的配置类中我们来选择导入这个配置类。</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@Import(MyConfig2.class)</span><span class="hljs-comment">//导入其他配置类，类似于配置文件中的include标签。</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfig</span></span>&#123;  <span class="hljs-meta">@Bean</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User();  &#125;&#125;</code></pre><p>关于这种Java类的配置方式，我们在之后的SpringBoot和SpringCloud中还会大量看到，我们需要知道这些注解的作用即可！！</p><h2 id="9-静态-动态代理模式"><a href="#9-静态-动态代理模式" class="headerlink" title="9. 静态/动态代理模式"></a>9. 静态/动态代理模式</h2><p>为什么要学习代理模式，因为AOP*（面向切面编程）的底层机制就是动态代理！</p><p>代理模式：</p><ul><li>静态代理</li><li>动态代理</li></ul><p><strong>学习AOP之前，我们要先了解一下代理模式！</strong></p><p>代理模式作为23种经典设计模式之一，其比较官方的定义为“为其他对象提供一种代理以控制对这个对象的访问”，简单点说就是，之前A类自己做一件事，在使用代理之后，A类不直接去做，而是由A类的代理类B来去做。代理类其实是在之前类的基础上做了一层封装。java中有静态代理、JDK动态代理、CGLib动态代理的方式。静态代理指的是代理类是在编译期就存在的，相反动态代理则是在程序运行期动态生成的，</p><p>代理模式的功能主要是起到增强方法和权限拦截的作用。</p><img src="/images/Spring5/image-20201120153501285.png" alt="image-20201120153501285" style="zoom:50%;" /><h3 id="9-1-静态代理"><a href="#9-1-静态代理" class="headerlink" title="9.1 静态代理"></a>9.1 静态代理</h3><p>静态代理角色分析</p><ul><li>抽象角色：一般使用接口或者抽象类来实现。</li><li>真实角色：被代理的角色。</li><li>代理角色：代理真实角色；  <ul><li>代理真实角色后，一般会做一些附属的操作</li></ul></li><li>客户：使用代理角色来进行一些操作</li></ul><p><strong>代码实现与分析</strong></p><p>Rent.java  即抽象角色</p><pre><code class="hljs java"><span class="hljs-comment">//抽象角色：租房</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Rent</span> </span>&#123;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p>Host.java 即真实角色</p><pre><code class="hljs java"><span class="hljs-comment">//真实角色：房东 房东要出租房子</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span></span>&#123;  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>&#123;    System.out.println(<span class="hljs-string">&quot;房屋出租！&quot;</span>);  &#125;&#125;</code></pre><p>Proxy.java 即代理角色</p><pre><code class="hljs java"><span class="hljs-comment">//代理角色：中介</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span> </span>&#123;   <span class="hljs-keyword">private</span> Host host;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">()</span> </span>&#123; &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">(Host host)</span> </span>&#123;       <span class="hljs-keyword">this</span>.host = host;  &#125;   <span class="hljs-comment">//租房</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>&#123;       seeHouse();       host.rent();       fare();  &#125;   <span class="hljs-comment">//看房</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seeHouse</span><span class="hljs-params">()</span></span>&#123;       System.out.println(<span class="hljs-string">&quot;带房客看房&quot;</span>);  &#125;   <span class="hljs-comment">//收中介费</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fare</span><span class="hljs-params">()</span></span>&#123;       System.out.println(<span class="hljs-string">&quot;收中介费&quot;</span>);  &#125;&#125;Client . java 即客户<span class="hljs-comment">//客户类，一般客户都会去找代理！</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;       <span class="hljs-comment">//房东要租房</span>       Host host = <span class="hljs-keyword">new</span> Host();       <span class="hljs-comment">//中介帮助房东</span>       Proxy proxy = <span class="hljs-keyword">new</span> Proxy(host);       <span class="hljs-comment">//你去找中介！</span>       proxy.rent();  &#125;&#125;</code></pre><p>Client . java 即客户</p><pre><code class="hljs java"><span class="hljs-comment">//客户类，一般客户都会去找代理！</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;       <span class="hljs-comment">//房东要租房</span>       Host host = <span class="hljs-keyword">new</span> Host();       <span class="hljs-comment">//中介帮助房东</span>       Proxy proxy = <span class="hljs-keyword">new</span> Proxy(host);       <span class="hljs-comment">//你去找中介！</span>       proxy.rent();  &#125;&#125;</code></pre><p>分析，在这个过程中，你直接接触的就是中介，就如同现实生活中的样子，你看不到房东，但是你依旧通过中介，租到了房东的房子，这就是所谓的代理模式，程序源于生活，所以学编程的人，一般能够更加抽象的看待生活中发生的事情。</p><p><strong>静态代理的好处：</strong></p><ul><li>可以使得我们的真实角色更加纯粹，不再去关注一些公共的事情。</li><li>公共的业务由代理来完成，是西安了业务分工。</li></ul><p><strong>缺点：</strong></p><ul><li>类多了，多了代理类，工作量变大了，开发效率降低。</li></ul><p><strong>再举个例子：</strong></p><p>1、创建一个抽象角色，比如咋们平时做的用户业务，抽象起来就是增删改查！</p><pre><code class="hljs java"><span class="hljs-comment">//抽象角色：增删改查业务</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>;   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>;   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p>2、我们需要一个真实对象来完成这些增删改查操作</p><pre><code class="hljs java"><span class="hljs-comment">//真实对象，完成增删改查操作的人</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-title">implementsUserService</span> </span>&#123;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;       System.out.println(<span class="hljs-string">&quot;增加了一个用户&quot;</span>);  &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;       System.out.println(<span class="hljs-string">&quot;删除了一个用户&quot;</span>);  &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;       System.out.println(<span class="hljs-string">&quot;更新了一个用户&quot;</span>);  &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>&#123;       System.out.println(<span class="hljs-string">&quot;查询了一个用户&quot;</span>);  &#125;&#125;</code></pre><p>3、需求来了，现在我们需要增加一个日志功能，怎么实现！</p><ul><li>思路1 ：在实现类上增加代码 【麻烦！】</li><li>思路2：使用代理来做，能够不改变原来的业务情况下，实现此功能就是最好的了！</li></ul><p>4、设置一个代理类来处理日志！代理角色</p><pre><code class="hljs java"><span class="hljs-comment">//代理角色，在这里面增加日志的实现</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceProxy</span> <span class="hljs-title">implementsUserService</span> </span>&#123;   <span class="hljs-keyword">private</span> UserServiceImpl userService;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserService</span><span class="hljs-params">(UserServiceImpluserService)</span> </span>&#123;       <span class="hljs-keyword">this</span>.userService = userService;  &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;       log(<span class="hljs-string">&quot;add&quot;</span>);       userService.add();  &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;       log(<span class="hljs-string">&quot;delete&quot;</span>);       userService.delete();  &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;       log(<span class="hljs-string">&quot;update&quot;</span>);       userService.update();  &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>&#123;       log(<span class="hljs-string">&quot;query&quot;</span>);       userService.query();  &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String msg)</span></span>&#123;       System.out.println(<span class="hljs-string">&quot;执行了&quot;</span>+msg+<span class="hljs-string">&quot;方法&quot;</span>);  &#125;&#125;</code></pre><p>5、测试访问类：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;       <span class="hljs-comment">//真实业务</span>       UserServiceImpl userService = newUserServiceImpl();       <span class="hljs-comment">//代理类</span>       UserServiceProxy proxy = newUserServiceProxy();       <span class="hljs-comment">//使用代理类实现日志功能！</span>       proxy.setUserService(userService);       proxy.add();  &#125;&#125;</code></pre><p><strong>其中的思想就是：==我们在不改变原来的代码的情况下，实现了对原有功能的增强，这是AOP中最核心的思想。==</strong></p><p>AOP：纵向开发，横向开发</p><img src="/images/Spring5/image-20201121120114168.png" alt="image-20201121120114168" style="zoom:50%;" /><p>我们想要静态代理的好处，又不想要静态代理的缺点（工作量变大，开发效率低），所以就有了动态代理！</p><h3 id="9-2-动态代理"><a href="#9-2-动态代理" class="headerlink" title="9.2 动态代理"></a>9.2 动态代理</h3><p>动态代理的底层就是反射！</p><ul><li><p>动态代理的角色和静态代理是一样的。</p></li><li><p>动态代理的代理类是动态生成的。静态代理的代理类是我们提前写好的。</p></li><li><p>动态代理分为两类，一类是基于动态接口代理、一类是基于类的动态代理。</p><ul><li>基于接口的动态代理——JDK动态代理</li><li>基于类的动态代理——cglib</li><li>Java字节码：现在用的比较多的是javasist来生成动态代理</li></ul></li></ul><p>我们这里使用JDK的原生代码来实现，其余的道理都是一样的。</p><p><strong>JDK的动态代理需要了解两个类：</strong></p><p>核心：InvocationHandler（调用处理程序）和Proxy（代理）</p><pre><code class="hljs java"><span class="hljs-function">Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, 方法 method, Object[]args)</span></span>;</code></pre><p>参数说明：</p><ul><li>proxy：调用该方法的代理实例</li><li>method：所述方法对应于调用代理实例上的接口方法的实例。方法对象的声明类将是该方法声明的接口，它可以是代理类继承该方法的代理接口的超级接口。</li><li>args ：包含的方法调用传递代理实例的参数值的对象的阵列，或null如果接口方法没有参数。原始类型的参数包含在适当的原始包装器类的实例中，例如java.lang.Integer或java.lang.Boolean 。</li></ul><p><strong>代码实现：</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.pojo;<span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<span class="hljs-comment">//动态生成代理类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;    <span class="hljs-comment">//被代理的接口</span>    <span class="hljs-keyword">private</span> Object target;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTarget</span><span class="hljs-params">(Object target)</span> </span>&#123;        <span class="hljs-keyword">this</span>.target = target;    &#125;    <span class="hljs-comment">//生成得到代理类</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(),<span class="hljs-keyword">this</span>);    &#125;    <span class="hljs-comment">//处理代理实例，并返回结果</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;        log(method.getName());<span class="hljs-comment">//可以通过method做很多事情！</span>        <span class="hljs-comment">//动态代理的本质，就是使用反射机制实现</span>        Object result = method.invoke(target, args);        <span class="hljs-keyword">return</span> result;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String msg)</span></span>&#123;        System.out.println(msg);    &#125;&#125;</code></pre><p>客户端：</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//真实角色</span>        Host host = <span class="hljs-keyword">new</span> Host();        <span class="hljs-comment">//代理角色  现在没有 只有一个处理程序</span>        ProxyInvocationHandler pih = <span class="hljs-keyword">new</span> ProxyInvocationHandler();        <span class="hljs-comment">//通过调用程序处理角色 来处理我们要调用的接口对象</span>        pih.setTarget(host);        <span class="hljs-comment">//生成代理角色</span>        Rent proxy = (Rent)pih.getProxy();        proxy.rent();    &#125;&#125;</code></pre><p>随着业务的庞大，使用静态代理的话，会有越来越多的代理类，因此我们选择了动态代理类。动态代理类，一个动态代理可以代理多个类，代理的是接口。（<strong>通过传入的真实类 会找到最上层的接口，这是我猜想的，应该是反射机制的原因，之后学了反射之后，再来进行补充！！</strong>）</p><p><strong>动态代理的好处：</strong></p><ul><li>Proxy类的代码量被固定下来，不会因为业务的逐渐庞大而庞大；</li><li>可以实现AOP编程，实际上静态代理也可以实现，总的来说，AOP可以算作是代理模式的一个典型应用；</li><li>解耦，通过参数就可以判断真实类，不需要事先实例化，更加灵活多变。</li><li>一个动态代理可以代理多个类，代理的是接口！</li></ul><h2 id="10-AOP-面向切面编程"><a href="#10-AOP-面向切面编程" class="headerlink" title="10. AOP-面向切面编程"></a>10. AOP-面向切面编程</h2><p>上一节，我们了解了代理模式，这是AOP的基础，AOP是代理模式的一个应用！</p><h3 id="10-1-什么是AOP"><a href="#10-1-什么是AOP" class="headerlink" title="10.1 什么是AOP"></a>10.1 什么是AOP</h3><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过<strong>预编译方式</strong>和<strong>运行期动态代理</strong>实现<strong>程序功能的统一维护</strong>的一种技术。</p><p>AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一个衍生泛型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><img src="/images/Spring5/640" alt="img" style="zoom:50%;" /><p>公司要求不改变原有的业务逻辑，增加日志的功能。其实写个代理类就可以了，增加验证参数、前置日志、后置日志。</p><p>但是在Spring中可能比较麻烦。</p><h3 id="10-2-AOP在Spring中的作用"><a href="#10-2-AOP在Spring中的作用" class="headerlink" title="10.2 AOP在Spring中的作用"></a>10.2 AOP在Spring中的作用</h3><p>==提供声明式事务：允许用户自定义切面==</p><p>以下名词需要了解：</p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。就是，与我们业务切面逻辑无关的，但是我们需要关注的部分，就是横切关注点。如：日志，安全，缓存，事务。。。</li><li>切面（Aspect）：横切关注点被模块化的特殊对象。即，<strong>他是一个类</strong>。</li><li>通知（Advice）：切面必须要完成的工作。即，<strong>他是类中的一个方法</strong>。</li><li>目标（Target）：被通知对象。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li><li>切入点（PointCut）：切面通知 执行的 “地点”的定义</li><li>连接点（JointPoint）：与切入点匹配的执行点。</li></ul><img src="/images/Spring5/640" alt="img" style="zoom:50%;" /><p>SpringAOP中，通过Adivice定义横切逻辑，Spring中支持5种类型的Advice。</p><img src="/images/Spring5/640" alt="img" style="zoom:50%;" /><p>即，AOP在不改变原有代码的情况下，去增加新的功能。</p><h3 id="10-3-使用Spring实现AOP"><a href="#10-3-使用Spring实现AOP" class="headerlink" title="10.3 使用Spring实现AOP"></a>10.3 使用Spring实现AOP</h3><h4 id="AOP实现——通过Spring-API实现"><a href="#AOP实现——通过Spring-API实现" class="headerlink" title="AOP实现——通过Spring API实现"></a>AOP实现——通过Spring API实现</h4><ol><li>编写业务接口和实现类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;增加了一个用户&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;删除了一个用户&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;查询了一个用户&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;修改了一个用户&quot;</span>);    &#125;&#125;</code></pre><ol start="2"><li>编写增强类，我们编写两个，一个前置增强、一个后置增强</li></ol><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogBefore</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodBeforeAdvice</span> </span>&#123;    <span class="hljs-comment">/*</span><span class="hljs-comment">    * method  要执行的目标对象的方法</span><span class="hljs-comment">    * objects 被调用的方法的参数</span><span class="hljs-comment">    * o 目标对象</span><span class="hljs-comment">    * */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">(Method method, Object[] objects, Object o)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;        System.out.println(o.getClass().getName() + <span class="hljs-string">&quot;的&quot;</span> + method.getName() + <span class="hljs-string">&quot;方法执行了&quot;</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogAfter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AfterReturningAdvice</span> </span>&#123;    <span class="hljs-comment">/*</span><span class="hljs-comment">    * o 返回值</span><span class="hljs-comment">    * method 被调用的方法</span><span class="hljs-comment">    * objects  被调用方法的参数</span><span class="hljs-comment">    * o1 被调用的目标对象</span><span class="hljs-comment">    * */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span><span class="hljs-params">(Object o, Method method, Object[] objects, Object o1)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;        System.out.println(o1.getClass().getName() + <span class="hljs-string">&quot;的&quot;</span> + method.getName() + <span class="hljs-string">&quot;方法，返回值：&quot;</span> + o);    &#125;&#125;</code></pre><ol start="3"><li>最后去Spring的文件中进行注册，并实现AOP切入实现，注意需要导入约束！</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--注册bean--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo1.UserServiceImpl&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logBefore&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo1.LogBefore&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logAfter&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo1.LogAfter&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--aop的配置--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>        <span class="hljs-comment">&lt;!--切入点， expression:表达式匹配要执行的方法--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.wen.demo1.UserServiceImpl.*(..))&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!--执行环绕，advice-ref 执行方法 pointcut-ref 切入点--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;logAfter&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;logBefore&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="4"><li>测试。</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);        UserService userService = applicationContext.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);        userService.add();    &#125;&#125;</code></pre><img src="/images/Spring5/image-20201122211541022.png" alt="image-20201122211541022" style="zoom:50%;" /><p>AOP的重要性：很重要！一定要理解其中的思路，主要是思想的理解！</p><p>Spring的AOP就是将公共业务（日志、安全等）和领域业务结合起来，当执行领域业务时，将会把公共业务加进来，实现公共业务的重复利用。领域业务更纯粹，程序员专注领域业务，其本质还是动态代理！</p><h4 id="AOP实现——自定义类来实现AOP"><a href="#AOP实现——自定义类来实现AOP" class="headerlink" title="AOP实现——自定义类来实现AOP"></a>AOP实现——自定义类来实现AOP</h4><p>目标业务类不变！依旧是UserServiceImpl！</p><ol><li>首先编写一个切入类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiyPointcut</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;--------方法执行前----------&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;--------方法执行后----------&quot;</span>);    &#125;&#125;</code></pre><ol start="2"><li>在Spring中进行配置</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--注册bean--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo1.UserServiceImpl&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logBefore&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo1.LogBefore&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logAfter&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo1.LogAfter&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;diy&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo2.DiyPointcut&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--aop的配置--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;diy&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;diyPointCut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.wen.demo1.UserServiceImpl.*(..))&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;diyPointCut&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;diyPointCut&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="3"><li>测试</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);        UserService userService = applicationContext.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);        userService.add();    &#125;&#125;</code></pre><img src="/images/Spring5/image-20201122212833713.png" alt="image-20201122212833713" style="zoom:50%;" /><h4 id="AOP实现——使用注解实现"><a href="#AOP实现——使用注解实现" class="headerlink" title="AOP实现——使用注解实现"></a>AOP实现——使用注解实现</h4><ol><li>编写一个注解实现的增强类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.demo3;<span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.After;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<span class="hljs-meta">@Aspect</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationPointCut</span> </span>&#123;    <span class="hljs-meta">@Before(&quot;execution(* com.wen.demo1.UserServiceImpl.*(..))&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;--------方法执行前----------&quot;</span>);    &#125;    <span class="hljs-meta">@After(&quot;execution(* com.wen.demo1.UserServiceImpl.*(..))&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;--------方法执行后----------&quot;</span>);    &#125;    <span class="hljs-meta">@Around(&quot;execution(* com.wen.demo1.UserServiceImpl.*(..))&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint jp)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;        System.out.println(<span class="hljs-string">&quot;环绕前&quot;</span>);        System.out.println(<span class="hljs-string">&quot;签名:&quot;</span>+jp.getSignature());        <span class="hljs-comment">//执行目标方法proceed</span>        Object proceed = jp.proceed();        System.out.println(<span class="hljs-string">&quot;环绕后&quot;</span>);        System.out.println(proceed);    &#125;&#125;</code></pre><ol start="2"><li>在Spring配置文件中，注册bean，并增强支持注解的配置。</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--注册bean--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo1.UserServiceImpl&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;annotationPointCut&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo3.AnnotationPointCut&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">        通过aop命名空间的&lt;aop:aspectj-autoproxy /&gt;</span><span class="hljs-comment">        声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。</span><span class="hljs-comment">        当然，spring 在内部依旧采用AnnotationAwareAspectJAutoProxyCreator</span><span class="hljs-comment">进行自动代理的创建工作，</span><span class="hljs-comment">        但具体实现的细节已经被&lt;aop:aspectj-autoproxy /&gt;隐藏起来了</span><span class="hljs-comment">    --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="3"><li>测试</li></ol><img src="/images/Spring5/image-20201122214033151.png" alt="image-20201122214033151" style="zoom:50%;" /><p><strong>aop:aspectj-autoproxy：说明</strong></p><p>通过aop命名空间的**&lt;aop:aspectj-autoproxy /&gt;**声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。当然，spring 在内部依旧采用AnnotationAwareAspectJAutoProxyCreator进行自动代理的创建工作，但具体实现的细节已经被&lt;aop:aspectj-autoproxy /&gt;隐藏起来了</p><p>&lt;aop:aspectj-autoproxy /&gt;有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为&lt;aop:aspectj-autoproxy  poxy-target-class=”true”/&gt;时，表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。</p><h2 id="11-整合MyBatis"><a href="#11-整合MyBatis" class="headerlink" title="11. 整合MyBatis"></a>11. 整合MyBatis</h2><p>步骤：</p><ol><li>导入相关的jar包</li></ol><ul><li>junit</li><li>mybatis</li><li>mysql数据库</li><li>spring相关的</li><li>aop织入</li><li>mybatis-spring</li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--spring相关--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-comment">&lt;!--mybatis-spring整合包 【重点】--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--aspectJ AOP 织入器--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><p><strong>配置Maven静态资源过滤问题！</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>           <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><ol start="2"><li><p>编写配置文件</p></li><li><p>代码实现</p></li></ol><h3 id="11-1-回顾mybatis"><a href="#11-1-回顾mybatis" class="headerlink" title="11.1 回顾mybatis"></a>11.1 回顾mybatis</h3><ol><li>编写pojo实体类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.pojo;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String pwd;&#125;</code></pre><ol start="2"><li>实现mybatis的配置文件</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mybatis-config.xml--&gt;</span><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--核心配置文件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--事务管理--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--数据库相关--&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>    <span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在mybatis核心配置文件中注册--&gt;</span>    <span class="hljs-comment">&lt;!--    Type interface com.wen.mapper.UserMapper id not known to the MapperRegistry.--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/wen/mapper/UserMapper.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><pre><code class="hljs properties"><span class="hljs-comment">#db.properties</span><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true</span><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><span class="hljs-attr">password</span>=<span class="hljs-string">645645aa</span></code></pre><ol start="3"><li>编写MyBatisUtils工具类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.utils;<span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-comment">//SqlSessionFactory  SqlSession</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisUtils</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">//使用mybatis第一步:获取SqlSessionFactory对象</span>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;            InputStream inputStream = Resources.getResourceAsStream(resource);            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-comment">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span>    <span class="hljs-comment">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;        SqlSession sqlSession = sqlSessionFactory.openSession();        <span class="hljs-keyword">return</span> sqlSession;    &#125;&#125;</code></pre><ol start="4"><li>连接数据库（IDEA）</li></ol><img src="/images/Spring5/image-20201123091508200.png" alt="image-20201123091508200" style="zoom:50%;" /><ol start="5"><li>UserMapper接口编写</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.mapper;<span class="hljs-keyword">import</span> com.wen.pojo.User;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;userId&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectAllUsers</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;userId&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;&#125;</code></pre><ol start="6"><li>接口对应的Mapper映射文件</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--省去了以往的UserDaoImpl 省去了连接数据库的一些语句--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wen.mapper.UserMapper&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--命名空间 绑定一个指定的Mapper接口--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span>        insert into mybatis.user(id, name, pwd) values (#&#123;userId&#125;, #&#123;userName&#125;, #&#123;userPwd&#125;)    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span>&gt;</span>        delete from mybatis.user where id=#&#123;userId&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllUsers&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span>        select * from mybatis.user    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span>        select * from mybatis.user where id=$&#123;userId&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><ol start="7"><li>测试类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.wen.mapper.UserMapper;<span class="hljs-keyword">import</span> com.wen.pojo.User;<span class="hljs-keyword">import</span> com.wen.utils.MyBatisUtils;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapperTest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SqlSession sqlSession = MyBatisUtils.getSqlSession();        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        List&lt;User&gt; userList = mapper.selectAllUsers();        <span class="hljs-keyword">for</span> (User user : userList) &#123;            System.out.println(user.getName());        &#125;    &#125;&#125;</code></pre><img src="/images/Spring5/image-20201123091739554.png" alt="image-20201123091739554" style="zoom:50%;" /><p>测试：测试成功</p><img src="/images/Spring5/image-20201123091755933.png" alt="image-20201123091755933" style="zoom:50%;" /><h3 id="11-2-整合MyBatis方式一"><a href="#11-2-整合MyBatis方式一" class="headerlink" title="11.2 整合MyBatis方式一"></a>11.2 整合MyBatis方式一</h3><p>整个项目的结构：</p><img src="/images/Spring5/image-20201123105615677.png" alt="image-20201123105615677" style="zoom:50%;" /><ol><li>编写applicationContext.xml</li></ol><p>要和Spring一起使用MyBatis，需要在Spring应用上下文中定义至少两样东西：一个SqlSessionFactory和至少一个数据映射类。</p><p>在 MyBatis-Spring 中，可使用SqlSessionFactoryBean来创建 SqlSessionFactory。</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 指定spring读取db.properties配置 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--DataSource原来使用的是mybatis的，现在使用Spring的数据源--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--SqlSessionFactoryBean 来创建 sqlSessionFactory--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!--绑定mybatis配置文件 这样可以在这个文件中写mybatis-config.xml的相关配置 如下面包的扫描--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:com/wen/mapper/*.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--SqlSessionTemplate 是 MyBatis-Spring 的核心。</span><span class="hljs-comment">    作为 SqlSession 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 SqlSession。--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--因为SqlSessionTemplate没有set方法，只能使用构造器进行注入--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><p>其中db.properties如下：</p><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true&amp;allowPublicKeyRetrieval=true</span><span class="hljs-attr">name</span>=<span class="hljs-string">root</span><span class="hljs-attr">password</span>=<span class="hljs-string">645645aa</span></code></pre><p>注意：name 如果改成username userName都会报错，很奇怪！！</p><ol start="2"><li>编写pojo类、Mapper接口、Mapper.xml</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.pojo;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String pwd;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.mapper;<span class="hljs-keyword">import</span> com.wen.pojo.User;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;userId&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectAllUsers</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;userId&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--省去了以往的UserDaoImpl 省去了连接数据库的一些语句--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wen.mapper.UserMapper&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--命名空间 绑定一个指定的Mapper接口--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span>        insert into mybatis.user(id, name, pwd) values (#&#123;userId&#125;, #&#123;userName&#125;, #&#123;userPwd&#125;)    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span>&gt;</span>        delete from mybatis.user where id=#&#123;userId&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllUsers&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span>        select * from mybatis.user    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span>        select * from mybatis.user where id=$&#123;userId&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><ol start="3"><li>将sqlSession bean注入到Mapper bean中</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.mapper;<span class="hljs-keyword">import</span> com.wen.pojo.User;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionTemplate;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span></span>&#123;    <span class="hljs-comment">//我们所有的操作都使用sqlSession来执行，现在都使用sqlSessionTemplate</span>    <span class="hljs-keyword">private</span> SqlSessionTemplate sqlSession;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> </span>&#123;        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        <span class="hljs-keyword">return</span> mapper.addUser(map);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        <span class="hljs-keyword">return</span> mapper.deleteUser(id);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectAllUsers</span><span class="hljs-params">()</span> </span>&#123;        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        <span class="hljs-keyword">return</span> mapper.selectAllUsers();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        <span class="hljs-keyword">return</span> mapper.getUserById(id);    &#125;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.mapper.UserMapperImpl&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSession&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><p>完整的配置文件：</p><p><strong>db.properties</strong></p><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true&amp;allowPublicKeyRetrieval=true</span><span class="hljs-attr">name</span>=<span class="hljs-string">root</span><span class="hljs-attr">password</span>=<span class="hljs-string">645645aa</span></code></pre><p><strong>spring-mapper.xml</strong></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 指定spring读取db.properties配置 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--DataSource原来使用的是mybatis的，现在使用Spring的数据源--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--SqlSessionFactoryBean 来创建 sqlSessionFactory--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!--绑定mybatis配置文件 这样可以在这个文件中写mybatis-config.xml的相关配置 如下面包的扫描--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:com/wen/mapper/*.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--SqlSessionTemplate 是 MyBatis-Spring 的核心。</span><span class="hljs-comment">    作为 SqlSession 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 SqlSession。--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--因为SqlSessionTemplate没有set方法，只能使用构造器进行注入--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p><strong>mybatis-config.xml</strong></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--核心配置文件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!--一般 别名 设置 在这个文件进行配置--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p><strong>applicationContext.xml</strong></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-mapper.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.mapper.UserMapperImpl&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSession&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="5"><li>测试</li></ol><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.wen.mapper.UserMapper;<span class="hljs-keyword">import</span> com.wen.pojo.User;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapperTest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);        UserMapper userMapper = applicationContext.getBean(<span class="hljs-string">&quot;userMapper&quot;</span>, UserMapper.class);        List&lt;User&gt; userList = userMapper.selectAllUsers();        <span class="hljs-keyword">for</span> (User user : userList) &#123;            System.out.println(user.getName());        &#125;    &#125;&#125;</code></pre><p>测试成功！</p><img src="/images/Spring5/image-20201123110502571.png" alt="image-20201123110502571" style="zoom:50%;" /><h3 id="11-3-整合MyBatis方式二"><a href="#11-3-整合MyBatis方式二" class="headerlink" title="11.3 整合MyBatis方式二"></a>11.3 整合MyBatis方式二</h3><p>通过SqlSessionDaoSupport可以省略sqlSession在配置文件中的注入。</p><p>SqlSessionDaoSupport是一个抽象的支持类，用来为你提供SqlSession，调用getSqlSession()方法你会得到一个SqlSessionTemplate。</p><ol><li>修改UserMapperImpl类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.mapper;<span class="hljs-keyword">import</span> com.wen.pojo.User;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionTemplate;<span class="hljs-keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SqlSessionDaoSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span></span>&#123;    <span class="hljs-comment">//我们所有的操作都使用sqlSession来执行，现在都使用sqlSessionTemplate</span><span class="hljs-comment">//    private SqlSessionTemplate sqlSession; //这个一定要注释掉</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> </span>&#123;        <span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper.class).addUser(map);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        <span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper.class).deleteUser(id);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectAllUsers</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper.class).selectAllUsers();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        <span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper.class).getUserById(id);    &#125;&#125;</code></pre><ol start="2"><li>修改配置文件</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--applicationContext.xml--&gt;</span><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-mapper.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.mapper.UserMapperImpl&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><img src="/images/Spring5/image-20201123125502135.png" alt="image-20201123125502135" style="zoom:50%;" /><p><strong>这一部分不需要了！！</strong></p><ol start="3"><li>测试</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapperTest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);        UserMapper userMapper = applicationContext.getBean(<span class="hljs-string">&quot;userMapper&quot;</span>, UserMapper.class);        List&lt;User&gt; userList = userMapper.selectAllUsers();        <span class="hljs-keyword">for</span> (User user : userList) &#123;            System.out.println(user.getName());        &#125;    &#125;&#125;</code></pre><img src="/images/Spring5/image-20201123125626302.png" alt="image-20201123125626302" style="zoom:50%;" /><p>测试成功！！</p><h2 id="12-声明式事务"><a href="#12-声明式事务" class="headerlink" title="12.声明式事务"></a>12.声明式事务</h2><h3 id="12-1-回顾事务"><a href="#12-1-回顾事务" class="headerlink" title="12.1 回顾事务"></a>12.1 回顾事务</h3><ul><li><strong>把一组业务当作一个业务来做</strong>！要么都成功，要么都失败。</li><li>事务在项目开发中，十分的重要，涉及到数据的一致性问题，不能马虎！</li><li>确保数据的完整性和一致性。</li></ul><p>事务ACID原则：</p><ul><li><p>原子性</p><p>事务是原子性操作，由一系列动作组成，事务的原子性确保动作要么全部完成，要么完全不起作用。</p></li><li><p>一致性</p><p>一旦所有事务动作完成，事务就要被提交。数据和资源处于一种满足业务规则的一致性状态中。</p></li><li><p>隔离性</p><p>可能多个事务会同时处理相同的数据，因此每个事务都应该与其他食物隔离开来，防止数据损坏。</p></li><li><p>持久性：</p><p>事务一旦提交，无论系统发生什么问题，结果都不会影响。通常情况下，事务的结果被写到存储器中。</p></li></ul><p>我们先做一个实验：</p><ol><li>首先修改UserMapperImpl中的selectUsers方法</li></ol><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectAllUsers</span><span class="hljs-params">()</span> </span>&#123;  UserMapper mapper = getSqlSession().getMapper(UserMapper.class);  <span class="hljs-comment">//先进行添加操作</span>  mapper.addUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;renwen&quot;</span>, <span class="hljs-string">&quot;645645&quot;</span>));  <span class="hljs-comment">//删除操作</span>  mapper.deleteUser(<span class="hljs-number">6</span>);  <span class="hljs-comment">//最后进行select</span>  <span class="hljs-keyword">return</span> mapper.selectAllUsers();&#125;</code></pre><ol start="2"><li>其中delete操作 sql语句其实是错的！</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span>&gt;</span>  deletes from mybatis.user where id=#&#123;userId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span></code></pre><ol start="3"><li>测试</li></ol><p>结果：add成功执行，delete出错！</p><p>没有进行事务的管理；</p><p>我们想让他们都成功才成功，有一个失败就都失败，我们就应该需要事务。</p><p>以前我们都需要自己手动管理事务，十分麻烦！但是Spring给我们提供了事务管理，我们只需要配置即可！</p><h3 id="12-2-Spring中的事务管理"><a href="#12-2-Spring中的事务管理" class="headerlink" title="12.2 Spring中的事务管理"></a>12.2 Spring中的事务管理</h3><ul><li>声明式事务：AOP</li><li>编程式事务：需要代码编写（不太实用~）</li></ul><ol><li>配置声明式事务</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置声明式事务--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><ol start="2"><li>配置好事务管理器后，我们需要去配置事务的通知</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--结合AOP实现事务的织入--&gt;</span><span class="hljs-comment">&lt;!--配置事务的类 配置事务通知--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--给哪些方法配置事务--&gt;</span>  <span class="hljs-comment">&lt;!--配置事务的传播特性--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;selectAllUsers&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span></code></pre><ol start="3"><li>配置AOP织入事务</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置AOP织入事务--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txPointCut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.wen.mapper.*.*(..))&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;txPointCut&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span></code></pre><p>完整的xml：</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/tx</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/tx/spring-tx.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 指定spring读取db.properties配置 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--DataSource原来使用的是mybatis的，现在使用Spring的数据源jdbc--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--SqlSessionFactoryBean 来创建 sqlSessionFactory--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--注入数据源你--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!--绑定mybatis配置文件 这样可以在这个文件中写mybatis-config.xml的相关配置 如下面包的扫描--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:com/wen/mapper/*.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--SqlSessionTemplate 是 MyBatis-Spring 的核心。</span><span class="hljs-comment">    作为 SqlSession 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 SqlSession。--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--因为SqlSessionTemplate没有set方法，只能使用构造器进行注入--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置声明式事务--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--结合AOP实现事务的织入--&gt;</span>    <span class="hljs-comment">&lt;!--配置事务的类 配置事务通知--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--给哪些方法配置事务--&gt;</span>        <span class="hljs-comment">&lt;!--配置事务的传播特性--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;selectAllUsers&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置AOP织入事务--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txPointCut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.wen.mapper.*.*(..))&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;txPointCut&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="5"><li>仍然delete语句写错，进行测试！</li></ol><p>结果：直接报错，添加操作也没有成功！</p><p><strong>思考：</strong></p><p>为什么需要事务？</p><ol><li>如果不配置事务，可能存在数据提交不一致的情况；</li><li>如果我们不在Spring中去配置声明式事务，我们就需要在代码中手动配置事务！</li><li>事务在项目开发过程中非常重要，涉及到数据的一致性的问题，不容马虎！</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis</title>
    <link href="/2020/11/27/MyBatis/"/>
    <url>/2020/11/27/MyBatis/</url>
    
    <content type="html"><![CDATA[<p>环境：</p><ul><li>JDK 1.8</li><li>MySQL 8.0</li><li>maven  3.6.1</li><li>IDEA</li></ul><p>回顾：</p><ul><li>JDBC</li><li>MySQL</li><li>Java 基础</li><li>Maven</li><li>Junit  单元测试</li></ul><p>框架：配置文件的，最好的方式：看官网文档</p><ul><li>SSM  Mybatis: <a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></li></ul><p>补充以下：IDEA快捷键补充返回值和返回类型：ctrl+alt+v</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a><strong>1. 简介</strong></h2><h3 id="1-1-什么是Mybatis"><a href="#1-1-什么是Mybatis" class="headerlink" title="1.1 什么是Mybatis"></a><strong>1.1 什么是Mybatis</strong></h3><p><img src="/images/MyBatis/clipboard.png" alt="clipboard"></p><p>MyBatis 是一款优秀的<strong>持久层框架</strong>，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><p>MyBatis 本是apache的一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/3406069">开源项目</a>iBatis, 2010年这个<a href="https://baike.baidu.com/item/%E9%A1%B9%E7%9B%AE/477803">项目</a>由apache software foundation 迁移到了[google code](<a href="https://baike.baidu.com/item/google">https://baike.baidu.com/item/google</a> code/2346604)，并且改名为MyBatis 。2013年11月迁移到<a href="https://baike.baidu.com/item/Github/10145341">Github</a>。</p><p>iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的<a href="https://baike.baidu.com/item/%E6%8C%81%E4%B9%85%E5%B1%82/3584971">持久层</a>框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAOs）</p><p>当前，最新版本是MyBatis 3.5.6。</p><p><strong>如何获得Mybatis?</strong></p><ul><li>Github ：下载地址：<a href="https://github.com/mybatis/mybatis-3/releases/tag/mybatis-3.5.6">https://github.com/mybatis/mybatis-3/releases/tag/mybatis-3.5.6</a></li><li>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></li><li>Maven仓库</li></ul><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="1-2-持久化"><a href="#1-2-持久化" class="headerlink" title="1.2 持久化"></a><strong>1.2 持久化</strong></h3><p>数据持久化</p><ul><li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程.</li><li>内存:<strong>断电即失</strong></li><li>数据库(jdbc),  io文件持久化</li><li>生活:冷藏, 罐头</li></ul><p><strong>为什么需要持久化?</strong></p><ul><li>有一些对象不能丢失</li><li>内存价格高</li></ul><h3 id="1-3-持久层"><a href="#1-3-持久层" class="headerlink" title="1.3 持久层"></a><strong>1.3 持久层</strong></h3><p>Dao层  Service层 Controller层</p><ul><li>完成持久化工作的代码块</li><li>层界限十分明显</li></ul><h3 id="1-4-为什么需要Mybatis"><a href="#1-4-为什么需要Mybatis" class="headerlink" title="1.4 为什么需要Mybatis?"></a><strong>1.4 为什么需要Mybatis?</strong></h3><ul><li>帮助程序员将数据存入到数据库中。</li><li>方便</li><li>传统的JDBC过于复杂。简化。框架。自动化。</li><li>不用MyBatis也可以。更容易上手。<strong>技术没有高低之分，只有使用的人</strong></li><li>本身小巧，没有第三方依赖。</li><li>灵活：sql写在xml中</li><li>接触sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更加清晰，更易维护，更易单元测试。<strong>sql和代码的分离，提高了可维护性。</strong></li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql。</li></ul><p><strong>最重要的一点：使用的人很多！</strong></p><h2 id="2-第一个MyBatis程序"><a href="#2-第一个MyBatis程序" class="headerlink" title="2. 第一个MyBatis程序"></a>2. 第一个MyBatis程序</h2><p>思路：搭建环境-&gt;导入Mybatis-&gt;编写代码-&gt;测试！</p><p>MyBatisUtils实体类-&gt;mybatis-config.xml-&gt;User实体类-&gt;UserMapper接口-&gt;UserMapper.xml-&gt;UserMapperTest测试类</p><p><strong>前两个文件一般不需要修改，直接使用！</strong></p><h3 id="2-1-搭建环境"><a href="#2-1-搭建环境" class="headerlink" title="2.1 搭建环境"></a>2.1 搭建环境</h3><img src="/images/MyBatis/image-20201112093037981.png" alt="image-20201112093037981" style="zoom:50%;" /><p>新建项目</p><ol><li>新建一个普通的maven项目</li><li>删除src目录，变成父工程</li><li>导入依赖  至少两个：mybatis  mysql驱动 junit</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-comment">&lt;!--mybatis--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--mysql驱动--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--junit--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><h3 id="2-2-创建一个模块"><a href="#2-2-创建一个模块" class="headerlink" title="2.2 创建一个模块"></a>2.2 创建一个模块</h3><img src="/images/MyBatis/image-20201112094756244.png" alt="image-20201112094756244" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112094817132.png" alt="image-20201112094817132" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112095020393.png" alt="image-20201112095020393" style="zoom:50%;" /><p>这样就基于mybatis创建了一个子项目</p><img src="/images/MyBatis/image-20201112095058221.png" alt="image-20201112095058221" style="zoom:50%;" /><p>好处是：不用再重新导入依赖包了</p><img src="/images/MyBatis/image-20201112095130914.png" alt="image-20201112095130914" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112095146896.png" alt="image-20201112095146896" style="zoom:50%;" /><ul><li>编写mybatis的核心配置文件（官网上有）</li></ul><img src="/images/MyBatis/image-20201112100703771.png" alt="image-20201112100703771" style="zoom:50%;" /><p>编写mybatis-config.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--核心配置文件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--事务管理--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--数据库相关--&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8<span class="hljs-symbol">&amp;amp;</span>useSSL=false<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC<span class="hljs-symbol">&amp;amp;</span>rewriteBatchedStatements=true&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;645645aa&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>    <span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在mybatis核心配置文件中注册--&gt;</span><span class="hljs-comment">&lt;!--    Type interface com.wen.dao.UserMapper id not known to the MapperRegistry.--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/wen/dao/UserMapper.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>每个基于 <strong>MyBatis</strong> 的应用都是以一个 <strong>SqlSessionFactory</strong> 的实例为核心的。<strong>SqlSessionFactory</strong> 的实例可以通过 <strong>SqlSessionFactoryBuilder</strong> 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。</p><p>(其实就是上面的编写mybatis-config.xml文件)</p><p>从 XML 文件中构建 SqlSessionFactory 的实例非常简单，建议使用类路径下的资源文件进行配置。 但也可以使用任意的输入流（InputStream）实例，比如用文件路径字符串或 file:// URL 构造的输入流。MyBatis 包含一个名叫 Resources 的工具类，它包含一些实用方法，使得从类路径或其它位置加载资源文件更加容易。</p><p><strong>官方文档：</strong></p><pre><code class="hljs java">String resource = <span class="hljs-string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;InputStream inputStream = Resources.getResourceAsStream(resource);SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</code></pre><ul><li>编写mybatis工具类</li></ul><img src="/images/MyBatis/image-20201112103239319.png" alt="image-20201112103239319" style="zoom:50%;" /><pre><code class="hljs java"><span class="hljs-comment">//SqlSessionFactory  SqlSession</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisUtils</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">//使用mybatis第一步:获取SqlSessionFactory对象</span>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;            InputStream inputStream = Resources.getResourceAsStream(resource);            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-comment">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span>    <span class="hljs-comment">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;        SqlSession sqlSession = sqlSessionFactory.openSession();        <span class="hljs-keyword">return</span> sqlSession;    &#125;&#125;</code></pre><h3 id="2-3-编写代码"><a href="#2-3-编写代码" class="headerlink" title="2.3 编写代码"></a>2.3 编写代码</h3><ul><li>实体类</li></ul><img src="/images/MyBatis/image-20201112103707857.png" alt="image-20201112103707857" style="zoom:50%;" /><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String pwd;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, String pwd)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.pwd = pwd;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPwd</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> pwd;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPwd</span><span class="hljs-params">(String pwd)</span> </span>&#123;        <span class="hljs-keyword">this</span>.pwd = pwd;    &#125;&#125;</code></pre><ul><li>Dao接口(后期改成Mapper)</li></ul><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span></span>&#123;    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;&#125;</code></pre><ul><li>接口实现类 UserMapper.xml</li></ul><p>由原来的UserDapImpl转变成一个Mapper配置文件</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--省去了以往的UserDaoImpl 省去了连接数据库的一些语句--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wen.dao.UserDao&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--命名空间 绑定一个指定的Mapper接口--&gt;</span><span class="hljs-comment">&lt;!--    查询语句 id 对应方法名字--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span>        select * from mybatis.user    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><p>语句中的返回类型一般有两种resultType和resultMap，最常用的是resultType</p><h3 id="2-4-测试（常见问题解决方法）"><a href="#2-4-测试（常见问题解决方法）" class="headerlink" title="2.4 测试（常见问题解决方法）"></a>2.4 测试（常见问题解决方法）</h3><p>注意点：</p><p>==Type interface com.wen.dao.UserMapper id not known to the <strong>MapperRegistry</strong>.==</p><p><strong>MapperRegistry：</strong>核心配置文件中注册mappers</p><img src="/images/MyBatis/image-20201112110245072.png" alt="image-20201112110245072" style="zoom:50%;" /><p>==java.io.IOException: Could not find resource org/mybatis/example/mybatis-config.xml==</p><img src="/images/MyBatis/image-20201112110638999.png" alt="image-20201112110638999" style="zoom:50%;" /><p>java下的UserMapper.xml没有生效。maven默认会启动resources下的所有配置文件，java下的xml文件不会启动生效。</p><p><strong>原因：</strong>由于maven约定大于配置，我们会遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：==（建议只要创建Maven项目就写入）==</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在build中配置resources, 来防止我们资源导出失败的问题--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.yml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.yml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><p>放在父工程中有可能不生效，最好子工程中也放一份。</p><ul><li>junit</li></ul><img src="/images/MyBatis/image-20201112122154868.png" alt="image-20201112122154868" style="zoom:50%;" /><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> </span>&#123;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-comment">//1. 获取SqlSession对象</span>        SqlSession sqlSession = MybatisUtils.getSqlSession();        <span class="hljs-comment">//2. 执行</span>        <span class="hljs-comment">//方式一：getMapper</span>        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);        List&lt;User&gt; userList = userMapper.getUserList();        <span class="hljs-keyword">for</span> (User user : userList) &#123;            System.out.println(user.getName());        &#125;        <span class="hljs-comment">//关闭sqlSession</span>        sqlSession.close();    &#125;&#125;</code></pre><p>可能会报如下的错误：</p><p>==Cause: com.sun.org.apache.xerces.internal.impl.io.MalformedByteSeque==</p><p><strong>解决方案：</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></code></pre><img src="/images/MyBatis/image-20201112122437880.png" alt="image-20201112122437880" style="zoom:50%;" /><p>测试成功：</p><img src="/images/MyBatis/image-20201112122642943.png" alt="image-20201112122642943" style="zoom:50%;" /><p><strong>可能遇见的问题：</strong></p><ul><li>配置文件没有注册</li><li>绑定接口不对：全限定名</li><li>方法名不对</li><li>返回类型不对</li><li>Maven导出资源问题</li></ul><h3 id="2-5-对命名空间的一点补充"><a href="#2-5-对命名空间的一点补充" class="headerlink" title="2.5  对命名空间的一点补充"></a>2.5  <strong>对命名空间的一点补充</strong></h3><p>在之前版本的 MyBatis 中，<strong>命名空间（Namespaces）</strong>的作用并不大，是可选的。 但现在，随着命名空间越发重要，你必须指定命名空间。</p><p>命名空间的作用有两个，一个是利用更长的全限定名来将不同的语句隔离开来，同时也实现了你上面见到的接口绑定。就算你觉得暂时用不到接口绑定，你也应该遵循这里的规定，以防哪天你改变了主意。 长远来看，只要将命名空间置于合适的 Java 包命名空间之中，你的代码会变得更加整洁，也有利于你更方便地使用 MyBatis。</p><p><strong>命名解析：</strong>为了减少输入量，MyBatis 对所有具有名称的配置元素（包括语句，结果映射，缓存等）使用了如下的命名解析规则。</p><ul><li>全限定名（比如 “com.mypackage.MyMapper.selectAllThings）将被直接用于查找及使用。</li><li>短名称（比如 “selectAllThings”）如果全局唯一也可以作为一个单独的引用。 如果不唯一，有两个或两个以上的相同名称（比如 “com.foo.selectAllThings” 和 “com.bar.selectAllThings”），那么使用时就会产生“短名称不唯一”的错误，这种情况下就必须使用全限定名。</li></ul><h3 id="2-6-作用域（Scope）和生命周期"><a href="#2-6-作用域（Scope）和生命周期" class="headerlink" title="2.6 作用域（Scope）和生命周期"></a>2.6 作用域（Scope）和生命周期</h3><h4 id="1-SqlSessionFactoryBuilder"><a href="#1-SqlSessionFactoryBuilder" class="headerlink" title="(1) SqlSessionFactoryBuilder"></a>(1) SqlSessionFactoryBuilder</h4><p>这个类可以被实例化、使用和丢弃，<u><strong>一旦创建了 SqlSessionFactory，就不再需要它了</u>。</strong> 因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。 你可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例，但最好还是不要一直保留着它，以保证所有的 XML 解析资源可以被释放给更重要的事情。</p><h4 id="2-SqlSessionFactory"><a href="#2-SqlSessionFactory" class="headerlink" title="(2) SqlSessionFactory"></a>(2) SqlSessionFactory</h4><p><u><strong>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。</strong></u> 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏习惯”。因此 SqlSessionFactory 的最佳作用域是应用作用域。 有很多方法可以做到，<u><strong>最简单的就是使用单例模式或者静态单例模式。</strong></u></p><h4 id="3-SqlSession"><a href="#3-SqlSession" class="headerlink" title="(3) SqlSession"></a>(3) SqlSession</h4><p><u>每个线程都应该有它自己的 SqlSession 实例</u>。<u>SqlSession 的实例不是线程安全的，因此是不能被共享的</u>，所以它的最佳的作用域是请求或方法作用域。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 如果你现在正在使用一种 Web 框架，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。 <u>换句话说，每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。</u> <u>这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 finally 块中。</u> </p><h2 id="3-增删查改的实现（CRUD）"><a href="#3-增删查改的实现（CRUD）" class="headerlink" title="3. 增删查改的实现（CRUD）"></a>3. 增删查改的实现（CRUD）</h2><p>C：Create（增加）、R：Retrieve（检索）、U：Update（更新）</p><p>D：Delete（删除）</p><p><strong>编写接口方法-&gt;编写Mapper中对应的sql语句-&gt;测试</strong></p><h3 id="3-1-select"><a href="#3-1-select" class="headerlink" title="3.1 select"></a>3.1 select</h3><p>选择、查询语句</p><ul><li>id：对应namespace中的方法名</li><li>resultType：Sql语句执行的返回值</li><li>parameterType：参数类型</li></ul><img src="/images/MyBatis/image-20201112184955494.png" alt="image-20201112184955494" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112185023566.png" alt="image-20201112185023566" style="zoom:50%;" /><p><strong>下图中的#{id}中的id对应UserMapper中getUserById的参数id.</strong></p><img src="/images/MyBatis/image-20201112185250610.png" alt="image-20201112185250610" style="zoom:50%;" /><p><strong>玫红色部分为固定部分。</strong></p><h3 id="3-2-insert"><a href="#3-2-insert" class="headerlink" title="3.2 insert"></a>3.2 insert</h3><p>增加接口方法。</p><img src="/images/MyBatis/image-20201112185642049.png" alt="image-20201112185642049" style="zoom:50%;" /><p>增加xml配置</p><img src="/images/MyBatis/image-20201112185702706.png" alt="image-20201112185702706" style="zoom:50%;" /><p>写测试类进行测试：</p><img src="/images/MyBatis/image-20201112185955187.png" alt="image-20201112185955187" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112190006284.png" alt="image-20201112190006284" style="zoom:50%;" /><p>运行成功，但数据库中没有成功添加？！！</p><img src="/images/MyBatis/image-20201112190036337.png" alt="image-20201112190036337" style="zoom:50%;" /><p>原因：增删改操作需要提交事务</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span></span>&#123;    SqlSession sqlSession = MybatisUtils.getSqlSession();    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);    userMapper.addUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;zhanger&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span>));    <span class="hljs-comment">//提交事务</span>    sqlSession.commit();  <span class="hljs-comment">//关闭</span>    sqlSession.close();&#125;</code></pre><img src="/images/MyBatis/image-20201112190337525.png" alt="image-20201112190337525" style="zoom:50%;" /><h3 id="3-3-update"><a href="#3-3-update" class="headerlink" title="3.3 update"></a>3.3 update</h3><img src="/images/MyBatis/image-20201112190834500.png" alt="image-20201112190834500" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112190848069.png" alt="image-20201112190848069" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112190820745.png" alt="image-20201112190820745" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112190912708.png" alt="image-20201112190912708" style="zoom:50%;" /><h3 id="3-4-delete"><a href="#3-4-delete" class="headerlink" title="3.4 delete"></a>3.4 delete</h3><img src="/images/MyBatis/image-20201112191114785.png" alt="image-20201112191114785" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112191125191.png" alt="image-20201112191125191" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112191136269.png" alt="image-20201112191136269" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112191136269-1606487584119.png" alt="image-20201112191136269" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112191147706.png" alt="image-20201112191147706" style="zoom:50%;" /><h3 id="3-5-错误分析"><a href="#3-5-错误分析" class="headerlink" title="3.5 错误分析"></a>3.5 错误分析</h3><ol><li>标签不要匹配错误</li><li><img src="/images/MyBatis/image-20201112191730460.png" alt="image-20201112191730460" style="zoom:50%;" /></li></ol><p>必须使用路径，而namespace中使用的是包名。</p><img src="/images/MyBatis/image-20201112191814114.png" alt="image-20201112191814114" style="zoom:50%;" /><ol start="3"><li>读错，从后往前读。</li><li>NullPointException，空指针一场，可能是没有注册资源。</li><li>输出的xml文件中存在中文乱码问题，删掉重试即可。</li><li>Maven资源没有导出问题（见2.4常见问题解决方法）</li></ol><h3 id="3-6-万能Map（工作实践出的）"><a href="#3-6-万能Map（工作实践出的）" class="headerlink" title="3.6 万能Map（工作实践出的）"></a>3.6 万能Map（工作实践出的）</h3><img src="/images/MyBatis/image-20201112192754535.png" alt="image-20201112192754535" style="zoom:50%;" /><p>如果有100多个字段都修改，一个一个的写太难了！怎么办呢？</p><p><strong>我们使用Map传递参数！</strong></p><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑map，map可以某些字段为空，比较灵活。</p><pre><code class="hljs java">UserMapper:<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser2</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span></span>;</code></pre><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--使用万能的map--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser2&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span>  insert into user (id, name, pwd) values (#&#123;userId&#125;, #&#123;userName&#125;, #&#123;userPwd&#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUse2r</span><span class="hljs-params">()</span></span>&#123;  SqlSession sqlSession = MybatisUtils.getSqlSession();  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);  Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();  map.put(<span class="hljs-string">&quot;userId&quot;</span>, <span class="hljs-number">3</span>);  <span class="hljs-comment">//map.put(&quot;userName&quot;, &quot;likui&quot;);</span>  map.put(<span class="hljs-string">&quot;userPwd&quot;</span>, <span class="hljs-string">&quot;2222&quot;</span>);  userMapper.addUser2(map);  <span class="hljs-comment">//提交事务</span>  sqlSession.commit();  sqlSession.close();&#125;</code></pre><p>测试成功！</p><img src="/images/MyBatis/image-20201112194355751.png" alt="image-20201112194355751" style="zoom:50%;" /><p>map传递参数，直接在sql中取出Key即可；【parameterType=”map”】</p><p>对象传递参数，直接在sql中取出对象的属性即可【parameterType=”Object”】</p><p>只有一个基本类型参数时，可以直接在sql中取出。【parameterType=”int”】                        也可以不写。</p><p><strong>多个参数用Map,或者注解！</strong></p><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><pre><code class="hljs java">UserMapper:<span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserLike</span><span class="hljs-params">(String value)</span></span>;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span>  select * from user where name like #&#123;value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserLike</span><span class="hljs-params">()</span></span>&#123;  SqlSession sqlSession = MybatisUtils.getSqlSession();  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);  List&lt;User&gt; userList = userMapper.getUserLike(<span class="hljs-string">&quot;%zhang%&quot;</span>);  <span class="hljs-keyword">for</span> (User user : userList) &#123;    System.out.println(user.getName());  &#125;  sqlSession.close();&#125;</code></pre><img src="/images/MyBatis/image-20201112200158647.png" alt="image-20201112200158647" style="zoom:50%;" /><p><strong>第二种相比较于第一种会存在SQL注入的危险！</strong></p><p>模糊查询的两种方法：</p><ol><li>java代码执行的时候，传递通配符% %</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span>  select * from user where name like #&#123;value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><ol start="2"><li>在sql拼接中使用通配符</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span>  select * from user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><h2 id="4-配置解析（在这之后才是真正要掌握的）"><a href="#4-配置解析（在这之后才是真正要掌握的）" class="headerlink" title="4. 配置解析（在这之后才是真正要掌握的）"></a>4. 配置解析（在这之后才是真正要掌握的）</h2><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。</p><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#mappers">https://mybatis.org/mybatis-3/zh/configuration.html#mappers</a>)</li></ul><h3 id="4-1-核心配置文件"><a href="#4-1-核心配置文件" class="headerlink" title="4.1 核心配置文件"></a>4.1 核心配置文件</h3><ul><li>mybatis-config.xml</li></ul><p>configuration（配置）</p><ul><li>properties（属性）</li><li>settings（设置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境配置）<ul><li>environment（环境变量）</li><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li><li>databaseIdProvider（数据库厂商标识）</li><li>mappers（映射器）</li></ul><h3 id="4-2-环境配置（environments）"><a href="#4-2-环境配置（environments）" class="headerlink" title="4.2 环境配置（environments）"></a>4.2 环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境。</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--MyBatis的默认环境--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;...&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development2&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;...&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span></code></pre><p><strong>注意一些关键点:</strong></p><ul><li>默认使用的环境 ID（比如：default=”development”）。</li><li>每个 environment 元素定义的环境 ID（比如：id=”development”）。</li><li>事务管理器的配置（比如：type=”JDBC”）。</li><li>数据源的配置（比如：type=”POOLED”）。</li></ul><p>默认环境和环境 ID 顾名思义。 环境可以随意命名，但务必保证默认的环境 ID 要匹配其中一个环境 ID。</p><p>以下了解即可！</p><ol><li><strong>事务管理器（transactionManager）</strong></li></ol><p>在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）</p><ul><li><p>JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。</p></li><li><p>MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。例如:</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;MANAGED&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;closeConnection&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span></code></pre></li></ul><p><strong>注意：如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。</strong></p><ol start="2"><li><strong>数据源（dataSource）</strong></li></ol><p>连接数据库</p><p>dbcp c3p0 druid（阿里的）</p><p>有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：</p><ul><li><strong>UNPOOLED</strong>– 这个数据源的实现会每次请求时打开和关闭连接。</li><li><strong>POOLED</strong>– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。</li><li><strong>JNDI</strong> – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。</li></ul><p><strong>MyBatis默认的事务管理器是JDBC，数据源：POOLED</strong></p><h3 id="4-3-属性（properties）"><a href="#4-3-属性（properties）" class="headerlink" title="4.3 属性（properties）"></a>4.3 属性（properties）</h3><p>可以通过属性（properties）来实现引用配置文件。</p><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。【db.properties】</p><ul><li>编写一个配置文件：db.properties</li></ul><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true</span><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><span class="hljs-attr">password</span>=<span class="hljs-string">645645aa</span></code></pre><p>需要注意一点，在原来的语句中可能使用了&amp;的转义写成了&amp;amp,但是单独定义时不需要，系统会自动进行转义。</p><ul><li>在核心配置文件章引入</li></ul><p><strong>在xml文件中都必须要求顺序！！！</strong></p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入外部配置文件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></code></pre><ol><li>可以直接引入外部文件</li><li>可以在其中增加一些属性配置</li><li>若两个文件中有相同的属性字段，优先使用外部属性文件的！！</li></ol><h3 id="4-4-类型别名（typeAliases）"><a href="#4-4-类型别名（typeAliases）" class="headerlink" title="4.4 类型别名（typeAliases）"></a>4.4 类型别名（typeAliases）</h3><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span>  <span class="hljs-comment">&lt;!--给实体类起别名--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span></code></pre><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。</p><p>比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>；若有注解，则别名为其注解值。</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span>  <span class="hljs-comment">&lt;!--指定包名--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.wen.pojo&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span></code></pre><p>在实体类较少的情况下，使用第一种方式；</p><p>如果实体类十分多，建议使用第二种。第二种也可使用注解。</p><img src="/images/MyBatis/image-20201112210050180.png" alt="image-20201112210050180" style="zoom:50%;" /><p>下面是一些为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格。</p><table><thead><tr><th align="left">别名</th><th align="left">映射的类型</th></tr></thead><tbody><tr><td align="left">_byte</td><td align="left">byte</td></tr><tr><td align="left">_long</td><td align="left">long</td></tr><tr><td align="left">_short</td><td align="left">short</td></tr><tr><td align="left">_int</td><td align="left">int</td></tr><tr><td align="left">_integer</td><td align="left">int</td></tr><tr><td align="left">_double</td><td align="left">double</td></tr><tr><td align="left">_float</td><td align="left">float</td></tr><tr><td align="left">_boolean</td><td align="left">boolean</td></tr><tr><td align="left">string</td><td align="left">String</td></tr><tr><td align="left">byte</td><td align="left">Byte</td></tr><tr><td align="left">long</td><td align="left">Long</td></tr><tr><td align="left">short</td><td align="left">Short</td></tr><tr><td align="left">int</td><td align="left">Integer</td></tr><tr><td align="left">integer</td><td align="left">Integer</td></tr><tr><td align="left">double</td><td align="left">Double</td></tr><tr><td align="left">float</td><td align="left">Float</td></tr><tr><td align="left">boolean</td><td align="left">Boolean</td></tr><tr><td align="left">date</td><td align="left">Date</td></tr><tr><td align="left">decimal</td><td align="left">BigDecimal</td></tr><tr><td align="left">bigdecimal</td><td align="left">BigDecimal</td></tr><tr><td align="left">object</td><td align="left">Object</td></tr><tr><td align="left">map</td><td align="left">Map</td></tr><tr><td align="left">hashmap</td><td align="left">HashMap</td></tr><tr><td align="left">list</td><td align="left">List</td></tr><tr><td align="left">arraylist</td><td align="left">ArrayList</td></tr><tr><td align="left">collection</td><td align="left">Collection</td></tr><tr><td align="left">iterator</td><td align="left">Iterator</td></tr></tbody></table><h3 id="4-4-设置（settings）"><a href="#4-4-设置（settings）" class="headerlink" title="4.4 设置（settings）"></a>4.4 设置（settings）</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</p><ul><li>mapUnderscoreToCamelCase</li></ul><p>是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。 例如：last_name-&gt;lastName</p><ul><li>logImpl</li></ul><p>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</p><p> SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING  日志实现</p><ul><li>cacheEnabled  缓存</li></ul><p>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</p><ul><li><p>lazyLoadingEnabled  懒加载</p><p>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</p></li></ul><h3 id="4-5-其他配置"><a href="#4-5-其他配置" class="headerlink" title="4.5 其他配置"></a>4.5 其他配置</h3><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins">plugins（插件）</a><ul><li>MyBatis-Plus</li><li>MyBatis-generator-core</li><li>通用mapper</li></ul></li></ul><h3 id="4-6-映射器（mappers）"><a href="#4-6-映射器（mappers）" class="headerlink" title="4.6 映射器（mappers）"></a>4.6 映射器（mappers）</h3><p>MapperRegistry注册绑定接口文件。</p><img src="/images/MyBatis/image-20201112211421136.png" alt="image-20201112211421136" style="zoom:50%;" /><p>方式一：</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/wen/dao/UserMapper.xml&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></code></pre><p>方式二：使用Class文件绑定注册</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.dao.UserMapper&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></code></pre><p>注意：</p><ul><li>接口和Mapper配置文件必须同名</li><li>接口和Mapper配置文件必须在一个包下</li></ul><p>方式三：使用扫描包进行注入绑定</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">package</span>=<span class="hljs-string">&quot;com.wen.dao&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></code></pre><p>注意：</p><ul><li>接口和Mapper配置文件必须同名</li><li>接口和Mapper配置文件必须在一个包下</li></ul><h3 id="4-7-生命周期和作用域"><a href="#4-7-生命周期和作用域" class="headerlink" title="4.7 生命周期和作用域"></a>4.7 生命周期和作用域</h3><p>不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><p><img src="/images/MyBatis/image-20201112220538765.png" alt="image-20201112220538765"></p><p>SqlSessionFactoryBuilder：</p><ul><li>一旦创建了SqlSessionFactory，就不再需要它了。</li><li>局部变量</li></ul><p>SqlSessionFactory：</p><ul><li>可以想象为：数据库连接池</li><li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。</li><li>SqlSessionFactory 的最佳作用域是应用作用域。</li><li>最简单的就是使用单例模式或者静态单例模式。</li></ul><p>SqlSession：</p><ul><li>每个线程都应该有它自己的 SqlSession 实例。</li><li>连接到连接池的一个请求！</li><li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。（放到方法中）</li><li>用完之后需要赶紧关闭，否则资源被占用</li></ul><p><img src="/images/MyBatis/image-20201112232726419.png" alt="image-20201112232726419"></p><p>这里的每一个Mapper，就代表一个业务。</p><h2 id="5-解决属性名和字段名不一致的问题"><a href="#5-解决属性名和字段名不一致的问题" class="headerlink" title="5. 解决属性名和字段名不一致的问题"></a>5. 解决属性名和字段名不一致的问题</h2><h3 id="5-1-问题"><a href="#5-1-问题" class="headerlink" title="5.1 问题"></a>5.1 问题</h3><p>数据库中的字段：</p><img src="/images/MyBatis/image-20201112233017699.png" alt="image-20201112233017699" style="zoom:50%;" /><p>新建一个项目，拷贝之前的，测试实体类字段不一致的情况。</p><p>修改字段pwd-&gt;password</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;  <span class="hljs-keyword">private</span> String name;  <span class="hljs-keyword">private</span> String password;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-comment">//1. 获取SqlSession对象</span>  SqlSession sqlSession = MybatisUtils.getSqlSession();  <span class="hljs-comment">//2. 执行</span>  <span class="hljs-comment">//方式一：getMapper</span>  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);  User user = userMapper.getUserById(<span class="hljs-number">2</span>);  System.out.println(user.getName()+<span class="hljs-string">&quot;: &quot;</span> + user.getId() + <span class="hljs-string">&quot;: &quot;</span> + user.getPassword());  <span class="hljs-comment">//关闭sqlSession</span>  sqlSession.close();&#125;</code></pre><p>发现password字段为空：测试出现问题</p><img src="/images/MyBatis/image-20201113071345521.png" alt="image-20201113071345521" style="zoom:50%;" /><pre><code class="hljs java">select * from user where id = #&#123;id&#125;<span class="hljs-comment">//类型处理器</span>select id,name,pwd from user where id = #&#123;id&#125;</code></pre><p>解决方法：方法一</p><pre><code class="hljs java">select id,name,password from user where id = #&#123;id&#125;<span class="hljs-comment">//起别名就可</span></code></pre><h3 id="5-2-resultMap"><a href="#5-2-resultMap" class="headerlink" title="5.2 resultMap"></a>5.2 resultMap</h3><p>resultMap：结果集映射</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--结果集映射--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--column:数据库中的字段，property：实体类的中的属性--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span>  select * from user where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><ul><li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。</li><li>ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</li><li><code>ResultMap</code> 的优秀之处——你完全可以不用显式地配置它们。**(只需要配置不同的字段即可)**</li></ul><p><strong>使用方法：</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_name&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;hashed_password&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></code></pre><p>然后在引用它的语句中设置 <code>resultMap</code> 属性就行了（注意我们去掉了 <code>resultType</code> 属性）。比如:</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUsers&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userResultMap&quot;</span>&gt;</span>  select user_id, user_name, hashed_password  from some_table  where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><p>如果世界就这么简单就好了！！<img src="/images/MyBatis/image-20201113073217197.png" alt="image-20201113073217197"></p><h2 id="6-日志"><a href="#6-日志" class="headerlink" title="6. 日志"></a>6. 日志</h2><h3 id="6-1-日志工厂"><a href="#6-1-日志工厂" class="headerlink" title="6.1 日志工厂"></a>6.1 日志工厂</h3><p>如果一个数据库操作出现异常，我们需要排错，日志就是最好的助手。</p><p>曾经：sout debug</p><p>现在：日志工厂</p><p>logImpl</p><p>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</p><ul><li> SLF4J </li><li>LOG4J 【掌握】</li><li>LOG4J2 </li><li>JDK_LOGGING </li><li>COMMONS_LOGGING </li><li>STDOUT_LOGGING 【掌握】</li><li>NO_LOGGING </li></ul><p>在MyBatis中具体使用哪一个日志实现，在设置中设定。</p><p><strong>STDOUT_LOGGING：标准日志输出</strong></p><p>在MyBatis核心配置文件中，配置我们的日志！</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span></code></pre><img src="/images/MyBatis/image-20201113075212076.png" alt="image-20201113075212076" style="zoom:50%;" /><h3 id="6-2-LOG4J"><a href="#6-2-LOG4J" class="headerlink" title="6.2 LOG4J"></a><strong>6.2 LOG4J</strong></h3><ul><li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件。</li><li>我们可以控制每一条日志的输出格式</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li><li>通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li></ul><ol><li>需要导包</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><ol start="2"><li>log4j.properties</li></ol><pre><code class="hljs properties"><span class="hljs-comment">### 配置根 目的地###</span><span class="hljs-meta">log4j.rootLogger</span> = <span class="hljs-string">debug,console,fileAppender</span><span class="hljs-comment">### 日志输出级别 ###</span><span class="hljs-meta">log4j.logger.org.mybatis</span>=<span class="hljs-string">debug</span><span class="hljs-meta">log4j.logger.java.sql</span>=<span class="hljs-string">debug</span><span class="hljs-meta">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">debug</span><span class="hljs-meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">debug</span><span class="hljs-meta">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">debug</span><span class="hljs-comment">### 配置输出到控制台 ###</span><span class="hljs-meta">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><span class="hljs-meta">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><span class="hljs-meta">log4j.appender.console.Threshold</span> = <span class="hljs-string">debug</span><span class="hljs-meta">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><span class="hljs-meta">log4j.appender.console.layout.ConversionPattern</span> =  <span class="hljs-string">%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span><span class="hljs-comment">### 配置输出到文件 ###</span><span class="hljs-meta">log4j.appender.fileAppender</span> = <span class="hljs-string">org.apache.log4j.FileAppender</span><span class="hljs-meta">log4j.appender.fileAppender.File</span> = <span class="hljs-string">logs/log.log</span><span class="hljs-meta">log4j.appender.fileAppender.Append</span> = <span class="hljs-string">true</span><span class="hljs-meta">log4j.appender.fileAppender.Threshold</span> = <span class="hljs-string">DEBUG</span><span class="hljs-meta">log4j.appender.fileAppender.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><span class="hljs-meta">log4j.appender.fileAppender.layout.ConversionPattern</span> = <span class="hljs-string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;[%t:%r]-[%p]%m%n</span><span class="hljs-comment">### 配置输出到文件，并且每天都创建一个文件 ###</span><span class="hljs-meta">log4j.appender.dailyRollingFile</span> = <span class="hljs-string">org.apache.log4j.DailyRollingFileAppender</span><span class="hljs-meta">log4j.appender.dailyRollingFile.File</span> = <span class="hljs-string">logs/log.log</span><span class="hljs-meta">log4j.appender.dailyRollingFile.Append</span> = <span class="hljs-string">true</span><span class="hljs-meta">log4j.appender.dailyRollingFile.Threshold</span> = <span class="hljs-string">DEBUG</span><span class="hljs-meta">log4j.appender.dailyRollingFile.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><span class="hljs-meta">log4j.appender.dailyRollingFile.layout.ConversionPattern</span> = <span class="hljs-string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n### 配置输出到文件，且大小到达指定尺寸的时候产生一个新的文件 ###log4j.appender.ROLLING_FILE=org.apache.log4j.RollingFileAppender log4j.appender.ROLLING_FILE.Threshold=ERROR log4j.appender.ROLLING_FILE.File=rolling.log log4j.appender.ROLLING_FILE.Append=true log4j.appender.ROLLING_FILE.MaxFileSize=10KB log4j.appender.ROLLING_FILE.MaxBackupIndex=1 log4j.appender.ROLLING_FILE.layout=org.apache.log4j.PatternLayout log4j.appender.ROLLING_FILE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n</span></code></pre><ol start="3"><li>配置log4j为日志实现</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LOG4J&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span></code></pre><ol start="4"><li>log4j的使用！直接测试运行刚才的查询</li></ol><img src="/images/MyBatis/image-20201113081623597.png" alt="image-20201113081623597" style="zoom:50%;" /><p><strong>简单使用</strong></p><ol><li>在要使用log4j的类中，导入包import org.apache.log4j.Logger;</li><li>日志对象，参数为当前类的class </li></ol><pre><code class="hljs java"><span class="hljs-keyword">static</span> Logger logger = Logger.getLogger(UserMapperTest.class);</code></pre><ol start="3"><li>测试方法</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLog4j</span><span class="hljs-params">()</span></span>&#123;  logger.info(<span class="hljs-string">&quot;info:进入了testLog4j&quot;</span>);  logger.debug(<span class="hljs-string">&quot;debug:进入了testLog4j&quot;</span>);  logger.error(<span class="hljs-string">&quot;error:进入了testLog4j&quot;</span>);&#125;</code></pre><p>之后如果想打印一些信息，之前会经常用System.out.println()，现在可以直接用logger.info()、logger.error()、logger.debug()来进行输出。</p><ol start="4"><li>日志级别</li></ol><pre><code class="hljs java">logger.info(<span class="hljs-string">&quot;info:进入了testLog4j&quot;</span>);logger.debug(<span class="hljs-string">&quot;debug:进入了testLog4j&quot;</span>);logger.error(<span class="hljs-string">&quot;error:进入了testLog4j&quot;</span>);</code></pre><p><strong>log日志文件打不开？！</strong></p><img src="/images/MyBatis/image-20201113082531661.png" alt="image-20201113082531661" style="zoom:50%;" /><p>解决方法：</p><p><strong>方案一：</strong></p><p>mybatis核心配置文件中不要使用或中使用package来指定要扫描的包！！</p><p>原因：使用package指定要扫描的包，会产生乱码，生成的log文件，IDEA打不开。</p><img src="/images/MyBatis/image-20201113082831359.png" alt="image-20201113082831359" style="zoom:50%;" /><p>删除扫描包配置之后</p><img src="/images/MyBatis/image-20201113082716048.png" alt="image-20201113082716048" style="zoom:50%;" /><p><strong>方案二：</strong></p><img src="/images/MyBatis/image-20201113083027304.png" alt="image-20201113083027304" style="zoom:50%;" /><img src="/images/MyBatis/image-20201113083402249.png" alt="image-20201113083402249" style="zoom:50%;" /><p>这时可以查看文件了！（虽然存在乱码，依然可以打开查看）</p><img src="/images/MyBatis/image-20201113083435007.png" alt="image-20201113083435007" style="zoom:50%;" /><h2 id="7-分页"><a href="#7-分页" class="headerlink" title="7. 分页"></a>7. 分页</h2><p><strong>为什么需要分页？</strong></p><img src="/images/MyBatis/image-20201113084732912.png" alt="image-20201113084732912" style="zoom: 25%;" /><ul><li>减少数据的处理量</li></ul><h3 id="7-1-利用Limit分页"><a href="#7-1-利用Limit分页" class="headerlink" title="7.1 利用Limit分页"></a><strong>7.1 利用Limit分页</strong></h3><p>select * from user limit 0,2;  从0开始，分两个</p><p>select * from user limit 2；从0开始，长度为2</p><p>使用MyBatis实现分页，核心是SQL</p><ol><li>接口</li></ol><pre><code class="hljs java">UserMapper.java  <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserByLimit</span><span class="hljs-params">(Map&lt;String,Integer&gt; map)</span></span>;</code></pre><ol start="2"><li>Mapper</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--分页--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLimit&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span>  select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><ol start="3"><li>测试</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLimit</span><span class="hljs-params">()</span></span>&#123;  SqlSession sqlSession = MybatisUtils.getSqlSession();  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);  Map&lt;String,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();  map.put(<span class="hljs-string">&quot;startIndex&quot;</span>,<span class="hljs-number">0</span>);  map.put(<span class="hljs-string">&quot;pageSize&quot;</span>,<span class="hljs-number">2</span>);  List&lt;User&gt; userByLimit = userMapper.getUserByLimit(map);  <span class="hljs-keyword">for</span> (User user : userByLimit) &#123;    System.out.println(user.getName()+<span class="hljs-string">&quot;: &quot;</span> + user.getPassword());  &#125;  sqlSession.close();&#125;</code></pre><img src="/images/MyBatis/image-20201113092408125.png" alt="image-20201113092408125" style="zoom:50%;" /><h3 id="7-2-RowBounds分页"><a href="#7-2-RowBounds分页" class="headerlink" title="7.2 RowBounds分页"></a>7.2 RowBounds分页</h3><p>不建议开发使用！那就简单写写，科普一下！<img src="/images/MyBatis/image-20201113092625610.png" alt="image-20201113092625610"></p><p>RowBounds：不使用SQL实现，在Java层面实现！</p><ol><li>接口</li></ol><pre><code class="hljs java"><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserByRowBounds</span><span class="hljs-params">()</span></span>;</code></pre><ol start="2"><li>Mapper.xml</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    RowBounds--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByRowBounds&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span>  select * from user<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><ol start="3"><li>测试类</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testRowBounds</span><span class="hljs-params">()</span></span>&#123;  SqlSession sqlSession = MybatisUtils.getSqlSession();  <span class="hljs-comment">//RowBounds实现</span>  RowBounds rowBounds = <span class="hljs-keyword">new</span> RowBounds(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);  <span class="hljs-comment">//通过java代码层面实现分页</span>  List&lt;User&gt; userList = sqlSession.selectList(<span class="hljs-string">&quot;com.wen.dao.UserMapper.getUserByRowBounds&quot;</span>,<span class="hljs-keyword">null</span>,rowBounds);  <span class="hljs-keyword">for</span> (User user : userList) &#123;    System.out.println(user.getName() + <span class="hljs-string">&quot;: &quot;</span> + user.getPassword());  &#125;  sqlSession.close();&#125;</code></pre><img src="/images/MyBatis/image-20201113093633848.png" alt="image-20201113093633848" style="zoom:50%;" /><h3 id="7-3-分页插件"><a href="#7-3-分页插件" class="headerlink" title="7.3 分页插件"></a>7.3 分页插件</h3><img src="/images/MyBatis/image-20201113093918975.png" alt="image-20201113093918975" style="zoom:50%;" /><p>了解即可，万一之后用到可以使用！<img src="/images/MyBatis/image-20201113094152149.png" alt="image-20201113094152149"></p><h2 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8. 使用注解开发"></a>8. 使用注解开发</h2><p>除了MyBatis一般都会使用注解开发！<img src="/images/MyBatis/image-20201113094325233.png" alt="image-20201113094325233"></p><h3 id="8-1-面向接口编程"><a href="#8-1-面向接口编程" class="headerlink" title="8.1 面向接口编程"></a>8.1 面向接口编程</h3><p>我们都学过面向对象编程，也学习过接口，但是在真正的开发中，很多时候我们会选择面向对象编程。</p><p><strong>根本原因：==解耦==、可扩展、提高复用，分层开发中，上层不用管具体的实现，大家都遵守共同的标准，使得开发变得容易，规范性更好。</strong></p><p>关于接口的理解：</p><ul><li><p>接口从更深层次的理解，应是定义（规范、约束）与实现（名实分离的原则）的分离</p></li><li><p>接口的本身反应了系统人员对系统的抽象理解。</p></li><li><p>接口有两类</p><p>-第一类：对一个个体的抽象，它可对应一个抽象体（abstract class）</p><p>-第二类：对一个个体某方面的抽象，即形成一个抽象面（interface）</p></li><li><p>一个个体可能有多个抽象面。抽象体和抽象面是有区别的。</p></li></ul><p>三个面向的区别：</p><ul><li>面向对象：我们考虑问题时，以对象为单位，考虑它的属性和方法。</li><li>面向过程：我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现。</li><li>接口设计与非接口设计是针对复用技术而言的，与面向对象（/过程）不是一个问题，更多的体现是对系统整体的架构。</li></ul><h3 id="8-2-使用注解开发"><a href="#8-2-使用注解开发" class="headerlink" title="8.2 使用注解开发"></a>8.2 使用注解开发</h3><ol><li>在核心配置文件绑定接口</li></ol><pre><code class="hljs java">mybatis-config.xml&lt;!--绑定接口--&gt;&lt;mappers&gt;  &lt;mapper <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.wen.dao.UserMapper&quot;</span>/&gt;&lt;/mappers&gt;</code></pre><ol start="2"><li>注解在接口上实现</li></ol><pre><code class="hljs java">UserMapper.java  <span class="hljs-meta">@Select(&quot;select id,name,pwd as password from user&quot;)</span>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUsers</span><span class="hljs-params">()</span></span>;</code></pre><p>一旦字段改变，注解的方式就显得非常的麻烦。当sql语句更复杂的时候，也不太好用。</p><p>本质：反射机制实现</p><p>底层：动态代理</p><h4 id="MyBatis详细流程"><a href="#MyBatis详细流程" class="headerlink" title="MyBatis详细流程"></a><strong>MyBatis详细流程</strong></h4><img src="/images/MyBatis/image-20201113110717482.png" alt="image-20201113110717482" style="zoom:50%;" /><p>Bravo！！<img src="/images/MyBatis/image-20201113110753787.png" alt="image-20201113110753787"></p><h3 id="8-3-CRUD"><a href="#8-3-CRUD" class="headerlink" title="8.3 CRUD"></a>8.3 CRUD</h3><p><strong>自动提交事务</strong></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(<span class="hljs-keyword">true</span>);&#125;</code></pre><p>多个参数可以用@Param(“”)注解，但必须是基本类型。</p><pre><code class="hljs java"><span class="hljs-comment">//方法存在多个参数，所有的参数前面必须加上@Param注解</span>    <span class="hljs-meta">@Select(&quot;select * from where id = #&#123;id&#125; and name = #&#123;name&#125;&quot;)</span>    <span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id, <span class="hljs-meta">@Param(&quot;name&quot;)</span> String name)</span></span>;</code></pre><img src="/images/MyBatis/image-20201113121441254.png" alt="image-20201113121441254" style="zoom:50%;" /><p><strong>id是从注解中的名称获取的！！</strong></p><p><strong>增加：</strong></p><pre><code class="hljs java"><span class="hljs-meta">@Insert(&quot;insert into user(id, name, pwd) values(#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;)&quot;)</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;</code></pre><pre><code class="hljs java">MyBatisUtils.java:<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(<span class="hljs-keyword">true</span>);&#125;<span class="hljs-comment">//true:代表自动提交事务</span></code></pre><p><strong>查找：</strong></p><pre><code class="hljs java">UserMapper.java:<span class="hljs-comment">//方法存在多个参数，所有的参数前面必须加上@Param注解</span><span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;id&#125; and name = #&#123;name&#125;&quot;)</span><span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id2, <span class="hljs-meta">@Param(&quot;name&quot;)</span> String name)</span></span>;Test:<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-comment">//1. 获取SqlSession对象</span>  SqlSession sqlSession = MybatisUtils.getSqlSession();  <span class="hljs-comment">//2. 执行</span>  <span class="hljs-comment">//方式一：getMapper</span>  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);  User user = userMapper.getUserById(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;5555&quot;</span>);  System.out.println(user.getName());  <span class="hljs-comment">//关闭sqlSession</span>  sqlSession.close();&#125;</code></pre><p><strong>修改：</strong></p><pre><code class="hljs java">UserMapper.java:<span class="hljs-meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id=#&#123;id&#125;&quot;)</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-comment">//1. 获取SqlSession对象</span>  SqlSession sqlSession = MybatisUtils.getSqlSession();  <span class="hljs-comment">//2. 执行</span>  <span class="hljs-comment">//方式一：getMapper</span>  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);  userMapper.updateUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;777&quot;</span>, <span class="hljs-string">&quot;777&quot;</span>));  <span class="hljs-comment">//关闭sqlSession</span>  sqlSession.close();&#125;</code></pre><p><strong>删除：</strong></p><pre><code class="hljs java">UserMapper.java:<span class="hljs-meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-comment">//1. 获取SqlSession对象</span>  SqlSession sqlSession = MybatisUtils.getSqlSession();  <span class="hljs-comment">//2. 执行</span>  <span class="hljs-comment">//方式一：getMapper</span>  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);  userMapper.deleteUser(<span class="hljs-number">2</span>);  <span class="hljs-comment">//关闭sqlSession</span>  sqlSession.close();&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select id,name,pwd as password from user&quot;)</span><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUsers</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//方法存在多个参数，所有的参数前面必须加上@Param注解</span><span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;id&#125; and name = #&#123;name&#125;&quot;)</span><span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id2, <span class="hljs-meta">@Param(&quot;name&quot;)</span> String name)</span></span>;<span class="hljs-meta">@Insert(&quot;insert into user(id, name, pwd) values(#&#123;id&#125;, #&#123;name&#125;, #&#123;password&#125;)&quot;)</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<span class="hljs-meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id=#&#123;id&#125;&quot;)</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<span class="hljs-meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;</code></pre><p><strong>关于@Param()注解</strong></p><ul><li>基本类型的参数或者String类型，需要加上。</li><li>引用类型不需要加。</li><li>如果只有一个参数，可以忽略，但是建议加上。</li><li>我们在SQL中引用的就是我们这里的@Param()中设定的属性名。</li></ul><p><strong>关于${}和#{}的区别</strong></p><ul><li>#{}能够很大程度上防止sql注入，而${}无法防止sql注入。</li><li>能用#{}尽量使用#{}</li></ul><h2 id="9-Lombok"><a href="#9-Lombok" class="headerlink" title="9. Lombok"></a>9. Lombok</h2><p>第三方工具</p><p>Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.</p><p>Never write another getter or equals method again, with one <strong>annotation</strong> your class has a fully featured builder, Automate your logging variables, and much more.</p><p>Lombok 是一种 Java™ 实用工具，可用来帮助开发人员消除 Java 的冗长，尤其是对于简单的 Java 对象（POJO）。它通过注解实现这一目的。</p><ol><li><p>在IDEA中安装Lombok插件</p></li><li><p>引入Lombok依赖</p><hr><dependency>    <groupId>org.projectlombok</groupId>    <artifactId>lombok</artifactId>    <version>1.18.12</version>    <scope>provided</scope></dependency><hr></li></ol><ol start="3"><li>在实体类上加注解即可</li></ol><p><strong>常用的注解：</strong></p><ul><li>@Getter and @Getter</li><li>@ToString</li><li>@EqualsAndHashCode</li><li>@AllArgsConstructor</li><li>@NoArgsConstructor</li><li>@Data</li><li>@Accessors</li></ul><hr><p>@Data等价于上面的@Setter、@Getter、@RequiredArgsConstructor、@ToString、@EqualsAndHashCode</p><hr><img src="/images/MyBatis/image-20201113193152340.png" alt="image-20201113193152340" style="zoom:50%;" /><p>优点：</p><ul><li>提高开发效率</li><li>代码简洁</li></ul><p>缺点：</p><ul><li>不支持多种参数构造器的重载。</li><li>虽然省去了手动创建getter/setter方法的麻烦，但是大大降低了源代码的可读性和完整性，降低了阅读源代码的舒适度。</li></ul><h2 id="10-复杂查询"><a href="#10-复杂查询" class="headerlink" title="10. 复杂查询"></a>10. 复杂查询</h2><ul><li>多对一：关联</li><li>一对多：集合</li></ul><h3 id="10-1-多对一处理"><a href="#10-1-多对一处理" class="headerlink" title="10.1 多对一处理"></a>10.1 多对一处理</h3><img src="/images/MyBatis/image-20201113201018723.png" alt="image-20201113201018723" style="zoom:50%;" /><img src="/images/MyBatis/image-20201113201147828.png" alt="image-20201113201147828" style="zoom:50%;" /><p><img src="/images/MyBatis/image-20201113201222165.png" alt="image-20201113201222165"></p><p>注意：</p><p>创建相同的目录结构</p><img src="/images/MyBatis/image-20201113203832658.png" alt="image-20201113203832658" style="zoom:50%;" /><p>java目录下：使用com.wen.dao创建，而resources下使用com/wen/dao创建。</p><img src="/images/MyBatis/image-20201113203920130.png" alt="image-20201113203920130" style="zoom:50%;" /><p>创建测试环境：</p><ul><li>核心配置文件mybatis-config.xml和MyBatisUtils工具类</li><li>创建表 student teacher</li><li>创建实体类 Student Teacher</li><li><strong>编写Dao、Mapper</strong>  嵌套处理</li></ul><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentMapper</span> </span>&#123;    <span class="hljs-comment">//查询所有的学生，以及老师的信息（涉及多表查询）</span>    <span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">getStudents</span><span class="hljs-params">()</span></span>;    <span class="hljs-function">Student <span class="hljs-title">getStudentById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;sid&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudents&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;Student_Teacher&quot;</span>&gt;</span>  select * from student<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Student_Teacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">            复杂的属性:我们需要单独处理</span><span class="hljs-comment">            association ： 对象</span><span class="hljs-comment">            collection ： 集合</span><span class="hljs-comment">        --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacher&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span>  select * from teacher where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-comment">&lt;!--上面的语句改成id=#&#123;tid&#125;也一样，好像不影响传值--&gt;</span></code></pre><ul><li>测试</li></ul><img src="/images/MyBatis/image-20201113210441811.png" alt="image-20201113210441811" style="zoom:50%;" /><h4 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h4><p>类似：子查询</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudents&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;Student_Teacher&quot;</span>&gt;</span>  select * from student<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Student_Teacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">            复杂的属性:我们需要单独处理</span><span class="hljs-comment">            association ： 对象</span><span class="hljs-comment">            collection ： 集合</span><span class="hljs-comment">        --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacher&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span>  select * from teacher where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-comment">&lt;!--上面的语句改成id=#&#123;tid&#125;也一样，好像不影响传值--&gt;</span></code></pre><img src="/images/MyBatis/image-20201113212309019.png" alt="image-20201113212309019" style="zoom:50%;" /><p><strong>下面的虽然可以替换成别的，但是最好和上面的保持一致！！<img src="/images/MyBatis/image-20201113212424872.png" alt="image-20201113212424872"></strong></p><h4 id="按照结果查询处理"><a href="#按照结果查询处理" class="headerlink" title="按照结果查询处理"></a>按照结果查询处理</h4><p>类似：连表查询</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--按照结果嵌套处理--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudents2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;Student_Teacher2&quot;</span>&gt;</span>  select student.id sid,student.name sname,teacher.name tname  from student,teacher  where student.tid = teacher.id<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Student_Teacher2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></code></pre><img src="/images/MyBatis/image-20201113212534960.png" alt="image-20201113212534960" style="zoom:50%;" /><h3 id="10-2-一对多处理"><a href="#10-2-一对多处理" class="headerlink" title="10.2 一对多处理"></a>10.2 一对多处理</h3><img src="/images/MyBatis/image-20201113212823953.png" alt="image-20201113212823953" style="zoom:50%;" /><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-comment">//一对多</span>    <span class="hljs-keyword">private</span> List&lt;Student&gt; students;&#125;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tid;&#125;</code></pre><pre><code class="hljs java">TeacherMapper.java<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TeacherMapper</span> </span>&#123;    <span class="hljs-comment">//获取一个指定老师下的所有学生及老师的信息</span>    <span class="hljs-function">Teacher <span class="hljs-title">getTeacher</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tid&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;Teacher_Student&quot;</span>&gt;</span>  select student.id sid, student.name sname, teacher.name tname, teacher.id tid  from student,teacher  where student.tid = teacher.id<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Teacher_Student&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--集合中的泛型信息，我们使用ofType--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;studentList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></code></pre><img src="/images/MyBatis/image-20201113222454568.png" alt="image-20201113222454568" style="zoom:50%;" /><p>//按照查询嵌套处理就不编码了，太麻烦了！！<img src="/images/MyBatis/image-20201113222953722.png" alt="image-20201113222953722"></p><h3 id="10-3-小结"><a href="#10-3-小结" class="headerlink" title="10.3 小结"></a>10.3 小结</h3><ol><li>关联 - association  【多对一】</li><li>集合 - collection 【一对多】</li><li>javaType  &amp;&amp; ofType<ol><li>javaType用来指定实体类中的属性的类型</li><li>ofType 用来指定映射到List或者集合中的pojo类型，泛型中约束类型！</li></ol></li></ol><p><strong>注意点：</strong></p><ul><li>保证SQL的可读性，通俗易懂</li><li>注意一对多、多对一中，属性名和字段的问题</li><li>如果问题不好排查错误，可以使用日志，建议使用Log4j</li></ul><p><strong>面试高频：</strong></p><ul><li>MySql引擎</li><li>InnoDB底层原理</li><li>索引</li><li>索引优化</li></ul><h2 id="11-动态SQL"><a href="#11-动态SQL" class="headerlink" title="11. 动态SQL"></a>11. 动态SQL</h2><p><strong>动态SQL：根据不同的条件生成不同的SQL语句。</strong></p><p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</p><p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach（最痛苦）</li></ul><h3 id="11-1-环境搭建"><a href="#11-1-环境搭建" class="headerlink" title="11.1 环境搭建"></a>11.1 环境搭建</h3><p><strong>创建blog表</strong></p><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> blog(    <span class="hljs-keyword">id</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;博客id&#x27;</span>,    title <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;博客标题&#x27;</span>,    author <span class="hljs-built_in">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;博客作者&#x27;</span>,    create_time datetime <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;创建时间&#x27;</span>,    views <span class="hljs-built_in">int</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;浏览量&#x27;</span>)<span class="hljs-keyword">engine</span> = <span class="hljs-keyword">innodb</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">charset</span> = utf8</code></pre><p>创建一个基础工程</p><ol><li>导包</li><li>编写配置文件</li><li>编写实体类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Blog</span> </span>&#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String title;    <span class="hljs-keyword">private</span> String author;    <span class="hljs-keyword">private</span> Date createTime;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> views;&#125;</code></pre><ol start="4"><li>编写实体类对应的接口及Mapper文件</li></ol><h3 id="11-2-if语句"><a href="#11-2-if语句" class="headerlink" title="11.2 if语句"></a>11.2 if语句</h3><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment">* 如果map中传递的是title，则查找出所有title的书籍</span><span class="hljs-comment">* 如果传递的是author，则查找出所有author的书籍</span><span class="hljs-comment">* 否则查找所有书籍*/</span><span class="hljs-function">List&lt;Blog&gt; <span class="hljs-title">queryBlogIF</span><span class="hljs-params">(Map map)</span></span>;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.Blog&quot;</span>&gt;</span>  select * from blog  <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span>      title = #&#123;title&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span>      and author = #&#123;author&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span></code></pre><p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p><p>说白了，<em>where</em>可以智能化保证<em>sql</em>语句的正确！！<img src="/images/MyBatis/image-20201114084842350.png" alt="image-20201114084842350" style="zoom:50%;" /></p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;    SqlSession sqlSession = MybatisUtils.getSqlSession();    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);    HashMap map = <span class="hljs-keyword">new</span> HashMap();    map.put(<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;遇见狂神说&quot;</span>);    List&lt;Blog&gt; blogs = mapper.queryBlogIF(map);    <span class="hljs-keyword">for</span> (Blog blog : blogs) &#123;        System.out.println(blog.getTitle());    &#125;    sqlSession.close();&#125;</code></pre><h3 id="11-3-常用标签"><a href="#11-3-常用标签" class="headerlink" title="11.3 常用标签"></a>11.3 常用标签</h3><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，<em>MyBatis</em> 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p><h4 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose  when otherwise"></a><strong><em>choose  when otherwise</em></strong></h4><pre><code class="hljs xml">    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">    按顺序执行第一个符合的条件</span><span class="hljs-comment">    --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.Blog&quot;</span>&gt;</span>  select * from blog  <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span>        title = #&#123;title&#125;      <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span>        and author = #&#123;author&#125;/*这个and不加好像也可以，但是最好规范写代码，加上and最好*/      <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span>        and views &gt; #&#123;views&#125;      <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><h4 id="set"><a href="#set" class="headerlink" title="set"></a><strong><em>set</em></strong></h4><p><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBlogSet&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span>  update mybatis.blog  <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span> title = #&#123;title&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span> author = #&#123;author&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span>  where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></code></pre><p><strong>第一句中的if 逗号,必须加上，否则会报错！！</strong></p><img src="/images/MyBatis/image-20201114090943589.png" alt="image-20201114090943589" style="zoom:50%;" /><p><strong>上述情况会报错！因为update是不能没有set语句的！！</strong></p><p>所谓的动态SQL，本质还是SQL语句，只是我们可以在SQL层面去执行一个逻辑代码。</p><p><em>if where set choose otherwise when</em></p><h3 id="11-4-SQL片段-复用"><a href="#11-4-SQL片段-复用" class="headerlink" title="11.4 SQL片段-复用"></a>11.4 SQL片段-复用</h3><p>有的时候，我们可能会将一些公共的部分抽取出来，方便复用！</p><img src="/images/MyBatis/image-20201114102501988.png" alt="image-20201114102501988" style="zoom:50%;" /><img src="/images/MyBatis/image-20201114102529314.png" alt="image-20201114102529314" style="zoom:50%;" /><ul><li>使用sql标签抽取公共部分</li><li>在需要的地方使用include标签引入</li></ul><p>注意：</p><ul><li>最好基于单表来定义sql片段</li><li>不要存在where标签</li></ul><h3 id="11-5-foreach语句"><a href="#11-5-foreach语句" class="headerlink" title="11.5 foreach语句"></a>11.5 foreach语句</h3><p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）</p><img src="/images/MyBatis/image-20201114102950034.png" alt="image-20201114102950034" style="zoom:50%;" /><p>e.g.(源于拉丁文，是for example的简写)</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--我们传递一个map,map中可以存在一个集合</span><span class="hljs-comment">        select * from blog where (id=1 or id=2)</span><span class="hljs-comment">    --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBogForEach&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.Blog&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span>  select * from mybatis.blog  <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span>      id = #&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><p>测试：</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;  SqlSession sqlSession = MybatisUtils.getSqlSession();  BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);  HashMap map = <span class="hljs-keyword">new</span> HashMap();  ArrayList&lt;String&gt; ids = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();  ids.add(<span class="hljs-string">&quot;1&quot;</span>);  ids.add(<span class="hljs-string">&quot;2&quot;</span>);  map.put(<span class="hljs-string">&quot;ids&quot;</span>, ids);  List&lt;Blog&gt; blogs = mapper.queryBogForEach(map);  <span class="hljs-keyword">for</span> (Blog blog : blogs) &#123;    System.out.println(blog.getTitle());  &#125;  sqlSession.close();&#125;</code></pre><p>==动态SQL就是在拼接SQL语句，我们只需要保证SQL的正确性，按照SQL的格式，去排列组合就可以了！==</p><p>建议：</p><ul><li>先在mysql中写出完整的SQL，测试成功后，再对应的去修改成为我们的动态SQL实现通用。</li></ul><h2 id="12-缓存"><a href="#12-缓存" class="headerlink" title="12. 缓存"></a>12. 缓存</h2><h3 id="12-1-简介"><a href="#12-1-简介" class="headerlink" title="12.1 简介"></a>12.1 简介</h3><p>查询：连接数据库-&gt;消耗资源！！</p><p>解决：一次查询的结果可以暂存在一个可以直接取到的地方-&gt;放入内存</p><p>再次查询时，直接走缓存，就不需要走数据库。</p><ol><li><p><strong>什么是缓存[cache]？</strong></p><p>-存在内存中的临时数据</p><p>-将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上（关系型数据库数据文件）查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</p></li><li><p>为什么使用缓存？</p><p>减少和数据库的交换次数，减少系统开销，提高系统效率</p></li><li><p><strong>什么样的数据能使用缓存？</strong></p><p>经常查询并且不经常改变的数据。</p></li></ol><h3 id="12-2-MyBatis缓存"><a href="#12-2-MyBatis缓存" class="headerlink" title="12.2 MyBatis缓存"></a>12.2 MyBatis缓存</h3><ul><li><p>MyBatis包含一个非常强大的查询缓存特性，他可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率</p></li><li><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong>。</p><ul><li><p>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</p></li><li><p>二级缓存需要<strong>手动</strong>开启和配置，它是基于namespace级别的缓存。</p></li><li><p>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来定义二级缓存。</p></li></ul></li></ul><p>  Cache是一个接口interface,</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Cache</span> </span>&#123;    <span class="hljs-function">String <span class="hljs-title">getId</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">putObject</span><span class="hljs-params">(Object var1, Object var2)</span></span>;    <span class="hljs-function">Object <span class="hljs-title">getObject</span><span class="hljs-params">(Object var1)</span></span>;    <span class="hljs-function">Object <span class="hljs-title">removeObject</span><span class="hljs-params">(Object var1)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getSize</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">default</span> ReadWriteLock <span class="hljs-title">getReadWriteLock</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;&#125;</code></pre><h3 id="12-3一级缓存"><a href="#12-3一级缓存" class="headerlink" title="12.3一级缓存"></a>12.3一级缓存</h3><img src="/images/MyBatis/image-20201114124103438.png" alt="image-20201114124103438" style="zoom:50%;" /><p>缓存失效的情况：</p><ul><li>映射语句文件中的所有 select 语句的结果将会被缓存。</li><li>映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。因为增删改操作有可能会改变数据库的数据。</li><li>查询不同的Mapper.xml。</li><li>手动清理缓存！</li></ul><pre><code class="hljs java">sqlSession.clearCache();</code></pre><p><strong>小结：</strong></p><p>一级缓存默认是开启的，只在一次SqlSession中有效，也就是在连接-&gt;关闭连接这个时间段。</p><p>一级缓存就是一个Map。（一级缓存又称本地的会话缓存。）</p><h3 id="12-4-二级缓存"><a href="#12-4-二级缓存" class="headerlink" title="12.4 二级缓存"></a>12.4 二级缓存</h3><ul><li>二级缓存也就全局缓存，一级缓存作用域太低了，所以诞生了二级缓存。</li><li>基于namespace级别的缓存，一个命名空间，对应一个二级缓存。</li><li>工作机制<ul><li>一个会话查询一条数据时，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了，但是我们想要的是(二级缓存的机制)，一级缓存会话关闭了，一级缓存中的数据被保存到二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存map中。</li></ul></li></ul><p>步骤：</p><ol><li>开启全局缓存</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--显示的设置全局缓存--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span></code></pre><ol start="2"><li>在要使用二级缓存的mapper文件中开启！</li></ol><p><img src="/images/MyBatis/image-20201114162610558.png" alt="image-20201114162610558"></p><p>也可以自定参数：</p><pre><code class="hljs xml">&lt;cache  eviction=&quot;FIFO&quot;  flushInterval=&quot;60000&quot;  size=&quot;512&quot;  readOnly=&quot;true&quot;/&gt;</code></pre><p>可用的清除策略有：</p><ul><li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li><li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li><li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li><li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li></ul><p>默认的清除策略是 LRU。</p><p>flushInterval（刷新间隔）属性可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。</p><p>size（引用数目）属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。</p><p>readOnly（只读）属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。 因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。 速度上会慢一些，但是更安全，因此默认值是 false。</p><ol start="3"><li>测试</li></ol><img src="/images/MyBatis/image-20201114163546331.png" alt="image-20201114163546331" style="zoom:50%;" /><img src="/images/MyBatis/image-20201114163531437.png" alt="image-20201114163531437" style="zoom:50%;" /><p><strong>问题：</strong></p><p>我们需要将实体类序列化！否则会报错！(缓存、通信都最好将对象进行序列化)</p><p>Error serializing object.  Cause: java.io.NotSerializableException: com.wen.pojo.User</p><p><strong>小结：</strong></p><ul><li>只要开启了二级缓存，在同一个Mapper下就有效。</li><li>所有的数据都会先放在一级缓存中</li><li>只有当会话提交，或者关闭的时候，才会提交到二级缓存中</li></ul><h3 id="12-5-缓存原理"><a href="#12-5-缓存原理" class="headerlink" title="12.5 缓存原理"></a>12.5 缓存原理</h3><img src="/images/MyBatis/image-20201114165527710.png" alt="image-20201114165527710" style="zoom:50%;" /><h3 id="12-6-自定义缓存-Ehcache"><a href="#12-6-自定义缓存-Ehcache" class="headerlink" title="12.6 自定义缓存-Ehcache"></a>12.6 自定义缓存-Ehcache</h3><p>Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存,Java EE和轻量级容器。</p><p>但是，没人用啊哈哈哈哈~<img src="/images/MyBatis/image-20201114170513447.png" alt="image-20201114170513447"></p><img src="/images/MyBatis/image-20201114170535832.png" alt="image-20201114170535832" style="zoom:50%;" /><p>既然这样，那我就不学了！！</p><p>Redis数据库（非关系型数据库）来做缓存！K-V</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/11/27/hello-world/"/>
    <url>/2020/11/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
