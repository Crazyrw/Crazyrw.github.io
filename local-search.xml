<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>大数据开发必备框架——hadoop(持续更新中)</title>
    <link href="/2021/01/02/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94Hadoop/"/>
    <url>/2021/01/02/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94Hadoop/</url>
    
    <content type="html"><![CDATA[<h1 id="大数据技术——Hadoop"><a href="#大数据技术——Hadoop" class="headerlink" title="大数据技术——Hadoop"></a>大数据技术——Hadoop</h1><h2 id="1-大数据概论"><a href="#1-大数据概论" class="headerlink" title="1.大数据概论"></a>1.大数据概论</h2><h3 id="1-1大数据概念"><a href="#1-1大数据概念" class="headerlink" title="1.1大数据概念"></a>1.1大数据概念</h3><blockquote><p>大数据（big data），IT行业术语，是指无法<strong>在一定时间范围内</strong>用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的<strong>海量、高增长率和多样化的信息资产。</strong></p><p>——百度百科</p></blockquote><p> 在mysql中,每个数据库最多可创建20亿个表,一个表允许定义1024列,每行的最大长度为8092字节(不包括文本和图像类型的长度)。</p><p>美团 5000台起，BAT上万台服务器。</p><p>按顺序给出数据存储单位：bit Byte KB MB GB ==TB PB EB== ZB YB BB NB DB</p><p>1Byte = 8bit   1KB = 1024Byte</p><p>1MB = 1024KB    1GB = 1024MB</p><p>==1TB = 1024GB    1PB = 1024TB==</p><p>BAT和头条基本上能达到EB。</p><p><strong>大数据主要解决的问题：海量数据的==存储==和海量数据的分析计算问题。</strong></p><h3 id="1-2大数据特点（4V）"><a href="#1-2大数据特点（4V）" class="headerlink" title="1.2大数据特点（4V）"></a>1.2大数据特点（4V）</h3><ul><li><p>Volume(大量):大企业的数据量接近EB量级。</p></li><li><p>Velocity(高速):在海量数据面前处理数据的效率就是企业的声明</p></li><li><p>Variety(多样)</p><p>数据分为<strong>结构化数据和非结构化数据</strong>。相对于以往便于存储的==以数据库/文本为主的结构化数据==，==非结构化数据==越来越多，包括==网络日志、音频、视频、图片、地理位置信息==等，这些多类型的数据对数据的处理能力提出了更高要求。</p></li><li><p>Value(低价值密度)</p><p>价值密度的高低与数据总量的大小成反比。</p><p>因此，如果快速对有价值数据“提纯”称为目前大数据背景下待解决的难题。</p></li></ul><h3 id="1-3大数据应用场景"><a href="#1-3大数据应用场景" class="headerlink" title="1.3大数据应用场景"></a>1.3大数据应用场景</h3><ul><li>物流仓储：大数据分析系统助力商家精细化运营、提升销量、节约成本。</li><li>零售：分析用户消费习惯，为用户购买商品提供方便，从而提升商品销量。经典案例：纸尿布+啤酒</li><li>旅游：深度结合大数据能力与旅游行业需求，共建旅游产业智慧管理、智慧服务和智慧营销的未来。</li><li>电商广告推荐：给用户推荐可能喜欢的商品</li><li>保险：海量数据挖掘及风险预测，助力保险行业精准营销，提升精细化定价能力。  </li><li>金融：多维度体现用户特征，帮助金融机构推荐优质客户，防范欺诈风险。</li><li>房产：大数据全面助力房地产行业，打造精准投策与营销，选出更合适的地，建造更合适的楼，卖给更合适的人。</li><li>人工智能：机器人工厂、足球机器人、情感机器人、自动驾驶</li></ul><h3 id="1-5大数据部门业务流程分析"><a href="#1-5大数据部门业务流程分析" class="headerlink" title="1.5大数据部门业务流程分析"></a>1.5大数据部门业务流程分析</h3><p>产品人员提需求（统计总用户数、日活跃用户数、回流用户数）</p><p>-&gt;数据部门搭建数据平台、分析数据指标</p><p>-&gt;数据可视化（报表展示、邮件发送、大屏幕展示等）【JavaEE】</p><h3 id="1-6大数据部门组织结构"><a href="#1-6大数据部门组织结构" class="headerlink" title="1.6大数据部门组织结构"></a>1.6大数据部门组织结构</h3><p>![组织结构图 (1)](/images/大数据开发必备框架——Hadoop/组织结构图 (1).png)</p><h2 id="2-从Hadoop框架讨论大数据生态"><a href="#2-从Hadoop框架讨论大数据生态" class="headerlink" title="2.从Hadoop框架讨论大数据生态"></a>2.从Hadoop框架讨论大数据生态</h2><h3 id="2-1Hadoop简介"><a href="#2-1Hadoop简介" class="headerlink" title="2.1Hadoop简介"></a>2.1Hadoop简介</h3><ul><li>Hadoop是一个由Apache基金会所开发的<strong>分布式系统基础架构</strong>。</li><li>主要解决，海量数据的存储和海量数据的分析计算问题。</li></ul><p>Google是Hadoop的思想之源（Google在大数据方面的三篇论文）</p><ul><li>GFS -&gt; HDFS</li><li>Map-Reduce -&gt; MR</li><li>BigTable -&gt; HBase</li></ul><p>Hadoop的三大发行版本：Apache、Cloudera、Hortonworks</p><ul><li>Apache版本最原始（最基础）的版本，对于入门学习最好。（版本兼容问题，需要自己去解决）</li><li>Cloudera在大型互联网企业中用的比较多，CDH版本。（有利于解决版本兼容问题，一整套）</li><li>Hortonworks：文档较好，但是出现什么问题，需要收费</li></ul><p>Hadoop创始人加入了Cloudera公司。</p><h3 id="2-2Hadoop的优势（4高）"><a href="#2-2Hadoop的优势（4高）" class="headerlink" title="2.2Hadoop的优势（4高）"></a>2.2Hadoop的优势（4高）</h3><ul><li>高可靠性：Hadoop底层维护多个数据副本，所以即使Hadoop某个计算元素或存储出现故障，也不会导致数据的丢失。</li><li>高扩展性：在集群间分配任务数据，可方便的扩展数以千计的节点。</li><li>高效性：在MapReduce的思想下，Hadoop是并行工作的，以加快任务处理速度。</li><li>高容错性：能够自动将失败的任务重新分配。</li></ul><h3 id="2-3Hadoop1-x和Hadoop2-x的区别"><a href="#2-3Hadoop1-x和Hadoop2-x的区别" class="headerlink" title="2.3Hadoop1.x和Hadoop2.x的区别"></a>2.3Hadoop1.x和Hadoop2.x的区别</h3><p><img src="/images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94Hadoop/image-20210102152841372.png" alt="image-20210102152841372"></p><p>在Hadoop1.x时代，Hadoop中的MapReduce同时处理业务逻辑运算和资源的调度，耦合性较大，在Hadoop2.x时代，增加了Yarn。Yarn只负责资源的调度，MapeReduce只负责运算。</p><p>我看的视频教程是2018年的，Hadoop版本是2.x的，现在2021了，我们都是使用的3.x，在之后的学习中，我打算直接采用Hadoop3进行学习，应该差别不大，随时更新吧。</p><h3 id="2-4Hadoop3-x和Hadoop2-x的主要区别"><a href="#2-4Hadoop3-x和Hadoop2-x的主要区别" class="headerlink" title="2.4Hadoop3.x和Hadoop2.x的主要区别"></a>2.4Hadoop3.x和Hadoop2.x的主要区别</h3><p>最低支持Java版本从7升到了8</p><p>引入了纠删码（Erasure Coding，EC）</p><p>主要解决数据量大到一定程度磁盘空间存储能力不足的问题。</p><p>EC技术，是一种数据保护技术，最早用于通信行业中数据传输中的数据恢复，是一种编码容错技术。</p><p>它通过在原始数据中加入新的校验数据，使得各个部分的数据产生关联性。在一定范围的数据出错情况下，通过纠删码技术都可以进行恢复。</p><p>Hadoop3.x之前，HDFS存储方式为每一份数据存储3份，这也使得存储利用率为1/3.</p><p>Hadoop3.x引入EC技术，实现1份数据+0.5份冗余校验数据存储方式。</p><p>与副本相比，纠删码是一种更节省空间的数据持久化存储方法。标准编码（比如Reed-Solomon(10,4)）会有1.4倍的空间开销，然而HDFS副本会有3倍的空间开销。</p><p>因为纠删码额外开销主要是在重建和执行远程读，它传统用于存储冷数据，即不经常访问的数据，当部署这个新特性时用户应该考虑纠删码的网络和CPU开销。</p><p>重写了shell脚本</p><ul><li>增加了参数冲突检测，避免重复定义和冗余参数</li><li>CLASSPATH, JAVA_LIBRARY_PATH, and LD_LIBRARY_PATH等参数的去重，缩短环境变量 </li><li>shell脚本重构，将更多的代码加入function中，提供重载，删除重复代码，便于测试</li><li>脚本清理和简化</li><li>尽可能与当前系统保持兼容</li><li>提供一份Hadoop环境变量列表</li></ul><p>默认端口的修改</p><p>在hadoop3.x之前，多个hadoop服务的默认端口都属于Linux的临时端口（32768-61000）。这就意味着用户的服务在启动可能因为和其他应用程序端口冲突而无法启动。现在这些可能会产生冲突的端口已经不再属于临时端口范围，这些端口的改变会影响NameNode,Secondary NameNode,DataNode以及KMS。与此同时，官方文档也进行了相应的改变，具体可以参见以及HADOOP-12811。</p><p>NameNode ports:50470–&gt;9871,50070–&gt;9870,8020–&gt;9820</p><p>Secondary NN ports:50091–&gt;9869,50090 –&gt; 9868</p><p>DataNode ports:50020 –&gt; 9867, 50010–&gt; 9866, 50475 –&gt; 9865, 50075 –&gt; 9864</p><p>KMS server ports: 6000 –&gt; 9600 (原先的16000与HMaster端口冲突)                                                   </p><p>//其他的不同点，如果我之后在学习中遇到的话，我会在这里进行更新一下。</p><h3 id="2-5-Hadoop组成（面试重点）"><a href="#2-5-Hadoop组成（面试重点）" class="headerlink" title="2.5 Hadoop组成（面试重点）"></a>2.5 Hadoop组成（面试重点）</h3><h4 id="2-5-1-HDFS架构概述"><a href="#2-5-1-HDFS架构概述" class="headerlink" title="2.5.1 HDFS架构概述"></a>2.5.1 HDFS架构概述</h4><ol><li>NameNode(nn):存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表和块所在的DataNode等。</li><li>DataNode(dn):在本地文件系统存储文件块数据，以及块数据的校验和。</li><li>Secondary NameNode(2nn):用来监视HDFS状态的辅助后台程序，每隔一段时间获取HDFS元数据的快照。</li></ol><h4 id="2-5-2-Yarn架构概述"><a href="#2-5-2-Yarn架构概述" class="headerlink" title="2.5.2 Yarn架构概述"></a>2.5.2 Yarn架构概述</h4><p>YARN 也是典型的 Master-Slave 架构，Master 称为 ResourceManager(RM), Slave 称为 NodeManager(NM)。</p><p>==<strong>RM负责接收用户提交的任务，并且决定为任务分配多少资源和调度到哪个NM去执行；NM是真正执行任务的节点，周期性的向RM汇报自己的资源使用情况并领取R,分配的任务，负责启动和停止任务相关的进程等工作。</strong>==</p><hr><p><strong>相关名词解释：</strong></p><ul><li><strong>资源：</strong> 在YARN的语境中，资源特指计算资源，包括CPU和内存。计算机的每个进程都会占用一定的CPU和内存，任务需要先向RM申请到资源后才能获准在NM上启动自己的进程。</li><li><strong>队列：</strong> YARN 将整个集群的资源划分为队列，每个用户的任务必须提交到指定队列。同时限制每个队列的大小，防止某个用户的任务占用整个集群，影响了其他用户的使用。</li><li><strong>Container:</strong> 任务申请资源后在NM上启动的进程统称为Container。比如在 MapReduce 中可以是 Mapper 或 Reducer，在 Spark 中可以是 Driver 或 Executor。</li></ul><hr><ol><li><p>ResourceManager（RM）主要作用</p><ul><li>处理客户端需求</li><li>监控NodeManager</li><li>启动或监控ApplicationMaster</li><li>资源的分配与调度</li></ul><p>包含ResourceScheduler、Application Manager。</p><p>ResourceScheduler-&gt;资源调度器，根据节点的容量、队列情况、为应用程序分配资源</p><p>Application Manager-&gt;应用程序管理器，负责接收Client端传输的job请求。</p></li><li><p>NodeManager(NM)主要作用</p><ul><li>管理单个节点上的资源</li><li>处理来自ResourceManager的命令</li><li>处理来自ApplicationMaster的命令</li></ul><p>本节点上的资源管理和任务管理。</p><p>定时向ResourceManager汇报本节点上的资源使用情况和各个Container的运行情况。</p><p>接收和处理来自ResourceManager的  Container启动和停止的各种命令。</p><p>处理来自ApplicationMaster的指令。比如启动MapTask和ReduceTask指令。</p></li><li><p>ApplicationMaster(AM)的作用</p><ul><li>负责数据的切分</li><li>为应用程序申请资源并分配给内部的任务</li><li>任务的监控与容错（当某些Task运行错误时，进行容错处理）</li></ul></li></ol><p>每个应用程序对应一个ApplicationMaster，负责单个应用程序的管理。</p><p>为应用程序向ResourceManager申请资源(Container)，并分配内部任务(MapTask和ReduceTask)与NodeManager通信来启动/停止任务，Task都是运行在Container中的。</p><ol start="3"><li>Container<ul><li>Container是Yarn中的资源抽象，它封装了某个节点的多维度资源，如内存、CPU、磁盘、网络等。</li></ul></li></ol><p>Container类似于一个虚拟机，可以在上面执行任务。</p><p>任务申请资源后在NM上启动的进程统称为Container。</p><hr><p>==<strong>YARN的工作机制：</strong>==</p><p>（1）MR程序提交到客户端所在的节点。</p><p>（2）YarnRunner向ResourceManager申请一个Application。</p><p>（3）RM将该应用程序的资源路径返回给YarnRunner。</p><p>（4）该程序将运行所需资源提交到HDFS上。</p><p>（5）程序资源提交完毕后，申请运行mrAppMaster。</p><p>（6）RM将用户的请求初始化成一个Task。</p><p>（7）其中一个NodeManager领取到Task任务。</p><p>（8）该NodeManager创建容器Container，并产生MRAppmaster。</p><p>（9）Container从HDFS上拷贝资源到本地。</p><p>（10）MRAppmaster向RM 申请运行MapTask资源。</p><p>（11）RM将运行MapTask任务分配给另外两个NodeManager，另两个NodeManager分别领取任务并创建容器。</p><p>（12）MR向两个接收到任务的NodeManager发送程序启动脚本，这两个NodeManager分别启动MapTask，MapTask对数据分区排序。</p><p>（13）MrAppMaster等待所有MapTask运行完毕后，向RM申请容器，运行ReduceTask。</p><p>（14）ReduceTask向MapTask获取相应分区的数据。</p><p>（15）程序运行完毕后，MR会向RM申请注销自己。</p><p>![顶层数据流图 (1)](/images/大数据开发必备框架——Hadoop/顶层数据流图 (1).png)</p><h3 id="2-5-3-MapReduce架构概述"><a href="#2-5-3-MapReduce架构概述" class="headerlink" title="2.5.3 MapReduce架构概述"></a>2.5.3 MapReduce架构概述</h3><p>MapReduce常用于对大规模数据集（大于1TB）的并行计算，或对大数据进行加工、挖掘和优化等处理。MapReduce将并行计算过程高度抽象到了两个函数map和reduce中，程序员只需要负责map和reduce函数的编写工作，而并行程序中的其他复杂问题（如分布式存储、工作调度、负责均衡、容错处理等）均可由MapReduce框架代为处理，程序员完全不用操心。</p><hr><p>MapReduce的技术特征：</p><ul><li>横向扩展，而非纵向扩展。</li><li>失效被认为是常态</li><li>将处理向数据迁移</li><li>顺序处理数据</li><li>隐藏系统层细节</li><li>平滑无缝的可扩展性</li></ul><hr><p>MapReduce的设计思想：</p><p><img src="/images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94Hadoop/482819-20200317191426229-1574114756.png" alt="img"></p><p>例如，求和：1+2+3+4+5+6+7+8+9+10=?，执行原理如下：</p><p><img src="/images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94Hadoop/482819-20200317191453256-147234515.png" alt="img"></p><hr><p><strong>MapReduce的工作原理（自己总结的）</strong></p><p>MapReduce处理大数据集的计算过程是将大数据集分解成 成百上千的小数据集，每个（或若干个）数据集分别由集群中一个节点进行处理并生成中间结果，然后这些中间结果会进行合并，从而得到最终结果。</p><p><img src="/images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94Hadoop/482819-20200317191532115-1901433424.png" alt="img"></p><hr><p><strong>MapReduce任务流程：</strong></p><p><img src="/images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94Hadoop/482819-20200317191550069-137570022.png" alt="img"></p><p>补充一下：上一部分说Yarn时，出现的MapTask就是Map的计算过程，同理，ReduceTask就是Reduce过程。</p><h3 id="2-6-大数据技术生态体系"><a href="#2-6-大数据技术生态体系" class="headerlink" title="2.6 大数据技术生态体系"></a>2.6 大数据技术生态体系</h3><p><img src="/images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94Hadoop/1.png" alt="1"></p><p>说明：</p><ul><li><p><strong>MapReduce离线计算、Spark Core内存计算都是离线计算。</strong></p></li><li><p>Hive的底层其实就是MapReduce。为JavaEE诞生的。</p></li><li><p>Spark Sql和Hive很类似。</p></li><li><p>Spark Streaming：准实时计算，批处理。而Storm就是实时计算，来了就计算。</p></li><li><p>==现在很多大型企业已经从Storm转向Flink了。==</p></li></ul><p>相关名词的介绍：</p><ul><li>Sqoop: Sqoop是一款开源软件，主要用在Hadoop、Hive与传统数据库(MySql)间进行数据传递，<strong>可以将一个关系型数据库(如MySQL、Oracle等)中的数据导入到Hadoop的HDFS中，也可以将HDFS的数据导入到关系型数据库。</strong></li><li>Flume: Flume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集，聚合和传输的系统，Flume支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume提供对数据进行简单处理，并写到各种数据接收方（可定制）的能力。</li><li>HBase: HBase是一个分布式的、面向列的开源数据库。HBase不同于一般的关系数据库，它是一个适用于非结构化数据存储的数据库。K-V数据对进行存储。</li><li>Kafka: Kafka是一个分布式、分区的、多副本的、多订阅者，基于zookeeper协调的分布式日志系统（也可以当做MQ系统），常见可以用于web/nginx日志、访问日志，消息服务等等。主要应用场景：日志收集系统和消息系统。<ul><li>以时间复杂度O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间的访问性能。</li><li>高吞吐率：即使在非常廉价的商品机器上也能做到单机支持每秒100K条消息的传输。</li><li>支持Kafka Server间的消息分区，及分布式消费，同时保证每个分区内的消息顺序传输。</li><li>同时支持离线数据处理和实时数据处理。</li><li>Scale out:支持在线水平扩展</li></ul></li><li>Spark: Spark是当前最流行的开源大数据内存计算框架。可以基于Hadoop上存储的大数据进行计算。Spark实际上是对Hadoop的补充，可以在Hadoop文件系统中并行运行。<ul><li>Spark支持交互式计算和复杂算法</li><li>Spark是一个通用引擎，可用它完成各种各样的运算，包括SQL查询、文本处理、机器学习等，而在 Spark 出现之前，我们一般需要学习各种各样的引擎来分别处理这些需求。</li></ul></li><li>Oozie: Oozie是一个管理Hadoop作业(job)的工作流程调度管理系统。</li><li>Azkaban: Azkaban是一个批量工作流任务调度器，用于在一个工作流内以一个特定的顺序运作一组工作和流程。是一套简单的任务调度服务。</li></ul><hr><p><strong>推荐系统项目框架：</strong></p><p><img src="/images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94Hadoop/20181203132727633.png" alt="在这里插入图片描述"></p><p><img src="/images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94Hadoop/image-20210103121325314.png" alt="image-20210103121325314"></p><h2 id="3-Hadoop运行环境搭建（开发重点）"><a href="#3-Hadoop运行环境搭建（开发重点）" class="headerlink" title="3.Hadoop运行环境搭建（开发重点）"></a>3.Hadoop运行环境搭建（开发重点）</h2><h2 id="4-Hadoop运行模式"><a href="#4-Hadoop运行模式" class="headerlink" title="4.Hadoop运行模式"></a>4.Hadoop运行模式</h2><h3 id="4-1本地运行模式"><a href="#4-1本地运行模式" class="headerlink" title="4.1本地运行模式"></a>4.1本地运行模式</h3><h3 id="4-2伪-分布式运行模式"><a href="#4-2伪-分布式运行模式" class="headerlink" title="4.2伪 分布式运行模式"></a>4.2伪 分布式运行模式</h3><p>（针对一台电脑）</p><h3 id="4-3完全分布式运行模式（开发重点）"><a href="#4-3完全分布式运行模式（开发重点）" class="headerlink" title="4.3完全分布式运行模式（开发重点）"></a>4.3完全分布式运行模式（开发重点）</h3><h2 id="5-Hadoop编译源码（面试重点）"><a href="#5-Hadoop编译源码（面试重点）" class="headerlink" title="5.Hadoop编译源码（面试重点）"></a>5.Hadoop编译源码（面试重点）</h2><h2 id="6-常见错误及解决方案"><a href="#6-常见错误及解决方案" class="headerlink" title="6.常见错误及解决方案"></a>6.常见错误及解决方案</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fail-fast和fail-safe</title>
    <link href="/2020/12/27/fail-fast%E5%92%8Cfail-safe/"/>
    <url>/2020/12/27/fail-fast%E5%92%8Cfail-safe/</url>
    
    <content type="html"><![CDATA[<p>fail-fast与fasy-safe。</p><p>在Collection集合的各个类中，有线程安全和线程不安全两类。</p><p>对于线程不安全的类，并发情况下可能会出现fail-fast情况；而线程安全的类，可能会出现fail-safe的情况。</p><p><strong>并发修改：</strong></p><p>当一个或多个线程正在遍历一个集合Collection的时候，而此时另一个线程修改了这个集合的内容（如添加、删除或者修改）。这就是并发修改的情况。</p><h2 id="1-fail-fast"><a href="#1-fail-fast" class="headerlink" title="1. fail-fast"></a>1. fail-fast</h2><p>fail-fast机制：当遍历一个集合对象时，如果集合对象的结构被修改了，就会抛出ConcurrentModificationException异常。</p><p><strong>测试：(下面是单线程的情况，其实多线程是类似的)</strong></p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Iterator;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCoding</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        List&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();        list1.add(<span class="hljs-number">18</span>);        list1.add(<span class="hljs-number">20</span>);        list1.add(<span class="hljs-number">30</span>);        list1.add(<span class="hljs-number">40</span>);        Iterator&lt;Integer&gt; it = list1.iterator();        <span class="hljs-keyword">while</span> (it.hasNext())&#123;            Integer integer = it.next();            <span class="hljs-keyword">if</span>(integer == <span class="hljs-number">20</span>)&#123;                list1.remove(integer);            &#125;        &#125;    &#125;&#125;</code></pre><img src="/images/fail-fast和fail-safe/image-20201227184015970.png" alt="image-20201227184015970" style="zoom:80%;" /><p><strong>原因分析：</strong></p><p>我们先看看Iterator的源码。</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.util;<span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractList</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractCollection</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;    ...        <span class="hljs-comment">// AbstractList中唯一的属性</span>        <span class="hljs-comment">// 用来记录List修改的次数：每修改一次(添加/删除等操作)，将modCount+1</span>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> modCount = <span class="hljs-number">0</span>;    <span class="hljs-comment">// 返回List对应迭代器。实际上，是返回Itr对象。</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Itr();    &#125;    <span class="hljs-comment">// Itr是Iterator(迭代器)的实现类</span>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Itr</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;        <span class="hljs-keyword">int</span> cursor = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> lastRet = -<span class="hljs-number">1</span>;        <span class="hljs-comment">// 修改数的记录值。</span>        <span class="hljs-comment">// 每次新建Itr()对象时，都会保存新建该对象时对应的modCount；</span>        <span class="hljs-comment">// 以后每次遍历List中的元素的时候，都会比较expectedModCount和modCount是否相等；</span>        <span class="hljs-comment">// 若不相等，则抛出ConcurrentModificationException异常，产生fail-fast事件。</span>        <span class="hljs-keyword">int</span> expectedModCount = modCount;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;            <span class="hljs-keyword">return</span> cursor != size();        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;            <span class="hljs-comment">// 获取下一个元素之前，都会判断“新建Itr对象时保存的modCount”和“当前的modCount”是否相等；</span>            <span class="hljs-comment">// 若不相等，则抛出ConcurrentModificationException异常，产生fail-fast事件。</span>            checkForComodification();            <span class="hljs-keyword">try</span> &#123;                E next = get(cursor);                lastRet = cursor++;                <span class="hljs-keyword">return</span> next;            &#125; <span class="hljs-keyword">catch</span> (IndexOutOfBoundsException e) &#123;                checkForComodification();                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchElementException();            &#125;        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;            <span class="hljs-keyword">if</span> (lastRet == -<span class="hljs-number">1</span>)                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException();            checkForComodification();            <span class="hljs-keyword">try</span> &#123;                AbstractList.<span class="hljs-keyword">this</span>.remove(lastRet);                <span class="hljs-keyword">if</span> (lastRet &lt; cursor)                    cursor--;                lastRet = -<span class="hljs-number">1</span>;                expectedModCount = modCount;            &#125; <span class="hljs-keyword">catch</span> (IndexOutOfBoundsException e) &#123;                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();            &#125;        &#125;        <span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkForComodification</span><span class="hljs-params">()</span> </span>&#123;            <span class="hljs-keyword">if</span> (modCount != expectedModCount)                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();        &#125;    &#125;    ...&#125;</code></pre><p>从中，我们可以发现在调用 next() 和 remove()时，都会执行 checkForComodification()。若 “<strong>modCount 不等于 expectedModCount</strong>”，则抛出ConcurrentModificationException异常，产生fail-fast事件。</p><p>要搞明白 fail-fast机制，我们就要需要理解什么时候“modCount 不等于 expectedModCount”！<br>从Itr类中，我们知道 expectedModCount 在创建Itr对象时，被赋值为 modCount，除此之外其他任何情况，expectedModCount 都不会被修改。通过Itr，我们知道：expectedModCount不可能被修改为不等于 modCount。所以，需要考证的就是modCount何时会被修改。</p><p>接下来，我们看一下ArrayList的源码，看看modCount是如何被修改的：</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.util;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayList</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractList</span>&lt;<span class="hljs-title">E</span>&gt;</span><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">E</span>&gt;, <span class="hljs-title">RandomAccess</span>, <span class="hljs-title">Cloneable</span>, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span></span><span class="hljs-class"></span>&#123;    ...        <span class="hljs-comment">// list中容量变化时，对应的同步函数</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureCapacity</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;        modCount++;        <span class="hljs-keyword">int</span> oldCapacity = elementData.length;        <span class="hljs-keyword">if</span> (minCapacity &gt; oldCapacity) &#123;            Object oldData[] = elementData;            <span class="hljs-keyword">int</span> newCapacity = (oldCapacity * <span class="hljs-number">3</span>)/<span class="hljs-number">2</span> + <span class="hljs-number">1</span>;            <span class="hljs-keyword">if</span> (newCapacity &lt; minCapacity)                newCapacity = minCapacity;            <span class="hljs-comment">// minCapacity is usually close to size, so this is a win:</span>            elementData = Arrays.copyOf(elementData, newCapacity);        &#125;    &#125;    <span class="hljs-comment">// 添加元素到队列最后</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;        <span class="hljs-comment">// 修改modCount</span>        ensureCapacity(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span>        elementData[size++] = e;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;    <span class="hljs-comment">// 添加元素到指定的位置</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>&#123;        <span class="hljs-keyword">if</span> (index &gt; size || index &lt; <span class="hljs-number">0</span>)            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IndexOutOfBoundsException(            <span class="hljs-string">&quot;Index: &quot;</span>+index+<span class="hljs-string">&quot;, Size: &quot;</span>+size);        <span class="hljs-comment">// 修改modCount</span>        ensureCapacity(size+<span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span>        System.arraycopy(elementData, index, elementData, index + <span class="hljs-number">1</span>,                         size - index);        elementData[index] = element;        size++;    &#125;    <span class="hljs-comment">// 添加集合</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addAll</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;        Object[] a = c.toArray();        <span class="hljs-keyword">int</span> numNew = a.length;        <span class="hljs-comment">// 修改modCount</span>        ensureCapacity(size + numNew);  <span class="hljs-comment">// Increments modCount</span>        System.arraycopy(a, <span class="hljs-number">0</span>, elementData, size, numNew);        size += numNew;        <span class="hljs-keyword">return</span> numNew != <span class="hljs-number">0</span>;    &#125;    <span class="hljs-comment">// 删除指定位置的元素</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;        RangeCheck(index);        <span class="hljs-comment">// 修改modCount</span>        modCount++;        E oldValue = (E) elementData[index];        <span class="hljs-keyword">int</span> numMoved = size - index - <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)            System.arraycopy(elementData, index+<span class="hljs-number">1</span>, elementData, index, numMoved);        elementData[--size] = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// Let gc do its work</span>        <span class="hljs-keyword">return</span> oldValue;    &#125;    <span class="hljs-comment">// 快速删除指定位置的元素</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fastRemove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;        <span class="hljs-comment">// 修改modCount</span>        modCount++;        <span class="hljs-keyword">int</span> numMoved = size - index - <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)            System.arraycopy(elementData, index+<span class="hljs-number">1</span>, elementData, index,                             numMoved);        elementData[--size] = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// Let gc do its work</span>    &#125;    <span class="hljs-comment">// 清空集合</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// 修改modCount</span>        modCount++;        <span class="hljs-comment">// Let gc do its work</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)            elementData[i] = <span class="hljs-keyword">null</span>;        size = <span class="hljs-number">0</span>;    &#125;    ...&#125;</code></pre><p>从中，我们发现：无论是add()、remove()，还是clear()，只要涉及到修改集合中的元素个数时，都会改变modCount的值。</p><p><strong>因此</strong>，在iterator遍历中，执行add、remove、clear等方法，会改变modCount的值，从而会抛出ConcurrentModificationException异常，产生fail-fast事件。</p><p>在测试过程中，遇到了一个有意思的问题：</p><img src="/images/fail-fast和fail-safe/image-20201227182712771.png" alt="image-20201227182712771" style="zoom:80%;" /><p><strong>竟然不报错？？真是百思不得其解，最后在知乎上看到了相关的回答。</strong></p><p>通过上面的分析，我们发现只有next()、remove()时才会检查exceptedMoCount和modCount的值。而只要涉及改变集合元素的操作modCount都会变化，而exceptedModCount在初始化之后就不变了。</p><p>基于这些结论，我们再来分析这段代码，其实这里不报异常的问题在于hasNext()方法，我们接下来看一下源码：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> cursor != size;&#125;</code></pre><p>其中，cursor的意思是，index of next element，下一个要遍历元素的下标.</p><p>当运行完list1.remove(integer)//integer=20这行代码之后，很明显，size=2,cursor=2，导致了hasNext()返回false，结束了循环。因此，是因为hasNext()返回了false使得提前结束了循环，还没有运行到next()方法，所以没有报ConcurrentModificationException异常。</p><p>除此之外，还看到了一个比较有意思的问题，ArrayList有两个remove方法，</p><pre><code class="hljs java"><span class="hljs-function">E <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object o)</span></span></code></pre><p>当参数是Integer时会调用哪个？ 我在JLS中找到这么一段，意思是选择重载函数时不会优先考虑装箱跟拆箱:</p><p>The first phase (<a href="https://link.zhihu.com/?target=http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html%23jls-15.12.2.2">§15.12.2.2</a>) performs overload resolution without permitting boxing or unboxing conversion, or the use of variable arity method invocation. If no applicable method is found during this phase then processing continues to the second phase.</p><p>我的理解是，应该是直接调用第二个函数的。</p><p>避免抛异常的解决方法：</p><img src="/images/fail-fast和fail-safe/image-20201227184803512.png" alt="image-20201227184803512" style="zoom:80%;" /><p>方法就是使用iterator自带的remove()方法，为什么使用这个方法没问题呢？是因为该remove方法并不会修改modCount的值，并且不会对后面的遍历造成影响，因为该方法remove不能指定元素，只能remove当前遍历过的那个元素，所以调用该方法并不会发生fail-fast现象。该方法有局限性。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">if</span> (lastRet &lt; <span class="hljs-number">0</span>)        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException();    checkForComodification();    <span class="hljs-keyword">try</span> &#123;        ArrayList.<span class="hljs-keyword">this</span>.remove(lastRet);        cursor = lastRet;        lastRet = -<span class="hljs-number">1</span>;        expectedModCount = modCount;<span class="hljs-comment">//同志们，看到了吗？！这儿，没变！</span>    &#125; <span class="hljs-keyword">catch</span> (IndexOutOfBoundsException ex) &#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConcurrentModificationException();    &#125;&#125;</code></pre><p>还有一种方法是：</p><p>使用java并发包(java.util.concurrent)中的类来代替 ArrayList 和hashMap。</p><p>比如使用 CopyOnWriterArrayList代替 ArrayList， CopyOnWriterArrayList在是使用上跟 ArrayList几乎一样， CopyOnWriter是写时复制的容器(COW)，在读写时是线程安全的。该容器在对add和remove等操作时，并不是在原数组上进行修改，而是将原数组拷贝一份，在新数组上进行修改，待完成后，才将指向旧数组的引用指向新数组，所以对于 CopyOnWriterArrayList在迭代过程并不会发生fail-fast现象。但 CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。</p><p>对于HashMap，可以使用ConcurrentHashMap， ConcurrentHashMap采用了锁机制，是线程安全的。在迭代方面，ConcurrentHashMap使用了一种不同的迭代方式。在这种迭代方式中，当iterator被创建后集合再发生改变就不再是抛出ConcurrentModificationException，取而代之的是在改变时new新的数据从而不影响原有的数据 ，iterator完成后再将头指针替换为新的数据 ，这样iterator线程可以使用原来老的数据，而写线程也可以并发的完成改变。即迭代不会发生fail-fast，但不保证获取的是最新的数据。</p><p>CopyOnWriterArrayList源码：</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.util.concurrent;<span class="hljs-keyword">import</span> java.util.*;<span class="hljs-keyword">import</span> java.util.concurrent.locks.*;<span class="hljs-keyword">import</span> sun.misc.Unsafe;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CopyOnWriteArrayList</span>&lt;<span class="hljs-title">E</span>&gt;</span><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">E</span>&gt;, <span class="hljs-title">RandomAccess</span>, <span class="hljs-title">Cloneable</span>, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;    ...    <span class="hljs-comment">// 返回集合对应的迭代器</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> COWIterator&lt;E&gt;(getArray(), <span class="hljs-number">0</span>);    &#125;    ...    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">COWIterator</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">ListIterator</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object[] snapshot;        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> cursor;        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">COWIterator</span><span class="hljs-params">(Object[] elements, <span class="hljs-keyword">int</span> initialCursor)</span> </span>&#123;            cursor = initialCursor;            <span class="hljs-comment">// 新建COWIterator时，将集合中的元素保存到一个新的拷贝数组中。</span>            <span class="hljs-comment">// 这样，当原始集合的数据改变，拷贝数据中的值也不会变化。</span>            snapshot = elements;        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;            <span class="hljs-keyword">return</span> cursor &lt; snapshot.length;        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPrevious</span><span class="hljs-params">()</span> </span>&#123;            <span class="hljs-keyword">return</span> cursor &gt; <span class="hljs-number">0</span>;        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;            <span class="hljs-keyword">if</span> (! hasNext())                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchElementException();            <span class="hljs-keyword">return</span> (E) snapshot[cursor++];        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">previous</span><span class="hljs-params">()</span> </span>&#123;            <span class="hljs-keyword">if</span> (! hasPrevious())                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchElementException();            <span class="hljs-keyword">return</span> (E) snapshot[--cursor];        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">nextIndex</span><span class="hljs-params">()</span> </span>&#123;            <span class="hljs-keyword">return</span> cursor;        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">previousIndex</span><span class="hljs-params">()</span> </span>&#123;            <span class="hljs-keyword">return</span> cursor-<span class="hljs-number">1</span>;        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException();        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(E e)</span> </span>&#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException();        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException();        &#125;    &#125;    ...&#125;</code></pre><p>根据源码我们可以看出：</p><ul><li>和ArrayList继承于AbstractList不同，CopyOnWriteArrayList没有继承于AbstractList，它仅仅只是实现了List接口</li><li>ArrayList的iterator()函数返回的Iterator是在AbstractList中实现的；而CopyOnWriteArrayList是自己实现Iterator。</li><li>ArrayList的Iterator实现类中调用next()时，会“调用checkForComodification()比较‘expectedModCount’和‘modCount’的大小”；但是，CopyOnWriteArrayList的Iterator实现类中，没有所谓的checkForComodification()，更不会抛出ConcurrentModificationException异常！ </li></ul><h2 id="2-fail-safe"><a href="#2-fail-safe" class="headerlink" title="2. fail-safe"></a>2. fail-safe</h2><p>//to be continued</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>大数据学习路线（Java方向）（不断更正中）</title>
    <link href="/2020/12/27/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%EF%BC%88%E4%B8%8D%E6%96%AD%E4%BF%AE%E6%94%B9%EF%BC%89/"/>
    <url>/2020/12/27/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%EF%BC%88%E4%B8%8D%E6%96%AD%E4%BF%AE%E6%94%B9%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="http://naotu.baidu.com/file/b4067a6ef045a8e770fe7a9b2ec88f13?token=4651e6218918720b">学习路线脑图链接</a></p><p>这是我初步制定的学习路线，参考的别人的，后续会根据自己学习的进度进行修改等！加油加油！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文件的上传下载</title>
    <link href="/2020/12/21/%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
    <url>/2020/12/21/%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p>文件上传是项目开发中最常见的功能之一，springMVC可以很好的支持文件上传，但是SpringMVC上下文默认没有装配MultipartResolver,因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。</p><p>==前端表单要求：==为了能上传文件，必须将表单的==method设置为POST==，并将==enctype设置为multipart/form-data==。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</p><p><strong>对表单中的 enctype 属性做个详细的说明：</strong></p><ul><li>application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</li><li>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li><li>text/plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li></ul><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>method=<span class="hljs-string">&quot;post&quot;</span>&gt;   &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;file&quot;</span>/&gt;   &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;&lt;/form&gt;</code></pre><p>一旦设置了enctype为multipart/form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的HTTP响应。在2003年，Apache Software Foundation发布了开源的Commons FileUpload组件，其很快成为Servlet/JSP程序员上传文件的最佳选择。</p><ul><li>Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。</li><li>而Spring MVC则提供了更简单的封装。</li><li>Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。</li><li>Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类：</li><li>CommonsMultipartResolver。因此，SpringMVC的文件上传还需要依赖Apache Commons FileUpload的组件。</li></ul><h3 id="1-文件上传"><a href="#1-文件上传" class="headerlink" title="1. 文件上传"></a>1. 文件上传</h3><ol><li><p>导入jar包：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--必须使用3.0以上版本的servlet的，因为从3.0才开始支持getServletContext方法--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></li><li><p>配置bean：multipartResolver</p><p>【<strong>注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误！在这里栽过坑,教训！</strong>】</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传配置--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10485760&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxInMemorySize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;40960&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><p>CommonsMultipartFile的常用方法：</p><ul><li>String getOriginalFilename(): 获取上传文件的原名</li><li>InputStream getInputStream(): 获取文件流</li><li>void transferTo(File dest): 将上传文件保存到一个目录文件中</li></ul><p><strong>接下来先采用getOriginalFilename()方法去做！</strong></p></li><li><p>编写前端页面</p><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;/file/upload&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;    &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;file&quot;</span>/&gt;    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;upload&quot;</span>&gt;&lt;/form&gt;</code></pre></li><li><p>controller</p><pre><code class="hljs java"><span class="hljs-comment">//@RequestParam(&quot;file&quot;) 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span><span class="hljs-comment">//批量上传CommonsMultipartFile则为数组即可</span><span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">fileUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;    <span class="hljs-comment">//获取文件名 : file.getOriginalFilename();</span>    String uploadFileName = file.getOriginalFilename();    <span class="hljs-comment">//如果文件名为空，直接回到首页！</span>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(uploadFileName))&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;    &#125;    <span class="hljs-comment">//上传路径保存设置</span>    String path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);    <span class="hljs-comment">//如果路径不存在，创建一个</span>    File realPath = <span class="hljs-keyword">new</span> File(path);    <span class="hljs-keyword">if</span> (!realPath.exists())&#123;        realPath.mkdir();    &#125;    <span class="hljs-comment">//上传文件</span>    InputStream is = file.getInputStream(); <span class="hljs-comment">//文件输入流</span>    OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(realPath, uploadFileName)); <span class="hljs-comment">//文件输出流</span>    <span class="hljs-comment">//读取写出</span>    <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;    <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];    <span class="hljs-keyword">while</span> ((len=is.read(buffer))!=-<span class="hljs-number">1</span>)&#123;        os.write(buffer,<span class="hljs-number">0</span>,len);        os.flush();    &#125;    os.close();    is.close();    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;&#125;</code></pre></li><li><p>测试上传文件  测试成功！</p><p><img src="/images/%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/image-20201222083948986.png" alt="image-20201222083948986"></p></li></ol><p><strong>采用transferTo(File dest)方法进行测试！</strong></p><ol><li><p>编写controller</p><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment">     * 采用file.Transto 来保存上传的文件</span><span class="hljs-comment">     */</span><span class="hljs-meta">@RequestMapping(&quot;/upload2&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String  <span class="hljs-title">fileUpload2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;    <span class="hljs-comment">//获取上传路径</span>    String path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);    File realPath = <span class="hljs-keyword">new</span> File(path);    <span class="hljs-keyword">if</span>(!realPath.exists())&#123;        realPath.mkdirs();    &#125;    <span class="hljs-comment">//上传文件</span>    file.transferTo(<span class="hljs-keyword">new</span> File(realPath + <span class="hljs-string">&quot;/&quot;</span> + file.getOriginalFilename()));    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;&#125;</code></pre></li><li><p>前端表单提交地址修改</p><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;/file/upload2&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;    &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;file&quot;</span>/&gt;    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;upload&quot;</span>&gt;&lt;/form&gt;</code></pre></li><li><p>运行测试</p><p>测试结果：成功创建！（路径如下：）</p><p><img src="/images/%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/image-20201222091006806.png" alt="image-20201222091006806"></p></li></ol><h3 id="2-文件下载"><a href="#2-文件下载" class="headerlink" title="2. 文件下载"></a>2. 文件下载</h3><p>文件下载的步骤：</p><ul><li>设置response响应头</li><li>读取文件 - InputStream</li><li>写出文件 - OutputStream</li><li>关闭流（先开后关）</li></ul><p>实现：</p><ol><li><p>controller</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/download&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">downloads</span><span class="hljs-params">(HttpServletResponse response, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;    <span class="hljs-comment">//要下载的图片地址</span>    String path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);    String fileName = <span class="hljs-string">&quot;rw.jpg&quot;</span>;    <span class="hljs-comment">//1. 设置response响应头</span>    response.reset();<span class="hljs-comment">//设置页面缓存，清空buffer</span>    response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);    response.setContentType(<span class="hljs-string">&quot;multipart/form-data&quot;</span>);<span class="hljs-comment">//二进制传输数据</span>    <span class="hljs-comment">//设置响应头</span>    response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;fileName=&quot;</span>+ URLEncoder.encode(fileName, <span class="hljs-string">&quot;UTF-8&quot;</span>));    File file = <span class="hljs-keyword">new</span> File(path, fileName);    <span class="hljs-comment">//2. 读取文件 - 输入流</span>    InputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(file);    <span class="hljs-comment">//3. 写出文件 - 输出流</span>    OutputStream outputStream = response.getOutputStream();    <span class="hljs-keyword">byte</span>[] buff = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;    <span class="hljs-comment">//4. 执行 写出操作</span>    <span class="hljs-keyword">while</span>((index = inputStream.read(buff)) != -<span class="hljs-number">1</span>)&#123;        outputStream.write(buff, <span class="hljs-number">0</span>, index);        outputStream.flush();    &#125;    outputStream.close();    inputStream.close();    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;</code></pre></li><li><p>前端代码</p><pre><code class="hljs jsp">&lt;%--下载文件按钮--%&gt;&lt;a href=&quot;/file/download&quot;&gt;点击下载&lt;/a&gt;</code></pre></li><li><p>测试运行，下载成功！</p><p><img src="/images/%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/image-20201222093058460.png" alt="image-20201222093058460"></p><p><img src="/images/%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/image-20201222093105236.png" alt="image-20201222093105236"></p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>拦截器</title>
    <link href="/2020/12/19/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <url>/2020/12/19/%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>地址：<a href="https://github.com/Crazyrw/springmvc-07-interceptor">https://github.com/Crazyrw/springmvc-07-interceptor</a></p><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>SpringMVC的处理拦截器类似于Servlet开发中的过滤器Filter，用于对处理器进行预处理和后处理。开发可以自己定义一些拦截器来实现特定的功能。</p><p><strong>过滤器和拦截器的区别：</strong> 拦截器是AOP思想的具体应用。</p><p><strong>过滤器：</strong></p><ul><li>servlet规范中的一部分，任何javaWeb工程都可以使用。</li><li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截。</li></ul><p><strong>拦截器：</strong></p><ul><li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用。</li><li>拦截器只会拦截访问的控制器方法，如果访问的是jsp、html、css、image、js是不会拦截的。</li></ul><h3 id="2-自定义拦截器"><a href="#2-自定义拦截器" class="headerlink" title="2. 自定义拦截器"></a>2. 自定义拦截器</h3><p>那如何实现拦截器呢？</p><p>想要自定义拦截器，必须实现 HandlerInterceptor 接口。</p><ol><li>新建一个Module,springmvc-07-interceptor 添加web支持</li><li>web.xml applicationContext.xml  spring-mvc.xml</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--DispatcherServlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-comment">&lt;!--乱码过滤--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring/spring-mvc.xml&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--注解驱动 &amp;&amp; 乱码处理RestController ResponseBody--&gt;</span><span class="hljs-comment">&lt;!--    &lt;mvc:annotation-driven&gt;</span><span class="hljs-comment">        &lt;mvc:message-converters&gt;</span><span class="hljs-comment">            &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;</span><span class="hljs-comment">                &lt;constructor-arg value=&quot;UTF-8&quot;/&gt;</span><span class="hljs-comment">            &lt;/bean&gt;</span><span class="hljs-comment">            &lt;bean class=&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&gt;</span><span class="hljs-comment">                &lt;property name=&quot;objectMapper&quot;&gt;</span><span class="hljs-comment">                    &lt;bean class=&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;&gt;</span><span class="hljs-comment">                        &lt;property name=&quot;failOnEmptyBeans&quot; value=&quot;false&quot;/&gt;</span><span class="hljs-comment">                    &lt;/bean&gt;</span><span class="hljs-comment">                &lt;/property&gt;</span><span class="hljs-comment">            &lt;/bean&gt;</span><span class="hljs-comment">        &lt;/mvc:message-converters&gt;</span><span class="hljs-comment">    &lt;/mvc:annotation-driven&gt;--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wen.controller&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="3"><li>编写拦截器：MyInterceptor.java</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.controller;<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;    <span class="hljs-comment">//在请求处理的方法之前执行</span>    <span class="hljs-comment">//如果返回true执行下一个拦截器</span>    <span class="hljs-comment">//如果返回false就不执行下一个拦截器</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="hljs-string">&quot;------------处理前------------&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;    <span class="hljs-comment">//在请求处理方法执行之后执行</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="hljs-string">&quot;------------处理后------------&quot;</span>);    &#125;    <span class="hljs-comment">//在dispatcherServlet处理后执行,做清理工作.</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="hljs-string">&quot;------------清理------------&quot;</span>);    &#125;&#125;</code></pre><ol start="4"><li>在spring-mvc.xml中配置拦截器</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置拦截器--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span>        <span class="hljs-comment">&lt;!--/** 包括路径及其子路径--&gt;</span>        <span class="hljs-comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截 只拦截一层--&gt;</span>        <span class="hljs-comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!--bean配置的就是拦截器--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.controller.MyInterceptor&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span></code></pre><ol start="5"><li>编写一个controller，接收请求，用于测试</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-comment">//测试拦截器的控制器</span><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Interceptor</span> </span>&#123;    <span class="hljs-meta">@RequestMapping(&quot;/interceptor&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testFunction</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;控制器中的方法执行了&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;    &#125;&#125;</code></pre><ol start="6"><li>index.jsp</li></ol><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;  &lt;title&gt;$Title$&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;a href=&quot;/interceptor&quot;&gt;拦截器测试&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ol start="7"><li>配置Tomcat 测试与运行</li></ol><p><img src="/images/%E6%8B%A6%E6%88%AA%E5%99%A8/image-20201220003022843.png" alt="image-20201220003022843"></p><p><img src="/images/%E6%8B%A6%E6%88%AA%E5%99%A8/image-20201220003030248.png" alt="image-20201220003030248"></p><p><img src="/images/%E6%8B%A6%E6%88%AA%E5%99%A8/image-20201220003036733.png" alt="image-20201220003036733"></p><h3 id="3-验证用户是否登录-认证用户"><a href="#3-验证用户是否登录-认证用户" class="headerlink" title="3. 验证用户是否登录 (认证用户)"></a>3. 验证用户是否登录 (认证用户)</h3><p>实现思路：</p><p>首页，有两个按钮，一个跳转到登陆界面，一个是成功界面，但是如果系统判断该用户未登录，那么点击成功界面也会跳转到登陆界面。</p><p>整个判定过程由拦截器完成。（拦截器只会拦截所有通往controller的请求！）</p><p>实现过程：</p><ol><li><p>首页：index.jsp</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;  &lt;title&gt;$Title$&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;首页&lt;/h1&gt;&lt;hr&gt;&lt;%--登录--%&gt;&lt;a href=&quot;/user/jumpLogin&quot;&gt;登录&lt;/a&gt;&lt;a href=&quot;/user/jumpSuccess&quot;&gt;成功页面&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li><li><p>登录界面:login.jsp</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Login&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;登录页面&lt;/h1&gt;&lt;hr&gt;&lt;form action=<span class="hljs-string">&quot;/user/login&quot;</span>&gt;    用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt; &lt;br&gt;    密码：&lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;pwd&quot;</span>&gt; &lt;br&gt;    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li><li><p>成功界面：success.jsp</p><pre><code class="hljs jsp">&lt;%--&lt;jsp:useBean id=<span class="hljs-string">&quot;user&quot;</span> scope=<span class="hljs-string">&quot;session&quot;</span> type=<span class="hljs-string">&quot;com.wen.controller.UserController&quot;</span>/&gt;--%&gt;&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;  &lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;h1&gt;登陆成功&lt;/h1&gt;      欢迎，$&#123;user&#125;    &lt;a href=&quot;/user/logout&quot;&gt;注销&lt;/a&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre></li><li><p>controller</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;    <span class="hljs-comment">//跳转到登陆页面</span>    <span class="hljs-meta">@RequestMapping(&quot;/jumpLogin&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">jumpLogin</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;    &#125;    <span class="hljs-comment">//跳转到成功页面</span>    <span class="hljs-meta">@RequestMapping(&quot;/jumpSuccess&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">jumpSuccess</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;    &#125;    <span class="hljs-comment">//登陆提交</span>    <span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(HttpSession session, String username, String pwd)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 向session记录用户身份信息</span>        System.out.println(<span class="hljs-string">&quot;接收前端===&quot;</span>+username);        session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>, username);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;    &#125;    <span class="hljs-comment">//退出登陆</span>    <span class="hljs-meta">@RequestMapping(&quot;/logout&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">logout</span><span class="hljs-params">(HttpSession session)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// session 过期</span>        session.invalidate();        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;    &#125;&#125;</code></pre></li><li><p>拦截器：LoginInterceptor</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.interceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 如果是登陆页面则放行</span>        System.out.println(<span class="hljs-string">&quot;URI: &quot;</span> + request.getRequestURI());        <span class="hljs-keyword">if</span> (request.getRequestURI().contains(<span class="hljs-string">&quot;login&quot;</span>)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;        HttpSession session = request.getSession();        <span class="hljs-comment">// 如果用户已登陆也放行</span>        <span class="hljs-keyword">if</span>(session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>) != <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;        <span class="hljs-comment">// 用户没有登陆跳转到登陆页面</span>        request.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request, response);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;&#125;</code></pre></li><li><p>spring-mvc.xml配置拦截器</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">                           https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wen.controller&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--静态资源--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--关于拦截器的配置--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginInterceptor&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.interceptor.LoginInterceptor&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></li></ol><ol start="7"><li><p>applicationContext.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring/spring-mvc.xml&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></li><li><p>web.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--DispatcherServlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-comment">&lt;!--乱码过滤--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre></li><li><p>配置Tomcat，测试运行</p><p><img src="/images/%E6%8B%A6%E6%88%AA%E5%99%A8/image-20201221214936324.png" alt="image-20201221214936324"></p><p>点击登录：</p><p><img src="/images/%E6%8B%A6%E6%88%AA%E5%99%A8/image-20201221214950627.png" alt="image-20201221214950627"></p><p>点击成功页面：（此时还未登录）</p><p><img src="/images/%E6%8B%A6%E6%88%AA%E5%99%A8/image-20201221215037116.png" alt="image-20201221215037116"></p><p>登录：</p><p><img src="/images/%E6%8B%A6%E6%88%AA%E5%99%A8/image-20201221215104711.png" alt="image-20201221215104711"></p><p>再次点击成功页面，发现不会拦截了：</p><p><img src="/images/%E6%8B%A6%E6%88%AA%E5%99%A8/image-20201221215142064.png" alt="image-20201221215142064"></p><p>注销之后，session过期，再次点击成功页面还是会被拦截！</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ajax</title>
    <link href="/2020/12/18/Ajax/"/>
    <url>/2020/12/18/Ajax/</url>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/Crazyrw/SpringMVC">https://github.com/Crazyrw/SpringMVC</a>  springmvc-06-ajax子模块</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p><p>AJAX是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p><p><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></p><ul><li><p>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</p></li><li><p>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p></li><li><p>就和国内百度的搜索框一样!</p></li><li><p>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</p></li><li><p>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</p></li><li><p>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p></li></ul><h2 id="2-伪造Ajax"><a href="#2-伪造Ajax" class="headerlink" title="2. 伪造Ajax"></a>2. 伪造Ajax</h2><p>我们可以使用前端的一个标签来伪造一个ajax的样子。iframe标签</p><p>测试：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>kuangshen<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript">   <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">       <span class="hljs-keyword">var</span> myDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><span class="javascript">       <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;currentTime&#x27;</span>).innerText = myDate.getTime();</span>  &#125;;<span class="javascript">   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">LoadPage</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">       <span class="hljs-keyword">var</span> targetUrl =  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;url&#x27;</span>).value;</span><span class="javascript">       <span class="hljs-built_in">console</span>.log(targetUrl);</span><span class="javascript">       <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;iframePosition&quot;</span>).src = targetUrl;</span>  &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>请输入要加载的地址：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;currentTime&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>/&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;LoadPage()&quot;</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>加载页面位置：<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;iframePosition&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;height: 500px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>效果：</p><p><img src="/images/Ajax/image-20201218215203943.png" alt="image-20201218215203943"></p><p><strong>利用AJAX可以做：</strong></p><ul><li>注册时，输入用户名自动检测用户是否已经存在。</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li><li>….等等</li></ul><h2 id="3-JQuery-ajax"><a href="#3-JQuery-ajax" class="headerlink" title="3. JQuery.ajax"></a>3. JQuery.ajax</h2><p>纯JS原生实现Ajax这里就不写了，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的可以去了解下JS原生XMLHttpRequest ！</p><p>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</p><p>jQuery 提供多个与 AJAX 有关的方法。</p><p>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</p><p><strong>==jQuery 不是生产者，而是大自然搬运工。==</strong></p><p>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</p><pre><code class="hljs mipsasm"><span class="hljs-keyword">jQuery.ajax(...)</span><span class="hljs-keyword"></span>部分参数<span class="hljs-symbol">url:</span>请求地址type：请求方式，GET、POST（<span class="hljs-number">1</span>.<span class="hljs-number">9</span>.<span class="hljs-number">0</span>之后用method）headers：请求头data：要发送的数据    contentType：即将发送信息至服务器的内容编码类型(默认: <span class="hljs-string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>)    async：是否异步    timeout：设置请求超时时间（毫秒）    <span class="hljs-keyword">beforeSend：发送请求前执行的函数(全局)</span><span class="hljs-keyword"> </span>   complete：完成之后执行的回调函数(全局)    success：成功之后执行的回调函数(全局)    error：失败之后执行的回调函数(全局)    accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型    dataType：将服务器端返回的数据转换成指定类型    <span class="hljs-string">&quot;xml&quot;</span>: 将服务器端返回的内容转换成xml格式    <span class="hljs-string">&quot;text&quot;</span>: 将服务器端返回的内容转换成普通文本格式    <span class="hljs-string">&quot;html&quot;</span>: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含<span class="hljs-keyword">JavaScript标签，则会尝试去执行。</span><span class="hljs-keyword"> </span>   <span class="hljs-string">&quot;script&quot;</span>: 尝试将返回值当作<span class="hljs-keyword">JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><span class="hljs-keyword"> </span>   <span class="hljs-string">&quot;json&quot;</span>: 将服务器端返回的内容转换成相应的<span class="hljs-keyword">JavaScript对象</span><span class="hljs-keyword"> </span>   <span class="hljs-string">&quot;jsonp&quot;</span>: <span class="hljs-keyword">JSONP </span>格式使用 <span class="hljs-keyword">JSONP </span>形式调用函数时，如 <span class="hljs-string">&quot;myurl?callback=?&quot;</span> <span class="hljs-keyword">jQuery </span>将自动替换 ? 为正确的函数名，以执行回调函数</code></pre><p>测试：</p><p>使用最原始的HttpServletResponse处理——最简单，最通用</p><p>web.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--DispatcherServlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-comment">&lt;!--乱码过滤--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre><p>spring-mvc.xml  applicationContext.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;objectMapper&quot;</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;failOnEmptyBeans&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wen.controller&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><span class="hljs-comment">&lt;!--spring-mvc.xml--&gt;</span></code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring/spring-mvc.xml&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p>index.html</p><pre><code class="hljs html">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>$Title$<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    &lt;%--//百度压缩版引用地址:--%&gt;    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  &lt;%--onblur：失去焦点触发事件--%&gt;  用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txtName&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;a1()&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a1</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">      $.ajax(&#123;</span><span class="javascript">        url:<span class="hljs-string">&quot;/a1&quot;</span>,</span><span class="javascript">        data:&#123;<span class="hljs-string">&#x27;name&#x27;</span>:$(<span class="hljs-string">&quot;#txtName&quot;</span>).val()&#125;,</span><span class="javascript">        success:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data,status</span>) </span>&#123;</span>          alert(data);          alert(status);        &#125;      &#125;);    &#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>AjaxController.java</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AjaxController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping(&quot;/a1&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ajax1</span><span class="hljs-params">(String name , HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(name))&#123;            response.getWriter().print(<span class="hljs-string">&quot;true&quot;</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            response.getWriter().print(<span class="hljs-string">&quot;false&quot;</span>);        &#125;    &#125;&#125;</code></pre><p>测试运行：</p><p><img src="/images/Ajax/image-20201218222509652.png" alt="image-20201218222509652"></p><p><img src="/images/Ajax/image-20201218222532352.png" alt="image-20201218222532352"></p><p>springMVC实现</p><p>User类：</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.pojo;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;    <span class="hljs-keyword">private</span> String sex;&#125;</code></pre><p>AjaxController.java</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/a2&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">ajax2</span><span class="hljs-params">()</span></span>&#123;    List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆1号&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;男&quot;</span>));    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆2号&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;男&quot;</span>));    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆3号&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;男&quot;</span>));    <span class="hljs-keyword">return</span> list; <span class="hljs-comment">//由于@RestController注解，将list转成json格式返回</span>&#125;</code></pre><p>springmvc.html</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取数据&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;80%&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><span class="javascript">        $(<span class="hljs-string">&quot;#btn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><span class="javascript">            $.post(<span class="hljs-string">&quot;/a2&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;</span><span class="javascript">                <span class="hljs-built_in">console</span>.log(data)</span><span class="javascript">                <span class="hljs-keyword">var</span> html=<span class="hljs-string">&quot;&quot;</span>;</span><span class="javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;data.length ; i++) &#123;</span><span class="javascript">                    html+= <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span> +</span><span class="javascript">                        <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].name + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +</span><span class="javascript">                        <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].age + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +</span><span class="javascript">                        <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].sex + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +</span><span class="javascript">                        <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span></span>                &#125;<span class="javascript">                $(<span class="hljs-string">&quot;#content&quot;</span>).html(html);</span>            &#125;);        &#125;)    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>测试运行：<strong>成功实现了数据回显！可以体会一下Ajax的好处！</strong></p><p><img src="/images/Ajax/image-20201218224004347.png" alt="image-20201218224004347"></p><pre><code class="hljs arcade">对于$.ajax(),在官方API文档中是这么说的：jQuery 底层 AJAX 实现。简单易用的高层实现见 $.get, $.post 等。$.ajax() 返回其创建的 XMLHttpRequest 对象。大多数情况下你无需直接操作该函数，除非你需要操作不常用的选项，以获得更多的灵活性。最简单的情况下，$.ajax()可以不带任何参数直接使用。 而对于$.post(),官方API文档中是这么说的： 这是一个简单的 POST 请求功能以取代复杂 $.ajax 。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用 $.ajax。本文这两个方式可以理解为一个简单的，一个完整的，其中$.post()方法中的<span class="hljs-function"><span class="hljs-keyword">function</span>（）</span>&#123;&#125;只有当请求成功响应成功是才能执行该方法（可以理解为完整写法中succes：后的方法），如果需要在请求出错时执行函数，则只能使用 $.ajax（）</code></pre><h2 id="4-注册提示效果"><a href="#4-注册提示效果" class="headerlink" title="4. 注册提示效果"></a>4. 注册提示效果</h2><p>我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化.</p><p>controller:</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/a3&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">ajax3</span><span class="hljs-params">(String name,String pwd)</span></span>&#123;        String msg = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-comment">//模拟数据库中存在数据</span>        <span class="hljs-keyword">if</span>(name!=<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(name))&#123;                msg = <span class="hljs-string">&quot;OK&quot;</span>;            &#125;<span class="hljs-keyword">else</span> &#123;                msg = <span class="hljs-string">&quot;用户名输入错误&quot;</span>;            &#125;        &#125;        <span class="hljs-keyword">if</span> (pwd!=<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;123456&quot;</span>.equals(pwd))&#123;                msg = <span class="hljs-string">&quot;OK&quot;</span>;            &#125;<span class="hljs-keyword">else</span> &#123;                msg = <span class="hljs-string">&quot;密码输入有误&quot;</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> msg; <span class="hljs-comment">//由于@RestController注解，将msg转成json格式返回</span>    &#125;</code></pre><p>login.jsp</p><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;ajax&lt;/title&gt;    &lt;script src=&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;        <span class="hljs-function">function <span class="hljs-title">a1</span><span class="hljs-params">()</span></span>&#123;            $.ajax(&#123;                url:<span class="hljs-string">&quot;/a3&quot;</span>,                data:&#123;<span class="hljs-string">&#x27;name&#x27;</span>:$(<span class="hljs-string">&quot;#name&quot;</span>).val()&#125;,                success:function (data) &#123;                    <span class="hljs-keyword">if</span> (data.toString()==<span class="hljs-string">&#x27;OK&#x27;</span>)&#123;                        $(<span class="hljs-string">&quot;#userInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>);                    &#125;<span class="hljs-keyword">else</span> &#123;                        $(<span class="hljs-string">&quot;#userInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);                    &#125;                    $(<span class="hljs-string">&quot;#userInfo&quot;</span>).html(data);                &#125;            &#125;);        &#125;        <span class="hljs-function">function <span class="hljs-title">a2</span><span class="hljs-params">()</span></span>&#123;            $.ajax(&#123;                url:<span class="hljs-string">&quot;/a3&quot;</span>,                data:&#123;<span class="hljs-string">&#x27;pwd&#x27;</span>:$(<span class="hljs-string">&quot;#pwd&quot;</span>).val()&#125;,                success:function (data) &#123;                    <span class="hljs-keyword">if</span> (data.toString()==<span class="hljs-string">&#x27;OK&#x27;</span>)&#123;                        $(<span class="hljs-string">&quot;#pwdInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>);                    &#125;<span class="hljs-keyword">else</span> &#123;                        $(<span class="hljs-string">&quot;#pwdInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);                    &#125;                    $(<span class="hljs-string">&quot;#pwdInfo&quot;</span>).html(data);                &#125;            &#125;);        &#125;    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;    用户名:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;name&quot;</span> onblur=<span class="hljs-string">&quot;a1()&quot;</span>/&gt;    &lt;span id=&quot;userInfo&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    密码:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;pwd&quot;</span> onblur=<span class="hljs-string">&quot;a2()&quot;</span>/&gt;    &lt;span id=&quot;pwdInfo&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>关于返回数据乱码的问题，我们在之前就讲解过（JSON），也已经统一处理过了！</p><p><img src="/images/Ajax/image-20201219205424567.png" alt="image-20201219205424567"></p><h2 id="5-获取baidu接口的Demo"><a href="#5-获取baidu接口的Demo" class="headerlink" title="5. 获取baidu接口的Demo"></a>5. 获取baidu接口的Demo</h2><p>我没怎么看，有需要的可以看一下哈~</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JSONP百度搜索<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">        <span class="hljs-selector-id">#q</span>&#123;</span>            width: 500px;            height: 30px;<span class="css">            <span class="hljs-selector-tag">border</span><span class="hljs-selector-pseudo">:1px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#ddd</span>;</span>            line-height: 30px;            display: block;            margin: 0 auto;            padding: 0 10px;            font-size: 14px;        &#125;<span class="css">        <span class="hljs-selector-id">#ul</span>&#123;</span>            width: 520px;            list-style: none;            margin: 0 auto;            padding: 0;<span class="css">            <span class="hljs-selector-tag">border</span><span class="hljs-selector-pseudo">:1px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#ddd</span>;</span>            margin-top: -1px;            display: none;        &#125;<span class="css">        <span class="hljs-selector-id">#ul</span> <span class="hljs-selector-tag">li</span>&#123;</span>            line-height: 30px;            padding: 0 10px;        &#125;<span class="css">        <span class="hljs-selector-id">#ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><span class="css">            <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-id">#f60</span>;</span><span class="css">            <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#fff</span>;</span>        &#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-comment">// 2.步骤二</span></span><span class="javascript">        <span class="hljs-comment">// 定义demo函数 (分析接口、数据)</span></span><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params">data</span>)</span>&#123;</span><span class="javascript">            <span class="hljs-keyword">var</span> Ul = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;ul&#x27;</span>);</span><span class="javascript">            <span class="hljs-keyword">var</span> html = <span class="hljs-string">&#x27;&#x27;</span>;</span><span class="javascript">            <span class="hljs-comment">// 如果搜索数据存在 把内容添加进去</span></span><span class="javascript">            <span class="hljs-keyword">if</span> (data.s.length) &#123;</span><span class="javascript">                <span class="hljs-comment">// 隐藏掉的ul显示出来</span></span><span class="javascript">                Ul.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;</span><span class="javascript">                <span class="hljs-comment">// 搜索到的数据循环追加到li里</span></span><span class="javascript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;data.s.length;i++)&#123;</span><span class="javascript">                    html += <span class="hljs-string">&#x27;&lt;li&gt;&#x27;</span>+data.s[i]+<span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span>;</span>                &#125;<span class="javascript">                <span class="hljs-comment">// 循环的li写入ul</span></span>                Ul.innerHTML = html;            &#125;        &#125;<span class="javascript">        <span class="hljs-comment">// 1.步骤一</span></span><span class="javascript">        <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">            <span class="hljs-comment">// 获取输入框和ul</span></span><span class="javascript">            <span class="hljs-keyword">var</span> Q = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;q&#x27;</span>);</span><span class="javascript">            <span class="hljs-keyword">var</span> Ul = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;ul&#x27;</span>);</span><span class="javascript">            <span class="hljs-comment">// 事件鼠标抬起时候</span></span><span class="javascript">            Q.onkeyup = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                <span class="hljs-comment">// 如果输入框不等于空</span></span><span class="javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.value != <span class="hljs-string">&#x27;&#x27;</span>) &#123;</span><span class="javascript">                    <span class="hljs-comment">// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span></span><span class="javascript">                    <span class="hljs-comment">// 创建标签</span></span><span class="javascript">                    <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);</span><span class="javascript">                    <span class="hljs-comment">//给定要跨域的地址 赋值给src</span></span><span class="javascript">                    <span class="hljs-comment">//这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span></span><span class="javascript">                    script.src = <span class="hljs-string">&#x27;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=&#x27;</span>+<span class="hljs-built_in">this</span>.value+<span class="hljs-string">&#x27;&amp;cb=demo&#x27;</span>;</span><span class="javascript">                    <span class="hljs-comment">// 将组合好的带src的script标签追加到body里</span></span><span class="javascript">                    <span class="hljs-built_in">document</span>.body.appendChild(script);</span>                &#125;            &#125;        &#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;q&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ul&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Json交互处理</title>
    <link href="/2020/12/17/JSON/"/>
    <url>/2020/12/17/JSON/</url>
    
    <content type="html"><![CDATA[<p>该项目所在的地址：<a href="https://github.com/Crazyrw/SpringMVC">https://github.com/Crazyrw/SpringMVC</a> 其中的springmvc-05-json子模块。</p><h2 id="1-什么是JSON"><a href="#1-什么是JSON" class="headerlink" title="1. 什么是JSON"></a>1. 什么是JSON</h2><ul><li><p>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</p></li><li><p>它采用完全独立于编程语言的文本格式来存储和表示数据。</p></li><li><p>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</p></li><li><p>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p></li></ul><p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的<strong>键名写在前面并用双引号 “” 包裹</strong>，使用冒号 : 分隔，然后紧接着值：</p><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;QinJiang&quot;</span>&#125;&#123;<span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>&#125;&#123;<span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-string">&quot;男&quot;</span>&#125;</code></pre><p>很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p><p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p><pre><code class="hljs json">var obj = &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;; <span class="hljs-comment">//这是一个对象，注意键名也是可以使用引号包裹的</span>var json = &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;; <span class="hljs-comment">//这是一个 JSON 字符串，本质是一个字符串</span></code></pre><p><strong>JSON和JavaScript对象互转</strong></p><ul><li>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</li></ul><pre><code class="hljs q"><span class="hljs-built_in">var</span> obj = JSON.<span class="hljs-built_in">parse</span>(&#x27;&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-string">&quot;World&quot;</span>&#125;&#x27;);<span class="hljs-comment">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span></code></pre><ul><li>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</li></ul><pre><code class="hljs ada">var json = JSON.stringify(&#123;a: <span class="hljs-symbol">&#x27;Hello</span>&#x27;, b: <span class="hljs-symbol">&#x27;World</span>&#x27;&#125;);//结果是 &#x27;&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-string">&quot;World&quot;</span>&#125;&#x27;</code></pre><p><strong>代码测试：</strong></p><p>新建一个json1.html,编写如下代码：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-comment">//编写一个对象</span></span><span class="javascript">        <span class="hljs-keyword">var</span> user = &#123;</span><span class="javascript">          name:<span class="hljs-string">&quot;renwen&quot;</span>,</span>          age: 3,<span class="javascript">          sex:<span class="hljs-string">&quot;男&quot;</span></span>        &#125;;<span class="javascript">        <span class="hljs-comment">//js-&gt;json</span></span><span class="javascript">        <span class="hljs-keyword">var</span> str = <span class="hljs-built_in">JSON</span>.stringify(user);</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(str)</span><span class="javascript">        <span class="hljs-comment">//json-&gt;js</span></span><span class="javascript">        <span class="hljs-keyword">var</span> user2 = <span class="hljs-built_in">JSON</span>.parse(str)</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(user2.name, user2.age, user2.sex)</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>浏览器输出：</p><p><img src="/images/JSON/image-20201217204655292.png" alt="image-20201217204655292"></p><h2 id="2-Controller返回JSON数据"><a href="#2-Controller返回JSON数据" class="headerlink" title="2. Controller返回JSON数据"></a>2. Controller返回JSON数据</h2><p>Jackson应该是目前比较好的json解析工具了，当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p><p>我们这里使用Jackson，使用它需要导入它的jar包：</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--json的解析工具--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><ol><li>导入相关的依赖：pom.xml</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springmvc-05-json<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--json的解析工具--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><ol start="2"><li>创建项目基本的框架结构</li></ol><p><img src="/images/JSON/image-20201218190214172.png" alt="image-20201218190214172"></p><ol start="3"><li>创建applicationContext.xml、spring-mvc.xml（由于这一次我们不涉及service,mapper层，因此其他的我们就不创建了）</li></ol><p>spring-mvc.xml //注解驱动、扫描、视图解析</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wen.controller&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p>applicationContext.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring/spring-mvc.xml&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="4"><li>配置web.xml</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--DispatcherServlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-comment">&lt;!--乱码过滤--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre><ol start="5"><li>编写实体User，编写controller</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.pojo;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;    <span class="hljs-keyword">private</span> String sex;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.controller;<span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<span class="hljs-keyword">import</span> com.wen.pojo.User;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping(&quot;/json1&quot;)</span>    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;        <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();        <span class="hljs-comment">//创建一个对象</span>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆1号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);        <span class="hljs-comment">//将我们的对象解析成为json格式</span>        String str = mapper.writeValueAsString(user);        <span class="hljs-comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span>        <span class="hljs-keyword">return</span> str;    &#125;&#125;</code></pre><ol start="6"><li>配置Tomcat，测试运行</li></ol><p><img src="/images/JSON/image-20201218190545029.png" alt="image-20201218190545029"></p><p>出现了乱码！</p><p>解决方法：我们需要指定响应体的返回类型和编码：</p><pre><code class="hljs java"><span class="hljs-comment">//produces:指定响应体返回类型和编码</span><span class="hljs-meta">@RequestMapping(value = &quot;/json1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span></code></pre><p><img src="/images/JSON/image-20201218190710874.png" alt="image-20201218190710874"></p><p>重新测试运行：</p><p><img src="/images/JSON/image-20201218190757304.png" alt="image-20201218190757304"></p><p>==【注意：使用json记得处理乱码问题】==</p><h2 id="3-代码优化"><a href="#3-代码优化" class="headerlink" title="3. 代码优化"></a>3. 代码优化</h2><h3 id="3-1-乱码统一解决"><a href="#3-1-乱码统一解决" class="headerlink" title="3.1 乱码统一解决"></a>3.1 乱码统一解决</h3><p>上一节中，我们提到乱码问题，上一节的解决方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了！</p><p>我们可以在springmvc的配置文件上添加一段消息 ：StringHttpMessageConverter转换配置！（修改注解驱动那一行）</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;objectMapper&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;failOnEmptyBeans&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span></code></pre><p>注释掉指定响应体返回类型和编码，通过统一乱码处理，测试运行！</p><p><img src="/images/JSON/image-20201218192128395.png" alt="image-20201218192128395"></p><p><img src="/images/JSON/image-20201218192234056.png" alt="image-20201218192234056"></p><h3 id="3-2-返回json字符串统一解决"><a href="#3-2-返回json字符串统一解决" class="headerlink" title="3.2 返回json字符串统一解决"></a>3.2 返回json字符串统一解决</h3><p>在类上直接使用 <strong>@RestController</strong>，这样子，里面所有的方法都只会返回json字符串了，不用再每一个都添加@ResponseBody ！我们在前后端分离开发中，一般都使用 @RestController ，十分便捷！</p><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;    <span class="hljs-comment">//produces:指定响应体返回类型和编码</span>    <span class="hljs-meta">@RequestMapping(&quot;/json1&quot;)</span><span class="hljs-comment">//    @ResponseBody</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;        <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();        <span class="hljs-comment">//创建一个对象</span>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆1号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);        <span class="hljs-comment">//将我们的对象解析成为json格式</span>        String str = mapper.writeValueAsString(user);        <span class="hljs-comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span>        <span class="hljs-keyword">return</span> str;    &#125;&#125;</code></pre><p>注释掉@ReponseBody，使用@RestController，重启Tomcat测试运行！（正常输出）</p><p><img src="/images/JSON/image-20201218192457623.png" alt="image-20201218192457623"></p><h3 id="3-3-测试集合输出"><a href="#3-3-测试集合输出" class="headerlink" title="3.3 测试集合输出"></a>3.3 测试集合输出</h3><p>增加新方法：</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/json2&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;   <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span>   ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();   <span class="hljs-comment">//创建一个对象</span>   User user1 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆1号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);   User user2 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆2号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);   User user3 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆3号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);   User user4 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆4号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);   List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();   list.add(user1);   list.add(user2);   list.add(user3);   list.add(user4);   <span class="hljs-comment">//将我们的对象解析成为json格式</span>   String str = mapper.writeValueAsString(list);   <span class="hljs-keyword">return</span> str;&#125;</code></pre><p>测试运行：（正常输出）</p><p><img src="/images/JSON/image-20201218192702635.png" alt="image-20201218192702635"></p><h2 id="4-输出时间对象"><a href="#4-输出时间对象" class="headerlink" title="4. 输出时间对象"></a>4. 输出时间对象</h2><p>增加一个方法：</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/json3&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;   ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();   <span class="hljs-comment">//创建时间一个对象，java.util.Date</span>   Date date = <span class="hljs-keyword">new</span> Date();   <span class="hljs-comment">//将我们的对象解析成为json格式</span>   String str = mapper.writeValueAsString(date);   <span class="hljs-keyword">return</span> str;&#125;</code></pre><p>测试：</p><p><img src="/images/JSON/image-20201218192839032.png" alt="image-20201218192839032"></p><p>返回了一串数字，这个是时间的毫秒表示。Jackson 默认是会把时间转成timestamps形式。</p><p>解决方案：取消timestamps形式，自定义时间格式。</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/json4&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;    ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();    <span class="hljs-comment">//不使用时间戳的方式</span>    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="hljs-keyword">false</span>);    <span class="hljs-comment">//自定义日期格式对象</span>    SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);    <span class="hljs-comment">//指定日期格式</span>    mapper.setDateFormat(sdf);    Date date = <span class="hljs-keyword">new</span> Date();    String str = mapper.writeValueAsString(date);    <span class="hljs-keyword">return</span> str;&#125;</code></pre><p>测试输出：</p><p><img src="/images/JSON/image-20201218193152748.png" alt="image-20201218193152748"></p><p>如果不自定义日期格式，只是取消时间戳的方式，输出如下：</p><p><img src="/images/JSON/image-20201218193332598.png" alt="image-20201218193332598"></p><h3 id="4-1-抽取为工具类"><a href="#4-1-抽取为工具类" class="headerlink" title="4.1 抽取为工具类"></a>4.1 <strong>抽取为工具类</strong></h3><p><strong>如果要经常使用的话，这样是比较麻烦的，我们可以将这些代码封装到一个工具类中；我们去编写下</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.utils;<span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;<span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonUtils</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getJson</span><span class="hljs-params">(Object object)</span> </span>&#123;        <span class="hljs-keyword">return</span> getJson(object,<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getJson</span><span class="hljs-params">(Object object, String dateFormat)</span></span>&#123;        ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();        <span class="hljs-comment">//取消时间戳</span>        objectMapper.configure(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS, <span class="hljs-keyword">false</span>);        <span class="hljs-comment">//自定义时间格式对象</span>        SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(dateFormat);        <span class="hljs-comment">//指定格式</span>        objectMapper.setDateFormat(simpleDateFormat);        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">return</span> objectMapper.writeValueAsString(object);        &#125;<span class="hljs-keyword">catch</span> (JsonProcessingException e)&#123;            e.printStackTrace();        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/json4&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;    <span class="hljs-keyword">return</span> JsonUtils.getJson(<span class="hljs-keyword">new</span> Date());&#125;</code></pre><p>测试运行：</p><p><img src="/images/JSON/image-20201218194625598.png" alt="image-20201218194625598"></p><h2 id="5-FastJson（阿里）"><a href="#5-FastJson（阿里）" class="headerlink" title="5. FastJson（阿里）"></a>5. FastJson（阿里）</h2><p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法很多，最后的实现结果都是一样的。</p><p>fastjson 的 pom依赖！</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>fastjson 三个主要的类：</p><ol><li><p><strong>JSONObject:代表 json 对象</strong> </p><ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li></ul></li><li><p><strong>JSONArray:代表 json 对象数组</strong></p><ul><li>内部是有List接口中的方法来完成操作的。</li></ul></li><li><p><strong>JSON:代表JSONObject和JSONArray的转化</strong></p><ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li></ul></li></ol><p>代码测试，创建新类：<strong>FastJsonDemo</strong> </p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.utils;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<span class="hljs-keyword">import</span> com.wen.pojo.User;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastJsonDemo</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//创建一个对象</span>        User user1 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆1号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);        User user2 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆2号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);        User user3 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆3号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);        User user4 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆4号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);        List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();        list.add(user1);        list.add(user2);        list.add(user3);        list.add(user4);        System.out.println(<span class="hljs-string">&quot;*******Java对象 转 JSON字符串*******&quot;</span>);        String str1 = JSON.toJSONString(list);        System.out.println(<span class="hljs-string">&quot;JSON.toJSONString(list)==&gt;&quot;</span>+str1);        System.out.println(<span class="hljs-string">&quot;\n****** JSON字符串 转 Java对象*******&quot;</span>);        String str2 = JSON.toJSONString(user1);        User json_user1 = JSON.parseObject(str2, User.class);        System.out.println(<span class="hljs-string">&quot;JSON.parseObject(str2,User.class)==&gt;&quot;</span>+json_user1);        System.out.println(<span class="hljs-string">&quot;\n****** Java对象 转 JSON对象 ******&quot;</span>);        JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);        System.out.println(<span class="hljs-string">&quot;(JSONObject) JSON.toJSON(user2)==&gt;&quot;</span>+jsonObject1);        System.out.println(<span class="hljs-string">&quot;(JSONObject) JSON.toJSON(user2) name:==&gt;&quot;</span>+jsonObject1.getString(<span class="hljs-string">&quot;name&quot;</span>));        System.out.println(<span class="hljs-string">&quot;\n****** JSON对象 转 Java对象 ******&quot;</span>);        User jsonBean_user = JSON.toJavaObject(jsonObject1, User.class);        System.out.println(<span class="hljs-string">&quot;JSON.toJavaObject(jsonObject1, User.class)==&gt;&quot;</span>+jsonBean_user);    &#125;&#125;</code></pre><p>输出：</p><p><img src="/images/JSON/image-20201218195809757.png" alt="image-20201218195809757"></p><p>种工具类，我们只需要掌握使用就好了，在使用的时候在根据具体的业务去找对应的实现。和以前的commons-io那种工具包一样，拿来用就好了！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>idea上传项目到github</title>
    <link href="/2020/12/16/idea%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0github/"/>
    <url>/2020/12/16/idea%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0github/</url>
    
    <content type="html"><![CDATA[<ol><li>安装git, 在IDEA中设置Git，在File–&gt;Setting-&gt;Version Control–&gt;Git–&gt;Path to Git executable选择你的git安装后的git.exe文件。</li></ol><p><img src="/images/idea%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0github/image-20201216153123868.png" alt="image-20201216153123868"></p><ol start="2"><li>创建本地仓库</li></ol><p><img src="/images/idea%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0github/image-20201216153156728.png" alt="image-20201216153156728"></p><ol start="3"><li>上传项目到本地仓库，项目右键选择Git–&gt;add，此时项目文件变成绿色，此时文件只是处于暂存区，并没有真正进入到版本库中：</li></ol><p><img src="/images/idea%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0github/image-20201216153232590.png" alt="image-20201216153232590"></p><ol start="4"><li>右击工程文件 -&gt;git-&gt;commit,提交到本地git。至此，本地git已commit完毕，此时项目文件从暂存区真正进入版本库中，项目文件变成白色：</li></ol><p><img src="/images/idea%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0github/image-20201216153349861.png" alt="image-20201216153349861"></p><ol start="5"><li>上传项目到GitHub中，VCS–&gt;Import into Version Control–&gt;Share Project on GitHub，在弹框中输入仓库名和描述，点击Share，即可是上传，中间会弹窗输入GitHub的用户名和密码（已输入过用户名和密码并记住的不会再次弹框输入），上传成功后IDEA右下角会给出提示：</li></ol><p><img src="/images/idea%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0github/image-20201216153429666.png" alt="image-20201216153429666"></p><p><img src="/images/idea%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0github/image-20201216153509983.png" alt="image-20201216153509983"></p><p>填写新建github仓库的名称，填写描述信息，点击share即可。</p><ol start="6"><li>上传成功</li></ol><p><img src="/images/idea%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0github/image-20201216153607402.png" alt="image-20201216153607402"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>IDEA Tomcat报错</title>
    <link href="/2020/12/11/IDEA%20Tomcat%E6%8A%A5%E9%94%99/"/>
    <url>/2020/12/11/IDEA%20Tomcat%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<p>具体情况：</p><p>在IDEA中创建Maven项目，配置Tomcat,启动之后，出现如下情况：</p><img src="/images/IDEA Tomcat报错/image-20201211204015327.png" alt="image-20201211204015327" style="zoom:50%;" /><p>解决方法：</p><p>在设置Tomcat服务时，要将下面标注的内容设为空：</p><img src="/images/IDEA Tomcat报错/image-20201211204203434.png" alt="image-20201211204203434" style="zoom:50%;" /><img src="/images/IDEA Tomcat报错/image-20201211204223664.png" alt="image-20201211204223664" style="zoom:50%;" /><img src="/images/IDEA Tomcat报错/image-20201211204203434.png" alt="image-20201211204203434" style="zoom:50%;" /><img src="/images/IDEA Tomcat报错/image-20201211204223664.png" alt="image-20201211204223664" style="zoom:50%;" />]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>解决idea maven中新建文件没有JSP选项</title>
    <link href="/2020/12/11/%E8%A7%A3%E5%86%B3idea%20maven%E9%A1%B9%E7%9B%AE%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B2%A1%E6%9C%89JSP%E6%96%87%E4%BB%B6/"/>
    <url>/2020/12/11/%E8%A7%A3%E5%86%B3idea%20maven%E9%A1%B9%E7%9B%AE%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B2%A1%E6%9C%89JSP%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>这是我项目的基本结构：</p><img src="/images/解决idea maven项目新建文件中没有JSP文件/image-20201211201148763.png" alt="image-20201211201148763" style="zoom:50%;" /><p>我的需求是在SpringMVC-02-servlet模块中出现新建JSP选项。</p><p>解决方法：</p><img src="/images/解决idea maven项目新建文件中没有JSP文件/image-20201211201326337.png" alt="image-20201211201326337" style="zoom:50%;" /><p>点击你需要的模块或者整个项目，然后点击+号。</p><img src="/images/解决idea maven项目新建文件中没有JSP文件/image-20201211201405506.png" alt="image-20201211201405506" style="zoom:50%;" /><img src="/images/解决idea maven项目新建文件中没有JSP文件/image-20201211201507175.png" alt="image-20201211201507175" style="zoom:50%;" /><p>选择需要添加的目录。</p><img src="/images/解决idea maven项目新建文件中没有JSP文件/image-20201211201542190.png" alt="image-20201211201542190" style="zoom:50%;" /><img src="/images/解决idea maven项目新建文件中没有JSP文件/image-20201211201638306.png" alt="image-20201211201638306" style="zoom:50%;" /><img src="/images/解决idea maven项目新建文件中没有JSP文件/image-20201211201542190.png" alt="image-20201211201542190" style="zoom:50%;" /><p>OK, 成功解决。</p><img src="/images/解决idea maven项目新建文件中没有JSP文件/image-20201211201638306.png" alt="image-20201211201638306" style="zoom:50%;" />]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC</title>
    <link href="/2020/12/11/SpringMVC/"/>
    <url>/2020/12/11/SpringMVC/</url>
    
    <content type="html"><![CDATA[<p>（：如果有需要，大家可以关注狂神说公众号，我也是狂粉哈哈）</p><p>ssm = mybatis + Spring + SpringMVC <strong>MVC三层架构</strong></p><p>之后的学习计划：SpringMVC + Vue + SpringBoot + SpringCloud + Linux</p><p>Spring: IOC AOP(比较重要)</p><p>SpringMVC: SpringMVC的执行流程(比较重要)</p><p>该博客所创建的项目地址：<a href="https://github.com/Crazyrw/SpringMVC.git">https://github.com/Crazyrw/SpringMVC.git</a></p><h2 id="1-回顾MVC"><a href="#1-回顾MVC" class="headerlink" title="1. 回顾MVC"></a>1. 回顾MVC</h2><h3 id="1-1-什么是MVC"><a href="#1-1-什么是MVC" class="headerlink" title="1.1 什么是MVC"></a>1.1 什么是MVC</h3><ul><li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li><li>是将<strong>业务逻辑</strong>、<strong>数据</strong>、<strong>显示</strong>分离的方法来组织代码。</li><li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li><li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。不同的MVC存在差异。</li></ul><p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含==数据和行为==，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据==<strong>Dao</strong>==）和服务层（行为==<strong>Service</strong>==）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括==<strong>数据和业务</strong>==。</p><p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p>==<strong>Controller</strong>==（控制器）：**接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p><p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p><img src="/images/SpringMVC/image-20201211191701719.png" alt="image-20201211191701719" style="zoom:80%;" /><h3 id="1-2-Model1"><a href="#1-2-Model1" class="headerlink" title="1.2 Model1"></a>1.2 Model1</h3><ul><li>在web早期的开发中，通常采用的都是Model1。</li><li>Model1中，主要分为两层，==视图层和模型层。==</li></ul><img src="/images/SpringMVC/image-20201211192206489.png" alt="image-20201211192206489" style="zoom:80%;" /><p>Model1优点：架构简单，比较适合小型项目开发；</p><p>Model1缺点：JSP职责不单一，职责过重，不便于维护；</p><h3 id="1-3-Model2"><a href="#1-3-Model2" class="headerlink" title="1.3 Model2"></a>1.3 Model2</h3><p>Model2把一个项目分成三部分，包括==<strong>视图、控制、模型。</strong>==</p><p><img src="/images/SpringMVC/image-20201212192537382.png" alt="image-20201212192537382"></p><ol><li>用户发请求</li><li>Servlet接收请求数据，并调用对应的业务逻辑方法</li><li>业务处理完毕，返回更新后的数据给servlet</li><li>servlet转向到JSP，由JSP来渲染页面</li><li>响应给前端更新后的页面</li></ol><p><strong>职责分析：</strong></p><p><strong>Controller：控制器</strong></p><ol><li>取得表单数据</li><li>调用业务逻辑</li><li>转向指定的页面</li></ol><p><strong>Model：模型</strong></p><ol><li>业务逻辑</li><li>保存数据的状态</li></ol><p><strong>View：视图</strong></p><ol><li>显示页面</li></ol><p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model1模式的实现比较简单，适用于快速开发小规模项目，==Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起==，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p><h3 id="1-4-回顾Servlet"><a href="#1-4-回顾Servlet" class="headerlink" title="1.4 回顾Servlet"></a>1.4 回顾Servlet</h3><ol><li><p><strong>新建一个Maven工程当作父工程！pom依赖！</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre></li><li><p><strong>新建一个Moudle:SpringMVC-02-servlet,添加WebAPP的支持！</strong></p></li><li><p><strong>导入servlet和jsp的jar依赖</strong></p></li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><ol start="4"><li><strong>编写一个Servlet类，用来处理用户的请求</strong></li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.servlet;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HelloServlet</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">super</span>();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">//取得参数</span>        String method = req.getParameter(<span class="hljs-string">&quot;method&quot;</span>);        <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;add&quot;</span>))&#123;            req.getSession().setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;执行了add方法&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;delete&quot;</span>))&#123;            req.getSession().setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;执行了delete方法&quot;</span>);        &#125;        <span class="hljs-comment">//业务逻辑</span>        <span class="hljs-comment">//视图跳转</span>        req.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/hello.jsp&quot;</span>).forward(req,resp);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        doGet(req,resp);    &#125;&#125;</code></pre><ol start="5"><li><strong>编写hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</strong></li></ol><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Kuangshen&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;%--获取msg--%&gt;&lt;%=session.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>)%&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ol start="6"><li><strong>在web.xml中注册Servlet</strong></li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">web-app</span> <span class="hljs-meta-keyword">PUBLIC</span></span><span class="hljs-meta"> <span class="hljs-meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><span class="hljs-meta"> <span class="hljs-meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>Archetype Created Web Application<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><span class="hljs-comment">&lt;!--在web.xml中注册servlet--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.wen.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/user<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre><ol start="7"><li><strong>配置Tomcat，并启动测试</strong></li></ol><img src="/images/SpringMVC/image-20201211223600205.png" alt="image-20201211223600205" style="zoom:50%;" /><h2 id="2-什么是SpringMVC"><a href="#2-什么是SpringMVC" class="headerlink" title="2. 什么是SpringMVC"></a>2. 什么是SpringMVC</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>SpringMVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>官方文档：<a href="https://docs.spring.io/spring-framework/docs/4.3.24.RELEASE/spring-framework-reference/">https://docs.spring.io/spring-framework/docs/4.3.24.RELEASE/spring-framework-reference/</a></p><p> Spring MVC的特点：</p><ul><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ul><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [调度Servlet] 设计。</p><p>==DispatcherServlet的作用是将请求分发到不同的处理器。==从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p><p>正因为SpringMVC好，简单，便捷，易学，天生和Spring无缝集成(使用SpringIoC和Aop) ，使用约定优于配置。能够进行简单的junit测试。支持Restful风格。异常处理，本地化，国际化，数据验证，类型转换，拦截器等等……所以我们要学习。<strong>最重要的一点还是用的人多 , 使用的公司多 .</strong> </p><h3 id="2-2-中心控制器"><a href="#2-2-中心控制器" class="headerlink" title="2.2 中心控制器"></a>2.2 中心控制器</h3><p>Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p><p>Spring MVC框架像其他的MVC框架一样，以请求为驱动，围绕一个中心Servlet分配请求及提供其他功能，DispatcherServlet是一个实际的Servlet,它继承HttpServlet基类。</p><p><img src="/images/SpringMVC/image-20201212191843914.png" alt="image-20201212191843914"></p><p><strong>SpringMVC的原理：</strong></p><p><img src="/images/SpringMVC/mvc.png" alt="mvc"></p><p><img src="/images/SpringMVC/640" alt="图片"></p><p>发起请求，当请求被前置的控制器拦截到时，根据请求参数生成代理请求，找到请求对应的实际控制器，【控制器处理请求，调用业务对象，创建数据模型，访问数据库，将模型响应给中心控制器，】控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><h3 id="2-3-SpringMVC执行原理"><a href="#2-3-SpringMVC执行原理" class="headerlink" title="2.3 SpringMVC执行原理"></a>2.3 SpringMVC执行原理</h3><p><img src="/images/SpringMVC/image-20201212192824766.png" alt="image-20201212192824766"></p><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p><p><strong>分析流程：</strong></p><ol><li><p>DispatcherServlet表示前端控制器，是整个SpringMVC的控制中心。</p><p>用户发出请求，DispatcherServlet接受请求并拦截请求。</p><p>我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></p><p>url分为三部分：</p><p> <a href="http://localhost:8080：服务器域名">http://localhost:8080：服务器域名</a></p><p>SpringMVC: 部署在服务器上的web站点</p><p>hello：表示控制器</p><p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p></li><li><p>HandlerMapping为处理器映射。DispatcherServlet自行调用HandlerMapping，==HandlerMapping根据请求url查找Handler。==</p></li><li><p>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</p></li><li><p>HandlerExecution将解析后的信息传递给==DispatcherServlet==,如解析控制器映射等。</p></li><li><p>HandlerAdapter表示<strong>处理器适配器</strong>，其按照特定的规则去执行Handler。</p></li><li><p>Handler让具体的Controller执行。</p></li><li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p></li><li><p>HandlerAdapter将视图逻辑名或模型传递给==DispatcherServlet==。</p></li><li><p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</p></li><li><p>视图解析器将解析的逻辑视图名传给==DispatcherServlet==。</p></li><li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p></li><li><p>最终视图呈现给用户。</p></li></ol><h2 id="3-第一个MVC程序"><a href="#3-第一个MVC程序" class="headerlink" title="3. 第一个MVC程序"></a>3. 第一个MVC程序</h2><h3 id="3-1-配置版"><a href="#3-1-配置版" class="headerlink" title="3.1 配置版"></a>3.1 配置版</h3><p>==我们先写出整个过程，之后再对整个执行流程进行理解！==</p><ol><li><strong>创建一个module，并添加web支持！</strong></li></ol><p><img src="/images/SpringMVC/image-20201213194158352.png" alt="image-20201213194158352"></p><p>（web Application）</p><ol start="2"><li><strong>配置web.xml</strong></li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--1.注册DispatcherServlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-comment">&lt;!--启动级别-1--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span>    <span class="hljs-comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre><ol start="3"><li><strong>确定导入了SpringMVC的依赖</strong></li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><ol start="4"><li><strong>编写springmvc-servlet.xml</strong></li></ol><p><img src="/images/SpringMVC/image-20201213200613926.png" alt="image-20201213200613926"></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="5"><li><strong>添加  处理映射器</strong></li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></code></pre><ol start="6"><li><strong>添加 处理器适配器</strong></li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></code></pre><ol start="7"><li><strong>添加 视图解析器</strong></li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--前缀--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--后缀--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><ol start="8"><li><strong>编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</strong></li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.controller;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.Controller;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-comment">//注意：这里我们先导入Controller接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">//ModelAndView 模型和视图</span>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();        <span class="hljs-comment">//封装对象，放在ModelAndView中。Model</span>        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;HelloSpringMVC!&quot;</span>);        <span class="hljs-comment">//封装要跳转的视图，放在ModelAndView中</span>        mv.setViewName(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">//: /WEB-INF/jsp/hello.jsp</span>        <span class="hljs-keyword">return</span> mv;    &#125;&#125;</code></pre><ol start="9"><li><strong>将自己的类交给SpringIOC容器，注册bean</strong></li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Handler--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;/hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.controller.HelloController&quot;</span>/&gt;</span></code></pre><ol start="10"><li><strong>写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</strong></li></ol><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Wen&lt;/title&gt;&lt;/head&gt;&lt;body&gt;$&#123;msg&#125;&lt;/body&gt;&lt;/html&gt;</code></pre><ol start="11"><li><strong>配置Tomcat 启动测试！</strong></li></ol><p><img src="/images/SpringMVC/image-20201213201444811.png" alt="image-20201213201444811"></p><p><img src="/images/SpringMVC/image-20201213201505995.png" alt="image-20201213201505995"></p><p><img src="/images/SpringMVC/image-20201213201521670.png" alt="image-20201213201521670"></p><p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p><ol><li>查看控制台输出，看一下是不是缺少了什么jar包。</li><li>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！</li><li>重启Tomcat 即可解决！</li></ol><p>我出现的问题，就是jar存在，却无法使用，解决方法如下：</p><p><img src="/images/SpringMVC/image-20201213201614299.png" alt="image-20201213201614299"></p><p><strong>当前情况如下：</strong></p><p><img src="/images/SpringMVC/image-20201213201641654.png" alt="image-20201213201641654"></p><p><strong>我们需要新建一个lib文件夹，并将jar加入其中！</strong></p><p><img src="/images/SpringMVC/image-20201213201721971.png" alt="image-20201213201721971"></p><p><img src="/images/SpringMVC/image-20201213201738915.png" alt="image-20201213201738915"></p><p><img src="/images/SpringMVC/image-20201213201754463.png" alt="image-20201213201754463"></p><p><img src="/images/SpringMVC/image-20201213201805261.png" alt="image-20201213201805261"></p><p><img src="/images/SpringMVC/image-20201213201812124.png" alt="image-20201213201812124"></p><p>点击OK ，然后重启Tomcat即可！</p><p><img src="/images/SpringMVC/image-20201213201917339.png" alt="image-20201213201917339"></p><p>==最后结合2.3节，对SpringMVC的执行原理进行分析。==</p><p>大致分为三个部分，</p><p>1）DispatcherServlet调用HandlerMapping处理器映射，根据url查找Handler,HandlerExecution查找控制器，并将解析后的信息传递给DispatcherServlet。</p><p><img src="/images/SpringMVC/image-20201213211614091.png" alt="image-20201213211614091"></p><p>说白了，就是在springmvc-servlet.xml中查找bean的过程。</p><p><img src="/images/SpringMVC/image-20201213211243630.png" alt="image-20201213211243630"></p><p>2）DispatcherServlet调用HandlerAdapter处理器适配器，按照特定的规则去执行Handler。Handler让具体的Controller执行。Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p><p><img src="/images/SpringMVC/image-20201213211632284.png" alt="image-20201213211632284"></p><p>就执行下面这个方法。</p><p><img src="/images/SpringMVC/image-20201213211418250.png" alt="image-20201213211418250"></p><p>3）DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。视图解析器将解析的逻辑视图名传给DispatcherServlet。DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图，最终呈现给用户。</p><p><img src="/images/SpringMVC/image-20201213211527288.png" alt="image-20201213211527288"></p><p>根据视图解析器得到/WEB-INF/jsp/hello.jsp,然后调用具体视图，呈现，</p><p><img src="/images/SpringMVC/image-20201213211758946.png" alt="image-20201213211758946"></p><p>大致过程如下，自己理解哈（画的有点丑。。）</p><p><img src="/images/SpringMVC/image-20201213212618629.png" alt="image-20201213212618629"></p><p>解释一个点：</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span><span class="hljs-comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre><h3 id="3-2-注解版"><a href="#3-2-注解版" class="headerlink" title="3.2 注解版"></a>3.2 注解版</h3><ol><li><strong>新建一个Module，springmvc-03-hello-annotation。添加web支持。</strong></li></ol><img src="/images/SpringMVC/image-20201213220622511.png" alt="image-20201213220622511" style="zoom:50%;" /><ol start="2"><li><p><strong>由于Maven可能存在资源过滤的问题，我们将配置完善</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>           <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>           <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre></li></ol><ol start="3"><li><p><strong>在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等。</strong></p></li><li><p><strong>配置web.xml</strong></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--1.注册servlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre><p><strong>/ 和 /* 的区别：</strong></p><p>&lt; url-pattern &gt; / &lt;/ url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。</p><p>&lt; url-pattern &gt; /* &lt;/ url-pattern &gt; 会匹配 *.jsp，会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。</p><ul><li>注意web.xml版本问题，要最新版！</li><li>注册DispatcherServlet</li><li>关联SpringMVC的配置文件</li><li>启动级别为1</li><li>映射路径为 / 【不要用/*，会404】</li></ul></li><li><p><strong>添加Spring MVC配置文件  springmvc-servlet.xml</strong>  </p><p>在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wen.controller&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">    支持mvc注解驱动</span><span class="hljs-comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span><span class="hljs-comment">        要想使@RequestMapping注解生效</span><span class="hljs-comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span><span class="hljs-comment">        和一个AnnotationMethodHandlerAdapter实例</span><span class="hljs-comment">        这两个实例分别在类级别和方法级别处理。</span><span class="hljs-comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span><span class="hljs-comment">     --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><span class="hljs-tag">          <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。</p><ul><li>让IOC的注解生效</li><li>静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …..</li><li>MVC的注解驱动</li><li>配置视图解析器</li></ul></li><li><p><strong>创建Controller</strong></p><p>编写HelloController。</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/HelloController&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-comment">//真实访问地址 : 项目名/HelloController/hello</span>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(Model model)</span></span>&#123;        <span class="hljs-comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello,SpringMVC&quot;</span>);        <span class="hljs-comment">//web-inf/jsp/hello.jsp</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;    &#125;&#125;</code></pre><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li><li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是**/HelloController/hello**；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp。</li></ul></li><li><p><strong>创建视图层</strong></p><p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；</p><p>可以通过EL表示取出Model中存放的值，或者对象；</p><pre><code class="hljs xml">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Wen<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>$&#123;msg&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></li><li><p><strong>配置Tomcat运行</strong></p><p>配置Tomcat ，  开启服务器 ， 访问 对应的请求路径！</p><p><img src="/images/SpringMVC/image-20201213223349420.png" alt="image-20201213223349420"></p><p><img src="/images/SpringMVC/image-20201213223426273.png" alt="image-20201213223426273"></p><p><img src="/images/SpringMVC/image-20201213223319634.png" alt="image-20201213223319634"></p></li></ol><p><strong>OK,成功了！</strong></p><h3 id="3-3-小结"><a href="#3-3-小结" class="headerlink" title="3.3 小结"></a>3.3 小结</h3><p>实现步骤其实非常的简单：</p><ol><li>新建一个web项目</li><li>导入相关jar包</li><li>编写web.xml , 注册DispatcherServlet</li><li>编写springmvc配置文件</li><li>接下来就是去创建对应的控制类 , controller</li><li>最后完善前端视图和controller之间的对应</li><li>测试运行调试.</li></ol><p>==使用springMVC必须配置的三大件：==</p><p>==<strong>处理器映射器、处理器适配器、视图解析器</strong>==</p><p>==通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置==</p><h2 id="4-RestFul和控制器"><a href="#4-RestFul和控制器" class="headerlink" title="4. RestFul和控制器"></a>4. RestFul和控制器</h2><h3 id="4-1-Controller控制器"><a href="#4-1-Controller控制器" class="headerlink" title="4.1 Controller控制器"></a>4.1 Controller控制器</h3><ul><li>控制器复杂提供访问应用程序的行为，通常通过<strong>接口定义</strong>或注<strong>解定义</strong>两种方法实现。</li><li><strong>控制器负责解析用户的请求并将其转换为一个模型。</strong></li><li>在Spring MVC中一个控制器类可以包含多个方法</li><li>在Spring MVC中，对于Controller的配置方式有很多种</li></ul><h4 id="4-1-1-实现Controller接口"><a href="#4-1-1-实现Controller接口" class="headerlink" title="4.1.1 实现Controller接口"></a>4.1.1 <strong>实现Controller接口</strong></h4><p>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</p><pre><code class="hljs java"><span class="hljs-comment">//实现该接口的类获得控制器功能</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Controller</span> </span>&#123;   <span class="hljs-comment">//处理请求且返回一个模型(数据)与视图对象</span>   <span class="hljs-function">ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest var1,HttpServletResponse var2)</span> <span class="hljs-keyword">throws</span> Exception</span>;&#125;</code></pre><p><strong>测试：</strong></p><ol><li>编写一个TestController类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.controller;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.Controller;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">//返回一个模型视图对象</span>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;Test1Controller&quot;</span>);        mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);        <span class="hljs-keyword">return</span> mv;    &#125;&#125;</code></pre><ol start="2"><li>去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;/test&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.controller.TestController&quot;</span>/&gt;</span></code></pre><ol start="3"><li>编写test.jsp</li></ol><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;$&#123;msg&#125;&lt;/body&gt;&lt;/html&gt;</code></pre><ol start="4"><li>配置Tomcat运行测试，我这里没有项目发布名配置的就是一个/，所以请求不用加项目名，OK！</li></ol><p><img src="/images/SpringMVC/image-20201214143353792.png" alt="image-20201214143353792"></p><p><strong>说明：</strong></p><ul><li>实现接口Controller定义控制器是较老的办法</li><li><strong>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</strong>🙃</li></ul><h4 id="4-1-2注解-Controller"><a href="#4-1-2注解-Controller" class="headerlink" title="4.1.2注解@Controller"></a>4.1.2注解@Controller</h4><ul><li>@Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</li><li>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</li></ul><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wen.controller&quot;</span>/&gt;</span></code></pre><ul><li>使用注解实现的类HelloController，如下：</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-comment">//真实访问地址 : 项目名/HelloController/hello</span>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(Model model)</span></span>&#123;        <span class="hljs-comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello,,,,SpringMVC&quot;</span>);        <span class="hljs-comment">//WEB-INF/jsp/hello.jsp</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;    &#125;&#125;</code></pre><ul><li>配置Tomcat运行测试</li></ul><p><img src="/images/SpringMVC/image-20201214143856104.png" alt="image-20201214143856104"></p><p><strong>注解方式是平时使用的最多的方式！</strong></p><h3 id="4-2-RequestMapping"><a href="#4-2-RequestMapping" class="headerlink" title="4.2 RequestMapping"></a>4.2 RequestMapping</h3><p><strong>@RequestMapping</strong></p><p>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p><p><strong>测试：</strong></p><ol><li>控制器类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/HelloController&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-comment">//真实访问地址 : 项目名/HelloController/hello</span>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(Model model)</span></span>&#123;        <span class="hljs-comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello,,,,SpringMVC&quot;</span>);        <span class="hljs-comment">//WEB-INF/jsp/hello.jsp</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;    &#125;&#125;</code></pre><ol start="2"><li>配置Tomcat，测试运行！</li></ol><p><img src="/images/SpringMVC/image-20201214144738354.png" alt="image-20201214144738354"></p><h3 id="4-3-RestFul-风格"><a href="#4-3-RestFul-风格" class="headerlink" title="4.3 RestFul 风格"></a>4.3 RestFul 风格</h3><p><strong>概念：</strong></p><p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>功能</strong></p><ul><li><p>资源：互联网所有的事物都可以被抽象为资源</p></li><li><p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</p></li><li><p>分别对应 添加、 删除、修改、查询。</p></li></ul><p><strong>传统方式操作资源</strong>  ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p><p>​    <a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</p><p>​    <a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a> 新增,POST</p><p>​    <a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a> 更新,POST</p><p>​    <a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</p><p><strong>使用RESTful操作资源</strong> ：可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p><p>​    <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 查询,GET</p><p>​    <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 新增,POST</p><p>​    <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 更新,PUT</p><p>​    <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 删除,DELETE</p><p><strong>测试：</strong></p><ol><li>新建一个类 RestFulController</li></ol><p>在Spring MVC中可以使用  @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>&#123;    <span class="hljs-comment">//映射访问路径</span>    <span class="hljs-meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p1, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p2, Model model)</span></span>&#123;        <span class="hljs-keyword">int</span> result = p1+p2;        <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;结果：&quot;</span>+result);        <span class="hljs-comment">//返回视图位置</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;    &#125;&#125;</code></pre><ol start="2"><li>配置Tomcat，测试运行！</li></ol><p><img src="/images/SpringMVC/image-20201214145652051.png" alt="image-20201214145652051"></p><p><strong>使用路径变量的好处是什么呢？</strong></p><ul><li>使路径变得更加简洁；</li><li>获得参数更加方便，框架会自动进行类型转换。</li><li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是/commit/1/a，则路径与方法不匹配，而不会是参数转换失败。</li></ul><p><img src="/images/SpringMVC/image-20201214145813382.png" alt="image-20201214145813382"></p><p><strong>使用method属性指定请求类型</strong></p><p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p><p><strong>测试：</strong></p><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>&#123;    <span class="hljs-comment">//映射访问路径</span>    <span class="hljs-meta">@RequestMapping(value = &quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;, method = &#123;RequestMethod.POST&#125;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p1, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p2, Model model)</span></span>&#123;        <span class="hljs-keyword">int</span> result = p1+p2;        <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;结果：&quot;</span>+result);        <span class="hljs-comment">//返回视图位置</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;    &#125;&#125;</code></pre><p>我们使用浏览器地址栏进行访问默认是Get请求，会报错405：</p><p><img src="/images/SpringMVC/image-20201214150344806.png" alt="image-20201214150344806"></p><p>如果将POST修改为GET则正常了；</p><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>&#123;    <span class="hljs-comment">//映射访问路径</span>    <span class="hljs-meta">@RequestMapping(value = &quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;, method = &#123;RequestMethod.GET&#125;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p1, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p2, Model model)</span></span>&#123;        <span class="hljs-keyword">int</span> result = p1+p2;        <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;结果：&quot;</span>+result);        <span class="hljs-comment">//返回视图位置</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;    &#125;&#125;</code></pre><p><img src="/images/SpringMVC/image-20201214150437305.png" alt="image-20201214150437305"></p><p><strong>小结：</strong></p><p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p><p>==<strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong>==</p><p>方法级别的注解变体有如下几个：组合注解</p><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span><span class="hljs-meta">@PostMapping</span><span class="hljs-meta">@PutMapping</span><span class="hljs-meta">@DeleteMapping</span><span class="hljs-meta">@PatchMapping</span></code></pre><p><strong>@GetMapping 是一个组合注解，平时使用的会比较多！</strong></p><p><strong>它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。</strong></p><h2 id="5-数据处理及跳转"><a href="#5-数据处理及跳转" class="headerlink" title="5 数据处理及跳转"></a>5 数据处理及跳转</h2><h3 id="5-1-结果跳转方式"><a href="#5-1-结果跳转方式" class="headerlink" title="5.1 结果跳转方式"></a>5.1 结果跳转方式</h3><h4 id="5-1-1-ModelAndView"><a href="#5-1-1-ModelAndView" class="headerlink" title="5.1.1 ModelAndView"></a>5.1.1 <strong>ModelAndView</strong></h4><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面。</p><p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><span class="hljs-tag">      <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><p>对应的controller类:</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;   <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;       <span class="hljs-comment">//返回一个模型视图对象</span>       ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();       mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;ControllerTest1&quot;</span>);       mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);       <span class="hljs-keyword">return</span> mv;  &#125;&#125;</code></pre><h4 id="5-1-2-ServletAPI"><a href="#5-1-2-ServletAPI" class="headerlink" title="5.1.2 ServletAPI"></a>5.1.2 ServletAPI</h4><p>通过设置ServletAPI , 不需要视图解析器。</p><ol><li><p>通过HttpServletResponse进行<strong>输出</strong></p></li><li><p>通过HttpServletResponse实现<strong>重定向</strong></p></li><li><p>通过HttpServletResponse实现<strong>转发</strong></p></li><li><p>输出</p></li></ol><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/HelloController&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping(&quot;/result/t1&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        rsp.getWriter().println(<span class="hljs-string">&quot;Hello,Spring BY servlet API&quot;</span>);    &#125;&#125;</code></pre><p><img src="/images/SpringMVC/image-20201214161746013.png" alt="image-20201214161746013"></p><ol start="2"><li>重定向</li></ol><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/result/t2&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;    rsp.sendRedirect(<span class="hljs-string">&quot;/index.jsp&quot;</span>);&#125;</code></pre><p><img src="/images/SpringMVC/image-20201214162027838.png" alt="image-20201214162027838"></p><ol start="3"><li>转发</li></ol><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/result/t3&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;    <span class="hljs-comment">//转发</span>    req.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;/result/t3&quot;</span>);    req.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/hello.jsp&quot;</span>).forward(req,rsp);&#125;</code></pre><p><img src="/images/SpringMVC/image-20201214162214516.png" alt="image-20201214162214516"></p><h4 id="5-1-3-SpringMVC"><a href="#5-1-3-SpringMVC" class="headerlink" title="5.1.3 SpringMVC"></a>5.1.3 SpringMVC</h4><ol><li><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器</strong></li></ol><p><strong>测试前，需要将视图解析器注释掉</strong></p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/rsm/t1&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">//转发</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/index.jsp&quot;</span>;&#125;<span class="hljs-meta">@RequestMapping(&quot;/rsm/t2&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">//转发二</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/index.jsp&quot;</span>;&#125;<span class="hljs-meta">@RequestMapping(&quot;/rsm/t3&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">//重定向</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;&#125;</code></pre><p><img src="/images/SpringMVC/image-20201214162623299.png" alt="image-20201214162623299"></p><p><img src="/images/SpringMVC/image-20201214162633361.png" alt="image-20201214162633361"></p><p><img src="/images/SpringMVC/image-20201214162644498.png" alt="image-20201214162644498"></p><ol start="2"><li><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器</strong></li></ol><p>转发：</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">//转发</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;&#125;</code></pre><p><img src="/images/SpringMVC/image-20201214163212064.png" alt="image-20201214163212064"></p><p>重定向：</p><p><strong>需要注意的是，重定向不需要视图解析器，本质就是重新请求一个新地方，所以需要注意路径问题！</strong></p><p>正确代码如下：</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">//重定向</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;    <span class="hljs-comment">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求/</span>&#125;</code></pre><p><img src="/images/SpringMVC/image-20201214163340393.png" alt="image-20201214163340393"></p><p>如果路径写错，如下面所示：</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">//重定向</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index&quot;</span>;    <span class="hljs-comment">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求/</span>&#125;</code></pre><p><img src="/images/SpringMVC/image-20201214163419832.png" alt="image-20201214163419832"></p><p>会显示找不到该路径。</p><h3 id="5-2-数据处理"><a href="#5-2-数据处理" class="headerlink" title="5.2 数据处理"></a>5.2 数据处理</h3><h4 id="5-2-1-处理提交数据"><a href="#5-2-1-处理提交数据" class="headerlink" title="5.2.1 处理提交数据"></a>5.2.1 处理提交数据</h4><ol><li><strong>提交的域名称和处理方法的参数名一致</strong></li></ol><p>提交数据 : <a href="http://localhost:8080/hello?name=kuangshen">http://localhost:8080/hello?name=kuangshen</a></p><p>处理方法 :</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(String name)</span></span>&#123;   System.out.println(name);   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;&#125;</code></pre><p>后台输出 : kuangshen</p><ol start="2"><li><strong>提交的域名称和处理方法的参数名不一致</strong></li></ol><p>提交数据 : <a href="http://localhost:8080/hello?username=kuangshen">http://localhost:8080/hello?username=kuangshen</a></p><p>处理方法 :</p><pre><code class="hljs java"><span class="hljs-comment">//@RequestParam(&quot;username&quot;) : username提交的域的名称 .</span><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;   System.out.println(name);   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;&#125;</code></pre><p>后台输出 : kuangshen</p><ol start="3"><li><strong>提交的是一个对象</strong></li></ol><p>要求提交的表单域和对象的属性名一致,参数使用对象即可.</p><ol><li>实体类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;   <span class="hljs-keyword">private</span> String name;   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;   <span class="hljs-comment">//构造</span>   <span class="hljs-comment">//get/set</span>   <span class="hljs-comment">//tostring()</span>&#125;</code></pre><ol start="2"><li><p>提交数据 : <a href="http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15">http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15</a></p></li><li><p>处理方法 :</p></li></ol><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">user</span><span class="hljs-params">(User user)</span></span>&#123;   System.out.println(user);   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;&#125;</code></pre><p>后台输出 : User{id=1, name=’kuangshen’, age=15}</p><p>说明：如果使用对象的话，<strong>前端传递的参数名和对象的属性名必须一致</strong>，否则就是null。</p><h4 id="5-2-2-数据显示到前端"><a href="#5-2-2-数据显示到前端" class="headerlink" title="5.2.2 数据显示到前端"></a>5.2.2 数据显示到前端</h4><ol><li><strong>通过ModelAndView</strong></li></ol><p>我们前面一直都是如此 . 就不过多解释</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;   <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;       <span class="hljs-comment">//返回一个模型视图对象</span>       ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();       mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;ControllerTest1&quot;</span>);       mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);       <span class="hljs-keyword">return</span> mv;  &#125;&#125;</code></pre><ol start="2"><li><strong>通过ModelMap</strong></li></ol><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/modelMap&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name, ModelMap model)</span></span>&#123;    <span class="hljs-comment">//封装要显示到视图中的数据</span>    <span class="hljs-comment">//相当于req.setAttribute(&quot;name&quot;,name);</span>    model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>,name);    System.out.println(name);    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;&#125;</code></pre><p><img src="/images/SpringMVC/image-20201214164550465.png" alt="image-20201214164550465"></p><ol start="3"><li><strong>通过Model</strong></li></ol><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(Model model)</span></span>&#123;    <span class="hljs-comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span>    model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello,,,,SpringMVC&quot;</span>);    <span class="hljs-comment">//WEB-INF/jsp/hello.jsp</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;&#125;</code></pre><p><img src="/images/SpringMVC/image-20201214164731139.png" alt="image-20201214164731139"></p><p><strong>三种方式的对比：</strong></p><p>就对于新手而言简单来说使用区别就是：</p><ul><li><p>Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；</p></li><li><p>ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</p></li><li><p>ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</p></li></ul><h4 id="5-2-3-乱码问题"><a href="#5-2-3-乱码问题" class="headerlink" title="5.2.3 乱码问题"></a>5.2.3 乱码问题</h4><p>测试场景：</p><ol><li>index.jsp</li></ol><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;  &lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;form action=<span class="hljs-string">&quot;/HelloController/e/t&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;      &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;      &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;    &lt;/form&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><ol start="2"><li>Controller</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/HelloController&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;    &#125;    <span class="hljs-meta">@RequestMapping(&quot;/e/t&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name, ModelMap model)</span></span>&#123;        <span class="hljs-comment">//封装要显示到视图中的数据</span>        <span class="hljs-comment">//相当于req.setAttribute(&quot;name&quot;,name);</span>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,name);        System.out.println(name);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;    &#125;&#125;</code></pre><ol start="3"><li>hello.jsp</li></ol><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Wen&lt;/title&gt;&lt;/head&gt;&lt;body&gt;$&#123;msg&#125;&lt;/body&gt;&lt;/html&gt;</code></pre><ol start="4"><li>配置Tomcat，运行测试</li></ol><p><img src="/images/SpringMVC/image-20201214171936519.png" alt="image-20201214171936519"></p><p>出现乱码问题！</p><p>不得不说，乱码问题是在我们开发中十分常见的问题，也是让我们程序猿比较头大的问题！</p><p>以前乱码问题通过过滤器解决，而SpringMVC给我们提供了一个过滤器，可以在web.xml中配置。</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span></code></pre><p>修改了xml文件需要重启服务器！</p><p><img src="/images/SpringMVC/image-20201214172202869.png" alt="image-20201214172202869"></p><p>OK，正常显示了！</p><p>但是我们发现，有些极端情况下，这个过滤器对get的支持不好。</p><p><strong>处理方法：</strong></p><ol><li>修改tomcat配置文件 ：设置编码！</li></ol><p>-Dfile.encoding=UTF-8</p><p><img src="/images/SpringMVC/image-20201214173105422.png" alt="image-20201214173105422"></p><p>如果只是设置Tomcat编码，页面跳转时，还是会出现乱码。<strong>最好定义下面的自定义过滤器。</strong></p><ol start="2"><li>自定义过滤器</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.utils;<span class="hljs-keyword">import</span> javax.servlet.*;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 解决get和post请求 全部乱码的过滤器</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;        <span class="hljs-comment">//处理response的字符编码</span>        HttpServletResponse myResponse=(HttpServletResponse) response;        myResponse.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);        <span class="hljs-comment">// 转型为与协议相关对象</span>        HttpServletRequest httpServletRequest = (HttpServletRequest) request;        <span class="hljs-comment">// 对request包装增强</span>        HttpServletRequest myrequest = <span class="hljs-keyword">new</span> MyRequest(httpServletRequest);        chain.doFilter(myrequest, response);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;    &#125;&#125;<span class="hljs-comment">//自定义request对象，HttpServletRequest的包装类</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServletRequestWrapper</span> </span>&#123;    <span class="hljs-keyword">private</span> HttpServletRequest request;    <span class="hljs-comment">//是否编码的标记</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> hasEncode;    <span class="hljs-comment">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyRequest</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;        <span class="hljs-keyword">super</span>(request);<span class="hljs-comment">// super必须写</span>        <span class="hljs-keyword">this</span>.request = request;    &#125;    <span class="hljs-comment">// 对需要增强方法 进行覆盖</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">getParameterMap</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// 先获得请求方式</span>        String method = request.getMethod();        <span class="hljs-keyword">if</span> (method.equalsIgnoreCase(<span class="hljs-string">&quot;post&quot;</span>)) &#123;            <span class="hljs-comment">// post请求</span>            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-comment">// 处理post乱码</span>                request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);                <span class="hljs-keyword">return</span> request.getParameterMap();            &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;                e.printStackTrace();            &#125;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equalsIgnoreCase(<span class="hljs-string">&quot;get&quot;</span>)) &#123;            <span class="hljs-comment">// get请求</span>            Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();            <span class="hljs-keyword">if</span> (!hasEncode) &#123; <span class="hljs-comment">// 确保get手动编码逻辑只运行一次</span>                <span class="hljs-keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;                    String[] values = parameterMap.get(parameterName);                    <span class="hljs-keyword">if</span> (values != <span class="hljs-keyword">null</span>) &#123;                        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values.length; i++) &#123;                            <span class="hljs-keyword">try</span> &#123;                                <span class="hljs-comment">// 处理get乱码</span>                                values[i] = <span class="hljs-keyword">new</span> String(values[i]                                        .getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>), <span class="hljs-string">&quot;utf-8&quot;</span>);                            &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;                                e.printStackTrace();                            &#125;                        &#125;                    &#125;                &#125;                hasEncode = <span class="hljs-keyword">true</span>;            &#125;            <span class="hljs-keyword">return</span> parameterMap;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getParameterMap();    &#125;    <span class="hljs-comment">//取一个值</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getParameter</span><span class="hljs-params">(String name)</span> </span>&#123;        Map&lt;String, String[]&gt; parameterMap = getParameterMap();        String[] values = parameterMap.get(name);        <span class="hljs-keyword">if</span> (values == <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> values[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 取回参数的第一个值</span>    &#125;    <span class="hljs-comment">//取所有值</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String[] getParameterValues(String name) &#123;        Map&lt;String, String[]&gt; parameterMap = getParameterMap();        String[] values = parameterMap.get(name);        <span class="hljs-keyword">return</span> values;    &#125;&#125;</code></pre><p>修改web.xml文件。</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.wen.utils.GenericEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span></code></pre><p><img src="/images/SpringMVC/image-20201214173315307.png" alt="image-20201214173315307"></p><p><strong>乱码问题，需要平时多注意，在尽可能能设置编码的地方，都设置为统一编码 UTF-8！</strong></p><h2 id="6-整合SSM框架"><a href="#6-整合SSM框架" class="headerlink" title="6 整合SSM框架"></a>6 整合SSM框架</h2><h3 id="6-1-大致过程"><a href="#6-1-大致过程" class="headerlink" title="6.1 大致过程"></a>6.1 大致过程</h3><p>依赖：junit 数据库驱动 连接池 servlet jsp mybatis spring-mybatis spring-webmvc spring-jdbc lombok aop</p><ol><li><p>准备好数据库环境</p></li><li><p>基本环境的搭建:导包、添加web支持、添加maven的资源过滤</p></li><li><p>创建项目的基本结构 </p><ul><li>com.wem.pojo controller service mapper utils</li><li>database.properties（数据库配置文件）</li><li>applicationContext.xml（spring的核心配置文件）</li><li>mybatis-config.xml（mybatis的核心配置文件）</li><li>spring-mapper.xml（spring整合mybatis）</li><li>spring-service.xml（spring整合service）</li><li>spring-mvc.xml（spring整合controller）</li></ul></li><li><p>mybatis层的编写</p></li></ol><ul><li>database.properties</li><li>IDEA关联数据库</li><li>编写mybatis-config.xml  一般只写pojo包的别名和扫描包</li><li>编写pojo  使用lombok</li><li>编写mapper接口</li><li>编写mapper.xml</li></ul><ol start="5"><li>service层的编写</li></ol><ul><li>编写service接口 以及实现类</li></ul><ol start="6"><li>spring层</li></ol><ul><li><p>整合mybatis </p><ul><li>spring-mapper.xml</li></ul><ol><li>关联数据库文件</li><li>数据库连接池</li><li>配置SqlSessionFactory对象</li><li>实现mapper接口注入到spring容器（之前我们写了一个utils类，现在可以通过配置动态实现）  com.wen.mapper</li></ol></li><li><p>整合service</p><ul><li>spring-service.xml</li></ul><ol><li>扫描service相关的bean  com.wen.service 注解代替：@Service</li><li>实现类serviceImpl注入到IOC容器中 注解代替：@Autowired</li><li>配置事务管理器-&gt;注入数据库连接池</li></ol></li></ul><ol start="7"><li>springMVC层</li></ol><ul><li><p>编写web.xml</p><ul><li>DispatcherServlet</li><li>乱码过滤</li></ul></li><li><p>spring-mvc.xml</p><ul><li>开启SpringMVC注解驱动 @Controller @RequestMapping</li><li>静态资源默认servlet配置</li><li>配置jsp 显示ViewResolver视图解析器</li><li>扫描web相关的bean com.wen.controller</li></ul></li><li><p>applicationContext.xml</p><p>import三个文件:spring-mapper.xml  spring-service.xml  spring-mvc.xml</p></li></ul><ol start="8"><li><p>Controller类的编写</p></li><li><p>视图层的编写</p></li><li><p>配置Tomcat，测试运行</p></li></ol><h3 id="6-2-搭建的具体过程"><a href="#6-2-搭建的具体过程" class="headerlink" title="6.2 搭建的具体过程"></a>6.2 搭建的具体过程</h3><ol><li>准备好数据库环境</li></ol><p>创建表：</p><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-string">`ssmbuild`</span>;<span class="hljs-keyword">USE</span> <span class="hljs-string">`ssmbuild`</span>;<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`books`</span>;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`books`</span> (<span class="hljs-string">`bookID`</span> <span class="hljs-built_in">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;书id&#x27;</span>,<span class="hljs-string">`bookName`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;书名&#x27;</span>,<span class="hljs-string">`bookCounts`</span> <span class="hljs-built_in">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;数量&#x27;</span>,<span class="hljs-string">`detail`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;描述&#x27;</span>,<span class="hljs-keyword">KEY</span> <span class="hljs-string">`bookID`</span> (<span class="hljs-string">`bookID`</span>)) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">INNODB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8<span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">INTO</span> <span class="hljs-string">`books`</span>(<span class="hljs-string">`bookID`</span>,<span class="hljs-string">`bookName`</span>,<span class="hljs-string">`bookCounts`</span>,<span class="hljs-string">`detail`</span>)<span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;Java&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;从入门到放弃&#x27;</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;MySQL&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;从删库到跑路&#x27;</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;Linux&#x27;</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;从进门到进牢&#x27;</span>);</code></pre><ol start="2"><li>导入依赖（pom.xml）</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-comment">&lt;!--Junit--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--数据库驱动--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 数据库连接池 注意版本一定要匹配--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mchange-commons-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.2.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--Servlet - JSP --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--Mybatis--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--Spring--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-comment">&lt;!--之前导入不进去，有可能是因为版本太高了吧--&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><p>注意有时会出现包已经添加，但是却显示不存在，解决方法是：创建lib文件夹，并且将所有的包导进去！</p><p><img src="/images/SpringMVC/image-20201215224329627.png" alt="image-20201215224329627"></p><ol start="3"><li>添加web支持</li></ol><p><img src="/images/SpringMVC/image-20201215222031121.png" alt="image-20201215222031121"></p><ol start="3"><li>添加maven资源过滤(pom.xml)</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><ol start="4"><li>创建项目的基本结构</li></ol><p><img src="/images/SpringMVC/image-20201215222303156.png" alt="image-20201215222303156"></p><ol start="5"><li><p>mybatis层的编写</p><ul><li>database.properties(最好加上前缀，不然name username这种有可能报错)</li></ul><pre><code class="hljs properties"><span class="hljs-meta">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssmbuild?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true</span><span class="hljs-meta">jdbc.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">645645aa</span></code></pre><ul><li>IDEA关联数据库</li></ul><p><img src="/images/SpringMVC/image-20201215222441903.png" alt="image-20201215222441903"></p><ul><li>编写mybatis-config.xml(mybatis核心配置文件)  一般只写pojo包的别名和扫描包</li></ul><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.wen.pojo&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/wen/mapper/BookMapper.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><ul><li>编写pojo 使用lombok插件</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.pojo;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Books</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> bookID;    <span class="hljs-keyword">private</span> String bookName;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> bookCounts;    <span class="hljs-keyword">private</span> String detail;&#125;</code></pre><ul><li>编写mapper接口</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.mapper;<span class="hljs-keyword">import</span> com.wen.pojo.Books;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookMapper</span> </span>&#123;    <span class="hljs-comment">//增加一个Book</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Books book)</span></span>;    <span class="hljs-comment">//根据id删除一个Book</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;    <span class="hljs-comment">//更新Book</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span></span>;    <span class="hljs-comment">//根据id查询,返回一个Book</span>    <span class="hljs-function">Books <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;    <span class="hljs-comment">//查询全部Book,返回list集合</span>    <span class="hljs-function">List&lt;Books&gt; <span class="hljs-title">queryAllBook</span><span class="hljs-params">()</span></span>;&#125;</code></pre><ul><li>编写mapper.xml(存放在resources中)</li></ul><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wen.mapper.BookMapper&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--增加一个Book--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addBook&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span>      insert into books(bookName,bookCounts,detail)      values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)   <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>    <span class="hljs-comment">&lt;!--根据id删除一个Book--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteBookById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span>      delete from books where bookID=#&#123;bookID&#125;   <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span>    <span class="hljs-comment">&lt;!--更新Book--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBook&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span>      update books      set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;      where bookID = #&#123;bookID&#125;   <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span>    <span class="hljs-comment">&lt;!--根据id查询,返回一个Book--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBookById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span>      select * from books      where bookID = #&#123;bookID&#125;   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-comment">&lt;!--查询全部Book--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryAllBook&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span>      SELECT * from books   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><p><img src="/images/SpringMVC/image-20201215222718071.png" alt="image-20201215222718071"></p></li><li><p>service层的编写</p></li></ol><p>编写service接口 以及实现类</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.service;<span class="hljs-keyword">import</span> com.wen.pojo.Books;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">//BookService:底下需要去实现,调用mapper层</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookService</span> </span>&#123;    <span class="hljs-comment">//增加一个Book</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Books book)</span></span>;    <span class="hljs-comment">//根据id删除一个Book</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;    <span class="hljs-comment">//更新Book</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span></span>;    <span class="hljs-comment">//根据id查询,返回一个Book</span>    <span class="hljs-function">Books <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;    <span class="hljs-comment">//查询全部Book,返回list集合</span>    <span class="hljs-function">List&lt;Books&gt; <span class="hljs-title">queryAllBook</span><span class="hljs-params">()</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.service;<span class="hljs-keyword">import</span> com.wen.mapper.BookMapper;<span class="hljs-keyword">import</span> com.wen.pojo.Books;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookService</span> </span>&#123;    <span class="hljs-comment">//调用mapper层的操作，设置一个set接口，方便Spring管理</span>    <span class="hljs-keyword">private</span> BookMapper bookMapper;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBookMapper</span><span class="hljs-params">(BookMapper bookMapper)</span> </span>&#123;        <span class="hljs-keyword">this</span>.bookMapper = bookMapper;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Books book)</span> </span>&#123;        <span class="hljs-keyword">return</span> bookMapper.addBook(book);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        <span class="hljs-keyword">return</span> bookMapper.deleteBookById(id);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span> </span>&#123;        <span class="hljs-keyword">return</span> bookMapper.updateBook(books);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Books <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        <span class="hljs-keyword">return</span> bookMapper.queryBookById(id);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Books&gt; <span class="hljs-title">queryAllBook</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> bookMapper.queryAllBook();    &#125;&#125;</code></pre><p><img src="/images/SpringMVC/image-20201215222827376.png" alt="image-20201215222827376"></p><ol start="7"><li><p>spring层</p><ul><li>整合mybatis spring-mapper.xml</li></ul><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--1. 关联数据库文件--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:database.properties&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--2. 数据库连接池--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!-- 关闭连接后不自动commit --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoCommitOnClose&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!-- 获取连接超时时间 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkoutTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10000&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireRetryAttempts&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--3. 配置SqlSessionFactory对象--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 注入sqlSessionFactory 这里注入用的是value 不是ref--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!-- 给出需要扫描mapper接口包 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.wen.mapper&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ul><li>整合service   spring-service.xml</li></ul><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 1. 扫描service相关的bean --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wen.service&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--2. BookServiceImpl注入到IOC容器中--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BookServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.service.BookServiceImpl&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookMapper&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookMapper&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--文件必须在一个applicationContext下--&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--3. 配置事务管理器-&gt;注入数据库连接池--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></li><li><p>springMVC层</p><ul><li>web.xml</li></ul><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--DispatcherServlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-comment">&lt;!--乱码--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span>    <span class="hljs-comment">&lt;!--Session过期时间--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre><ul><li>spring-mvc.xml</li></ul><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--1. 开启SpringMVC注解驱动 @Controller @RequestMapping--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span>    <span class="hljs-comment">&lt;!--3. 配置jsp 显示ViewResolver视图解析器--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--4. 扫描web相关的bean com.wen.controller--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wen.controller&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ul><li>applicationContext.xml</li></ul><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring/spring-mapper.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring/spring-service.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring/spring-mvc.xml&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p>==需要注意一点，这几个文件必须在一个context下，不然会报错，会出现引用找不到的情况！==</p><p><img src="/images/SpringMVC/image-20201215223355170.png" alt="image-20201215223355170"></p></li><li><p>controller类的编写</p></li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.controller;<span class="hljs-keyword">import</span> com.wen.pojo.Books;<span class="hljs-keyword">import</span> com.wen.service.BookService;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-meta">@Qualifier(&quot;BookServiceImpl&quot;)</span>    <span class="hljs-keyword">private</span> BookService bookService;    <span class="hljs-meta">@RequestMapping(&quot;/allBook&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">list</span><span class="hljs-params">(Model model)</span> </span>&#123;        List&lt;Books&gt; list = bookService.queryAllBook();        <span class="hljs-keyword">for</span> (Books books : list) &#123;            System.out.println(books.getBookName());        &#125;        model.addAttribute(<span class="hljs-string">&quot;list&quot;</span>, list);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;allBook&quot;</span>;    &#125;    <span class="hljs-meta">@RequestMapping(&quot;/toAddBook&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toAddPaper</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;addBook&quot;</span>;    &#125;    <span class="hljs-meta">@RequestMapping(&quot;/addBook&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addPaper</span><span class="hljs-params">(Books books)</span> </span>&#123;        System.out.println(books);        bookService.addBook(books);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;    &#125;    <span class="hljs-meta">@RequestMapping(&quot;/toUpdateBook&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toUpdateBook</span><span class="hljs-params">(Model model, <span class="hljs-keyword">int</span> id)</span> </span>&#123;        Books books = bookService.queryBookById(id);        System.out.println(books);        model.addAttribute(<span class="hljs-string">&quot;book&quot;</span>,books );        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;updateBook&quot;</span>;    &#125;    <span class="hljs-meta">@RequestMapping(&quot;/updateBook&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateBook</span><span class="hljs-params">(Model model, Books book)</span> </span>&#123;        System.out.println(book);        bookService.updateBook(book);        Books books = bookService.queryBookById(book.getBookID());        model.addAttribute(<span class="hljs-string">&quot;books&quot;</span>, books);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;    &#125;    <span class="hljs-meta">@RequestMapping(&quot;/del/&#123;bookId&#125;&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteBook</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;bookId&quot;)</span> <span class="hljs-keyword">int</span> id)</span> </span>&#123;        bookService.deleteBookById(id);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;    &#125;&#125;</code></pre><ol start="10"><li>视图层</li></ol><p>addBook.jsp</p><pre><code class="hljs jsp">&lt;%--  Created by IntelliJ IDEA.  User: <span class="hljs-number">20964</span>  Date: <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">15</span>  Time: <span class="hljs-number">9</span>:<span class="hljs-number">41</span>  To change <span class="hljs-keyword">this</span> template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;新增书籍&lt;/title&gt;    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;    &lt;!-- 引入 Bootstrap --&gt;    &lt;link href=<span class="hljs-string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;&lt;/head&gt;&lt;body&gt;&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;                &lt;h1&gt;                    &lt;small&gt;新增书籍&lt;/small&gt;                &lt;/h1&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/addBook&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;        书籍名称：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookName&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;        书籍数量：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookCounts&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;        书籍详情：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;detail&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;添加&quot;</span>&gt;    &lt;/form&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>allBook.jsp</p><p>&lt;%@ taglib prefix=”c” uri=”<a href="http://java.sun.com/jsp/jstl/core&quot;">http://java.sun.com/jsp/jstl/core&quot;</a> %&gt;==这个必须加上，不然不会显示所有的书籍，不能循环显示。==</p><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;书籍列表&lt;/title&gt;    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;    &lt;!-- 引入 Bootstrap --&gt;    &lt;link href=<span class="hljs-string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;&lt;/head&gt;&lt;body&gt;&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;                &lt;h1&gt;                    &lt;small&gt;书籍列表 —— 显示所有书籍&lt;/small&gt;                &lt;/h1&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;row&quot;</span>&gt;        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-md-4 column&quot;</span>&gt;            &lt;a class=&quot;btn btn-primary&quot; href=&quot;$&#123;pageContext.request.contextPath&#125;/book/toAddBook&quot;&gt;新增&lt;/a&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;            &lt;table <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;table table-hover table-striped&quot;</span>&gt;                &lt;thead&gt;                &lt;tr&gt;                    &lt;th&gt;书籍编号&lt;/th&gt;                    &lt;th&gt;书籍名字&lt;/th&gt;                    &lt;th&gt;书籍数量&lt;/th&gt;                    &lt;th&gt;书籍详情&lt;/th&gt;                    &lt;th&gt;操作&lt;/th&gt;                &lt;/tr&gt;                &lt;/thead&gt;                &lt;tbody&gt;                &lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;book&quot;</span> items=<span class="hljs-string">&quot;$&#123;requestScope.get(&#x27;list&#x27;)&#125;&quot;</span>&gt;                    &lt;tr&gt;                        &lt;td&gt;$&#123;book.getBookID()&#125;&lt;/td&gt;                        &lt;td&gt;$&#123;book.getBookName()&#125;&lt;/td&gt;                        &lt;td&gt;$&#123;book.getBookCounts()&#125;&lt;/td&gt;                        &lt;td&gt;$&#123;book.getDetail()&#125;&lt;/td&gt;                        &lt;td&gt;                            &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.getBookID()&#125;&quot;&gt;更改&lt;/a&gt; |                            &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/del/$&#123;book.getBookID()&#125;&quot;&gt;删除&lt;/a&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                &lt;/c:forEach&gt;                &lt;/tbody&gt;            &lt;/table&gt;        &lt;/div&gt;    &lt;/div&gt;    $&#123;list.get(<span class="hljs-number">1</span>)&#125;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>updateBook.jsp</p><pre><code class="hljs jsp">&lt;%--  Created by IntelliJ IDEA.  User: <span class="hljs-number">20964</span>  Date: <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">15</span>  Time: <span class="hljs-number">9</span>:<span class="hljs-number">42</span>  To change <span class="hljs-keyword">this</span> template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;修改信息&lt;/title&gt;    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;    &lt;!-- 引入 Bootstrap --&gt;    &lt;link href=<span class="hljs-string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;&lt;/head&gt;&lt;body&gt;&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;                &lt;h1&gt;                    &lt;small&gt;修改信息&lt;/small&gt;                &lt;/h1&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBook&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;        &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;bookID&quot;</span> value=<span class="hljs-string">&quot;$&#123;book.getBookID()&#125;&quot;</span>/&gt;        书籍名称：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookName&quot;</span> value=<span class="hljs-string">&quot;$&#123;book.getBookName()&#125;&quot;</span>/&gt;        书籍数量：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;bookCounts&quot;</span> value=<span class="hljs-string">&quot;$&#123;book.getBookCounts()&#125;&quot;</span>/&gt;        书籍详情：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;detail&quot;</span> value=<span class="hljs-string">&quot;$&#123;book.getDetail() &#125;&quot;</span>/&gt;        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>/&gt;    &lt;/form&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ol start="11"><li>配置Tomcat，测试运行</li></ol><p><img src="/images/SpringMVC/image-20201215223809342.png" alt="image-20201215223809342"></p><p><img src="/images/SpringMVC/image-20201215223846170.png" alt="image-20201215223846170"></p><p><img src="/images/SpringMVC/image-20201215223901515.png" alt="image-20201215223901515"></p><p><img src="/images/SpringMVC/image-20201215223952388.png" alt="image-20201215223952388"></p><p>所有逻辑经过测试都能够正常运行！！</p><img src="/images/SpringMVC/image-20201215224045736.png" alt="image-20201215224045736" style="zoom:50%;" /><p>整个项目的github地址：<a href="https://github.com/Crazyrw/ssm.git">https://github.com/Crazyrw/ssm.git</a></p><h3 id="6-3-遇到的问题"><a href="#6-3-遇到的问题" class="headerlink" title="6.3 遇到的问题"></a>6.3 遇到的问题</h3><ol><li><p>java.sql.SQLExce1ption: Access denied for user ‘20964’@’localhost’ (using password: YES). </p><p>查看database.properties中的数据库名称有没有错误以及username最好不要单独写，最好写jdbc.username</p></li><li><p>java.lang.AbstractMethodError: Method com/mchange/v2/c3p0/impl/NewProxyResultSet.isClosed()Z is abstract</p><ul><li>com.mchange-c3p0 和 mchange-commons-java两个的依赖都必须导入</li><li>自行百度版本兼容问题，如果之前版本不对，一定要clean一下，并且检查<strong>lib文件夹中的jar是否正确！！</strong></li></ul></li><li><p>当遇到找不到找不到类的情况，记得考虑一下是不是lib的问题</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Typora数学符号大全</title>
    <link href="/2020/12/08/Typora%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/"/>
    <url>/2020/12/08/Typora%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/Typora%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/image-20201208090455419.png" alt="image-20201208090455419"></p><p><img src="/images/Typora%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/image-20201208090509897.png" alt="image-20201208090509897"></p><p><img src="/images/Typora%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/image-20201208090536704.png" alt="image-20201208090536704"></p><p><img src="/images/Typora%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/image-20201208090736722.png" alt="image-20201208090736722"></p><p><img src="/images/Typora%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/image-20201208090749373.png" alt="image-20201208090749373"></p><p><img src="/images/Typora%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/image-20201208090804451.png" alt="image-20201208090804451"></p><p><img src="/images/Typora%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/image-20201208090823996.png" alt="image-20201208090823996"></p><p><img src="/images/Typora%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/image-20201208090836949.png" alt="image-20201208090836949"></p><p><img src="/images/Typora%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/image-20201208090855679.png" alt="image-20201208090855679"></p><p><img src="/images/Typora%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/image-20201208090907095.png" alt="image-20201208090907095"></p><p><img src="/images/Typora%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/image-20201208090915377.png" alt="image-20201208090915377"></p><p><img src="/images/Typora%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/image-20201208090927563.png" alt="image-20201208090927563"></p><p><img src="/images/Typora%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/image-20201208090936528.png" alt="image-20201208090936528"></p><p><img src="/images/Typora%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/image-20201208090949159.png" alt="image-20201208090949159"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo添加一言或Rainbow</title>
    <link href="/2020/11/28/Hexo%E6%B7%BB%E5%8A%A0%E4%B8%80%E8%A8%80%E6%88%96Rainbow/"/>
    <url>/2020/11/28/Hexo%E6%B7%BB%E5%8A%A0%E4%B8%80%E8%A8%80%E6%88%96Rainbow/</url>
    
    <content type="html"><![CDATA[<h2 id="1-添加一言"><a href="#1-添加一言" class="headerlink" title="1. 添加一言"></a>1. 添加一言</h2><p>添加一言可以参考另一篇文章。</p><p>地址：<a href="https://pxxyyz.com/posts/30454/">https://pxxyyz.com/posts/30454/</a></p><h2 id="2-添加Rainbow"><a href="#2-添加Rainbow" class="headerlink" title="2.添加Rainbow"></a>2.添加Rainbow</h2><p>参考文档：<a href="https://rainbow.eatrice.top/About">https://rainbow.eatrice.top/About</a></p><p>首先，进行如下配置：这个是blog目录下的_config.yml文件</p><p><img src="/images/Hexo%E6%B7%BB%E5%8A%A0%E4%B8%80%E8%A8%80%E6%88%96Rainbow/image-20201128153713586.png" alt="image-20201128153713586"></p><p>然后，修改layout.ejs</p><p><img src="/images/Hexo%E6%B7%BB%E5%8A%A0%E4%B8%80%E8%A8%80%E6%88%96Rainbow/image-20201128153849837.png" alt="image-20201128153849837"></p><p>在<span>下面添加如下内容：</p><p><img src="/images/Hexo%E6%B7%BB%E5%8A%A0%E4%B8%80%E8%A8%80%E6%88%96Rainbow/image-20201128153936020.png" alt="image-20201128153936020"></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rainbow&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;&#x27;</span>&gt;</span>🌈 获取中...<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">fetch(<span class="hljs-string">&#x27;https://api.eatrice.top&#x27;</span>)</span><span class="javascript">  .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.json())</span><span class="javascript">  .then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><span class="javascript">    <span class="hljs-keyword">var</span> rainbow = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;rainbow&#x27;</span>);</span>    rainbow.innerHTML = data.Content;<span class="javascript">    rainbow.href = <span class="hljs-string">&quot;https://rainbow.eatrice.top/?ID=&quot;</span> + data.ID;</span>  &#125;)<span class="javascript">  .catch(<span class="hljs-built_in">console</span>.error)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>最后，提交到github，就可以看到效果啦！</p><p><img src="/images/Hexo%E6%B7%BB%E5%8A%A0%E4%B8%80%E8%A8%80%E6%88%96Rainbow/image-20201128154045441.png" alt="image-20201128154045441"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo和Typora的结合使用</title>
    <link href="/2020/11/28/Hexo%E5%92%8CTypora%E7%9A%84%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/11/28/Hexo%E5%92%8CTypora%E7%9A%84%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>搭建好Hexo博客之后，该怎么写博客呢？这时候，Typora登场了，这是一款免费简易没广告的markdown编辑器了。</p><p>其实，两者结合使用只需要设置好图片的保存路径就可以了。</p><p>我们都知道所有的博客文件都保存在/_post/文件夹下。</p><p><img src="/images/Hexo%E5%92%8CTypora%E7%9A%84%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8/image-20201128152214573.png" alt="image-20201128152214573"></p><p>我们需要在blog/source下，创建一个与_post同级的文件夹images文件夹，用于存放博客对应的图片。</p><p><img src="/images/Hexo%E5%92%8CTypora%E7%9A%84%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8/image-20201128152343888.png" alt="image-20201128152343888"></p><p>下面来对Typora进行设置。</p><p>打开Typora的文件&gt;偏好配置。</p><p><img src="/images/Hexo%E5%92%8CTypora%E7%9A%84%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8/image-20201128152545253.png" alt="image-20201128152545253"></p><p>这样的话所有的博客中的图片都将会保存到 <code>/source/images/该博客md文件名/图片名称</code>。</p><p>但是仅仅这样设置还不够，这样设置在typora中倒是能看图片了，但是使用的却是相对于当前md文件的相对路径，可是如果启动hexo，是要用服务器访问的，而服务器显然无法根据这个相对路径正确访问到图片，因此还需要在typora中进行进一步设置。</p><p>每次编写博客时，需要进行设置。在typora菜单栏点击 <code>格式-&gt;图像-&gt;设置图片根目录</code>，将<code>blog/source</code>作为其根目录即可。</p><p><strong>一定要先设置了图片根目录后再插入图片，否则图片路径会不正确！</strong></p><p>除此之外，还需要设置下面两个选项：</p><p><img src="/images/Hexo%E5%92%8CTypora%E7%9A%84%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8/image-20201128152748662.png" alt="image-20201128152748662"></p><p><strong>title时必须设置的，不然hexo没办法识别博客的名称！！</strong></p><p>写完博客之后，可以使用以下三个命令进行提交到github。</p><pre><code class="hljs bash">hexo chexo ghexo d</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建Hexo博客</title>
    <link href="/2020/11/28/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/11/28/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>转载于：转载：<a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&amp;seid=929421542723130144">https://www.bilibili.com/video/BV1Yb411a7ty?from=search&amp;seid=929421542723130144</a></p><h2 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1. 安装node.js"></a>1. 安装node.js</h2><p>首先安装Node.js，可以自行百度搜索</p><p>e.g.</p><p>下载地址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p><p>根据自己电脑系统及位数选择，我这里选择<code>windows64位.msi</code>格式安装包。</p><p><code>.msi</code>和<code>.zip</code>格式区别：</p><ul><li><code>.msi</code>是Windows installer开发出来的程序安装文件，它可以让你安装，修改，卸载你所安装的程序。说白了.msi就是Windows installer的数据包，把所有和安装文件相关的内容封装在一个包里。</li><li><code>.zip</code>是一个压缩包，解压之后即可，不需要安装。但是缺点是需要自己配置环境变量。</li></ul><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128143905680.png" alt="image-20201128143905680" style="zoom:50%;" /><p>下载完成后，双击安装包，开始安装，一直点<code>next</code>即可，安装路径默认在<code>C:\Program Files</code>下，也可以自定义修改。</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/14070366-a969da838224343f" alt="img"></p><p>（网图）</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/14070366-ce5dd1d718fca7d9" alt="img"></p><p>（网图）</p><p>直接一直next，知道结束就可以。</p><h2 id="2-安装git并部署到github"><a href="#2-安装git并部署到github" class="headerlink" title="2.安装git并部署到github"></a>2.安装git并部署到github</h2><ol><li><strong>查看node及npm版本。</strong></li></ol><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128144241089.png" alt="image-20201128144241089"></p><p>现在是兼容的。容易出的问题是：npm与node版本不相容。</p><p>不相容的话，读者可以先从网上搜索相关的解决方法，有大量的解决方法。</p><p>我这里出现的问题比较难找，单独拿出来说明一下<img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128144505044.png" alt="image-20201128144505044"></p><p><strong>问题：</strong></p><p>在运行npm命令时总会出现如下报错：</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/2020060910034833.PNG" alt="img"></p><p>发现是node版本和npm版本不匹配造成的，于是想使用npm uninstall -g npm删除之后重新安装对应版本的npm。但是让人头疼的是：</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/20200609102006627.PNG" alt="img"></p><p>并且在执行其他npm命令时一直报npm does not support Node.js v12.18.0的错误，即使是在控制面版删除了node之后再从官网下载包含匹配版本的node，npm的版本也还是不会匹配。</p><p><strong>解决方法：</strong></p><p>我发现我之前安装过node，卸载之后，原来的npm环境并没有删除，所以只需要将下面的两个文件删除就可以了。</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/8DI2VH%7D@_L%5D%60Q65IJM%60VDJ.png" alt="img"></p><ol start="2"><li>安装淘宝的cnpm管理器</li></ol><p>这样运行速度比较快。</p><pre><code class="hljs bash">npm install -g cnpm --registry=http://registry.npm.taobao.org</code></pre><p>查看cnpm版本：</p><pre><code class="hljs bash">cnpm -v</code></pre><ol start="3"><li>安装hexo框架</li></ol><pre><code class="hljs bash">cnpm install -g hexo-cli</code></pre><p>查看hexo版本</p><pre><code class="hljs bash">hexo -v</code></pre><ol start="4"><li>搭建博客</li></ol><p>可以自己选择该文件夹所在的盘，之后有关博客所有的东西，都会存放在这个文件夹。</p><pre><code class="hljs bash">mkdir blog</code></pre><p>进入目录：</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> blog</code></pre><p>初始化博客：</p><pre><code class="hljs bash">hexo init</code></pre><p>启动本地博客服务：</p><pre><code class="hljs bash">hexo s</code></pre><p>此时本地的访问地址为：<a href="http://localhost:4000/">http://localhost:4000/</a></p><p>创建博客，可以结合Typora进行编写、创建，这里先不进行论述，有需要可以查阅另一篇博客**<em>Hexo和Typora的结合使用**</em>。</p><ol start="5"><li>部署到github</li></ol><p>在github上创建一个仓库。命名为repoName.github.io</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128145550669.png" alt="image-20201128145550669"></p><p>在blog目录下安装git部署插件。</p><pre><code class="hljs bash">cnpm install --save hexo-deployer-git</code></pre><p>修改hexo根目录下的_config.yml文件（修改内容在最底部）</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128145724021.png" alt="image-20201128145724021"></p><p>部署到github仓库</p><pre><code class="hljs bash">hexo d<span class="hljs-comment">#部署到Github仓库里</span></code></pre><p>可以了，现在可以通过<a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a>  来查看我们的博客了。</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128145940182.png" alt="image-20201128145940182"></p><h2 id="3-更换Hexo主题"><a href="#3-更换Hexo主题" class="headerlink" title="3. 更换Hexo主题"></a>3. 更换Hexo主题</h2><p>我选用的是Fluid这个主题。</p><p>官方文档：<a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a></p><p>github地址：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p><strong>步骤：</strong></p><ol><li>下载主题</li></ol><p>首先进入本地博客目录下的themes目录下，然后克隆选择的主题的github仓库到本地。</p><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/fluid-dev/hexo-theme-fluid.git</code></pre><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128150425602.png" alt="image-20201128150425602"></p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128150536270.png" alt="image-20201128150536270"></p><ol start="2"><li>修改_config.yml</li></ol><p>修改blog目录下的_config.yml</p><p><img src="/images/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/image-20201128150628711.png" alt="image-20201128150628711"></p><ol start="3"><li>commit到github</li></ol><pre><code class="hljs bash">hexo chexo ghexo d</code></pre><p>好了，基本大功告成了！！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring5</title>
    <link href="/2020/11/27/Spring5/"/>
    <url>/2020/11/27/Spring5/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Spring"><a href="#1-Spring" class="headerlink" title="1. Spring"></a>1. Spring</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><ul><li><p>Spring:春天-&gt;给软件行业带来了春天</p></li><li><p>2002，首次推出了spring框架的雏形:interface21框架</p></li><li><p>Spring框架即以interface21框架为基础，经过重新设计，并不断丰富其内涵，于2004年3月24 发布了1.0正式版本。</p></li><li><p><strong><em>Rod Johnson</em></strong>   SpringFramework创始人，著名作者。他是<a href="https://baike.baidu.com/item/%E6%82%89%E5%B0%BC%E5%A4%A7%E5%AD%A6">悉尼大学</a>的博士，然而他的专业不是计算机，而是音乐学。</p></li><li><p>Spring理念：使现有的技术更加容易使用，本身是一个<strong>大杂烩</strong>，整合了现有的技术框架。</p></li></ul><ul><li>SSH：Struct2 + Spring + Hinernate（全自动化）</li><li>SSM：SpringMVC + Spring + MyBatis（半自动化）</li></ul><p>官网地址：<a href="https://spring.io/projects/spring-framework#learn">https://spring.io/projects/spring-framework#learn</a></p><p>官方文档：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/overview.html#overview">https://docs.spring.io/spring-framework/docs/current/reference/html/overview.html#overview</a></p><p>下载zip地址：<a href="https://repo.spring.io/release/org/springframework/spring/">https://repo.spring.io/release/org/springframework/spring/</a></p><p>GitHub：<a href="https://github.com/spring-projects/spring-framework">https://github.com/spring-projects/spring-framework</a></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h3><ul><li>Spring是一个开源的免费的框架（容器）！</li><li>Spring是一个轻量级的、非入侵式的框架！（非入侵式：引入不对项目的其他东西造成影响）</li><li>控制反转（IOC）、面向切面编程（AOP）！</li><li>支持事务的处理，对框架整合的支持！</li></ul><p>==<strong>总结：</strong> Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架！==</p><h3 id="1-3-组成"><a href="#1-3-组成" class="headerlink" title="1.3 组成"></a>1.3 组成</h3><p><img src="/images/Spring5/1078856-20170205160357354-490660449.gif" alt="img"></p><h3 id="1-4-扩展"><a href="#1-4-扩展" class="headerlink" title="1.4 扩展"></a>1.4 扩展</h3><p><img src="/images/Spring5/image-20201114221151976.png" alt="image-20201114221151976"></p><p>Spring:现代化的开发!说白了就是基于Spring的开发！</p><ul><li>Build Anything 构建一切</li><li>Coordinate Anything 协调一切</li><li>Connect Everything 连接一切</li></ul><ol><li><strong>Spring Boot</strong></li></ol><ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速的开发单个微服务。</li><li>约定大于配置</li></ul><ol start="2"><li><strong>Spring Cloud</strong></li></ol><ul><li>SpringCloud是基于SpringBoot实现的</li></ul><p>因为现在大多数公司都在使用SpringBoot进行快速开发，学习SpringBoot的前提，需要完全掌握Spring以及SpringMVC。承上启下的作用！</p><p><strong>弊端：发展了太久之后，违背了原来的理念！配置十分繁琐，人称“配置地狱”。</strong></p><h2 id="2-IOC理论推导"><a href="#2-IOC理论推导" class="headerlink" title="2. IOC理论推导"></a>2. IOC理论推导</h2><p><strong>引入背景：</strong></p><p>在之前的框架中，我们实现业务，一般分为Dao接口、Dao接口实现类、Service接口、Service实现类。</p><p>假设UserDao.java、UserDaoImpl.java、UserService.java、UserServiceImpl.java</p><p>如果UserDao接口对应一个实现类，那么UserService中一般会写：</p><pre><code class="hljs java">UserDao userDao = <span class="hljs-keyword">new</span> UserDaoImpl()</code></pre><p>用户使用时直接调用service，是调用不到dao层的。因此，程序会一直默认都是调用的UserDaoImpl实现类。</p><p>那么，如果UserDao有多个实现类呢？例如，UserDaoImpl、UserDaoMySqlImpl、UserDaoOracleImp等。</p><p>如果程序员根据需求改动service代码，就会显得非常的不灵活：</p><pre><code class="hljs java">UserDao userDao = <span class="hljs-keyword">new</span> UserDaoMySqlImpl();</code></pre><img src="/images/Spring5/image-20201115105127424.png" alt="image-20201115105127424" style="zoom:50%;" /><hr><p><strong>基于这，我们想到，可以使用set进行动态实现值的注入！<img src="/images/Spring5/image-20201115103836967.png" alt="image-20201115103836967"></strong></p><pre><code class="hljs java"><span class="hljs-keyword">private</span> UserDao userDao;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span></span>&#123;<span class="hljs-keyword">this</span>.userDao = userDao;&#125;</code></pre><img src="/images/Spring5/image-20201115105233723.png" alt="image-20201115105233723" style="zoom:50%;" /><hr><p>在之前的业务中，用户的需求可能会影响我们原来的代码，我们根据用户的需求去修改源代码。如果程序代码量十分大，修改一次的成本代价十分昂贵！</p><p>使用set之后，发生了革命性的变化！</p><ul><li>之前，程序是主动创建对象，控制权在程序员身上！</li><li>使用set注入之后，程序不再具有主动性，而是变成了被动的接受对象！</li></ul><hr><p>这种思想从本质上解决了问题，我们程序员不用再去管理对象的创建。系统的耦合性大大降低，可以更加专注的在业务的实现上！</p><p>这是IOC的原型！（IOC：控制反转）</p><h2 id="3-IOC本质"><a href="#3-IOC本质" class="headerlink" title="3. IOC本质"></a>3. IOC本质</h2><p><strong>控制反转IOC（Inversion of Control），是一种设计思想，DI（依赖注入）是实现IOC的一种方法。</strong></p><p>在没有IOC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p><img src="/images/Spring5/6a63f6246b600c337b73ab94174c510fd9f9a160" alt="img" style="zoom:50%;" /><p><strong>IOC是Spring框架的核心内容，</strong>使用很多方式完美的实现了IOC，可以使用XML配置，也可以使用注解，新版本的Spring也可以零配置实现IOC。</p><p>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从IOC容器中取出需要的对象。</p><img src="/images/Spring5/image-20201115111043907.png" alt="image-20201115111043907" style="zoom:50%;" /><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到零配置的目的。</p><p><strong>控制反转是通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IOC容器，其实现方法是依赖注入DI（Dependency Injection, DI）</strong></p><h4 id="4-HelloSpring"><a href="#4-HelloSpring" class="headerlink" title="4. HelloSpring"></a>4. HelloSpring</h4><p>我们理解了IOC的基本思想，我们现在来看下Spring的应用：</p><ol><li>导入jar包</li></ol><blockquote><p>注 : spring 需要导入commons-logging进行日志记录 . 我们利用maven , 他会自动下载对应的依赖项 .</p></blockquote><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><ol start="2"><li>编写Hello实体类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;  <span class="hljs-comment">//一定要有set方法，不然beans.xml中无法实现赋值</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;Hello,&quot;</span>+ name );    &#125;&#125;</code></pre><ol start="3"><li>编写beans.xml</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--使用Spring来创建对象，在Spring中这些都叫做Bean--&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">        id：相当于变量名，class则是想要创建的对象的类型</span><span class="hljs-comment">        property : 对象的属性，value设置具体的值，</span><span class="hljs-comment">如果是一个对象则使用ref来设置，ref指向的是beans.xml中已经定义好的对象。</span><span class="hljs-comment">    --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Hello&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="4"><li>测试：</li></ol><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);        <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>        Hello hello = (Hello) applicationContext.getBean(<span class="hljs-string">&quot;hello&quot;</span>);        System.out.println(hello.toString());    &#125;</code></pre><img src="/images/Spring5/image-20201115132219497.png" alt="image-20201115132219497" style="zoom:50%;" /><hr><p><strong>思考：</strong></p><ul><li>Hello 对象是谁创建的 ?             hello 对象是由Spring创建的</li><li>Hello 对象的属性是怎么设置的 ?     hello 对象的属性是由Spring容器设置的</li></ul><p>这个过程就叫控制反转 :</p><ul><li><strong>控制</strong> : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用Spring后 , 对象是由Spring来创建的</li><li><strong>反转</strong> : 程序本身不创建对象 , 而变成被动的接收对象 .</li></ul><p><strong>依赖注入</strong> : 就是利用set方法来进行注入的.</p><p> <strong>IOC是一种编程思想，由主动的编程变成被动的接收。</strong></p><p>可以通过newClassPathXmlApplicationContext去浏览一下底层源码 。</p><p>==之前说是由用户主动进行设置对象，其实配置文件就是相当于用户的一个角色，让用户去修改一个配置文件，远远比修改源代码更简单！！==</p><p><strong>OK，到了现在，我们彻底不用在程序中修改代码去实现不同的操作，我们只需要在xml配置文件中进行修改，所谓的IOC，一句话：对象由Spring创建、管理、装配。</strong></p><h2 id="4-IOC创建对象方式"><a href="#4-IOC创建对象方式" class="headerlink" title="4. IOC创建对象方式"></a>4. IOC创建对象方式</h2><h3 id="4-1-通过无参构造方法来创建"><a href="#4-1-通过无参构造方法来创建" class="headerlink" title="4.1 通过无参构造方法来创建"></a>4.1 通过无参构造方法来创建</h3><p><strong>无参构造是默认的！</strong></p><ol><li>实体类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Hello</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;无参构造&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;Hello,&quot;</span>+ name );    &#125;&#125;</code></pre><ol start="2"><li>beans.xml</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Hello&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><ol start="3"><li>测试</li></ol><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);        <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>        Hello hello = (Hello) applicationContext.getBean(<span class="hljs-string">&quot;hello&quot;</span>);        <span class="hljs-comment">//System.out.println(hello.toString());</span>    &#125;</code></pre><img src="/images/Spring5/image-20201115163212571.png" alt="image-20201115163212571" style="zoom:50%;" /><img src="/images/Spring5/image-20201115163454860.png" alt="image-20201115163454860" style="zoom:50%;" /><p>通过结果发现，在调用show()方法之前，Hello对象在getBean()时已经通过无参构造初始化了！</p><h3 id="4-2-通过有参构造方法来创建"><a href="#4-2-通过有参构造方法来创建" class="headerlink" title="4.2 通过有参构造方法来创建"></a>4.2 通过有参构造方法来创建</h3><ol><li>实体类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Hello</span><span class="hljs-params">(String name)</span></span>&#123;        <span class="hljs-keyword">this</span>.name = name;        System.out.println(<span class="hljs-string">&quot;有参构造：name= &quot;</span>+<span class="hljs-keyword">this</span>.name);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;Hello,&quot;</span>+ name );    &#125;&#125;</code></pre><ol start="2"><li>beans.xml（有三种编写方式）</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Hello&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 第一种根据index参数下标设置 --&gt;</span>  <span class="hljs-comment">&lt;!-- index指构造方法 , 下标从0开始 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;spring1&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><ol start="3"><li>测试</li></ol><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;  <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>  ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);  <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>  Hello hello = (Hello) applicationContext.getBean(<span class="hljs-string">&quot;hello&quot;</span>);  hello.show();&#125;</code></pre><img src="/images/Spring5/image-20201115164314916.png" alt="image-20201115164314916" style="zoom:50%;" /><p>另外两种编写方式：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Hello&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 第二种根据参数名字设置 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;spring2&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Hello&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 第三种根据参数类型设置 --&gt;</span>  <span class="hljs-comment">&lt;!--不建议使用，如果两个都是String类型就不好了--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;spring3&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><hr><p>现在我们测试一个比较有意思的东西，<img src="/images/Spring5/image-20201115165603497.png" alt="image-20201115165603497"></p><ol><li>我们再创建一个实体类User.java</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;User无参构造&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;Hello,&quot;</span>+ name );    &#125;&#125;</code></pre><ol start="2"><li>在beans.xml中注入</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Hello&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 第三种根据参数类型设置 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;spring3&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><ol start="3"><li>测试</li></ol><p>测试，我们只get Hello对象，看一下结果</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);        <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>        Hello hello = (Hello) applicationContext.getBean(<span class="hljs-string">&quot;hello&quot;</span>);        hello.show();    &#125;</code></pre><img src="/images/Spring5/image-20201115165819922.png" alt="image-20201115165819922" style="zoom:50%;" /><p>User竟然也被实例化了？！！</p><p>==原来，<strong>在配置文件加载的时候。其中管理的对象都已经初始化了！</strong> 也就是说，配置文件在加载的时候，所有注册到里面的对象都被实例化好了，就等着getBean()调用了！！==<img src="/images/Spring5/image-20201115171224430.png" alt="image-20201115171224430"></p><h2 id="5-Spring配置说明"><a href="#5-Spring配置说明" class="headerlink" title="5. Spring配置说明"></a>5. Spring配置说明</h2><h3 id="5-1-别名"><a href="#5-1-别名" class="headerlink" title="5.1 别名"></a>5.1 别名</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Hello&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 第三种根据参数类型设置 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;spring3&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;hello2&quot;</span>/&gt;</span></code></pre><p>起别名之后，两个名字都可以用，都可以通过getBean()获取到Bean。</p><h3 id="5-2-Bean的配置"><a href="#5-2-Bean的配置" class="headerlink" title="5.2 Bean的配置"></a>5.2 Bean的配置</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user2,user3 user4;user5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!--</span><span class="hljs-comment">         id 是bean的标识符,要唯一,如果没有配置id,name就是默认标识符</span><span class="hljs-comment">            name就是别名，所以说alias标签就没啥用了，name中可以有很多别名，空格、逗号、分号  分隔都可以</span><span class="hljs-comment">         class是bean的全限定名=包名+类名</span><span class="hljs-comment">    --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;hello2&quot;</span>/&gt;</span></code></pre><h3 id="5-3-import"><a href="#5-3-import" class="headerlink" title="5.3 import"></a>5.3 import</h3><p>import，一般用于团队开发使用，它可以将多个配置文件，导入合并为一个。</p><img src="/images/Spring5/image-20201115174123736.png" alt="image-20201115174123736" style="zoom:50%;" /><p>将beans.xml导入到总的配置文件中，applicationContext.xml。</p><p>使用的时候，直接使用总的是applicationContext.xml</p><img src="/images/Spring5/image-20201115174337377.png" alt="image-20201115174337377" style="zoom:50%;" /><h2 id="6-DI依赖注入"><a href="#6-DI依赖注入" class="headerlink" title="6. DI依赖注入"></a>6. DI依赖注入</h2><h3 id="6-1-构造器注入"><a href="#6-1-构造器注入" class="headerlink" title="6.1 构造器注入"></a>6.1 构造器注入</h3><p>前面已经说过</p><img src="/images/Spring5/image-20201116140844471.png" alt="image-20201116140844471" style="zoom:50%;" /><h3 id="6-2-Setter注入—属性注入【重点】"><a href="#6-2-Setter注入—属性注入【重点】" class="headerlink" title="6.2 Setter注入—属性注入【重点】"></a>6.2 Setter注入—属性注入【重点】</h3><ul><li>依赖：指Bean对象的创建依赖于容器 . Bean对象的依赖资源 .</li><li>注入：Bean对象中的所有属性，由容器来注入。</li></ul><p>要求被注入的属性，必须有set方法 ，set方法的方法名由set + 属性首字母大写 ，如果属性是boolean类型 ，没有set方法 ，是 is 。</p><p>测试POJO类：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span> </span>&#123;    <span class="hljs-keyword">private</span> String address;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> address;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;        <span class="hljs-keyword">this</span>.address = address;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.pojo;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-keyword">import</span> java.util.Set;<span class="hljs-comment">//使用注解来代替所有的getter setter</span><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Address address;    <span class="hljs-keyword">private</span> String[] books;    <span class="hljs-keyword">private</span> List&lt;String&gt; hobbys;    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; card;    <span class="hljs-keyword">private</span> Set&lt;String&gt; games;<span class="hljs-comment">//集合</span>    <span class="hljs-keyword">private</span> String wife;<span class="hljs-comment">//空指针</span>    <span class="hljs-keyword">private</span> Properties info;<span class="hljs-comment">//配置类</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;name=&quot;</span>+ name                + <span class="hljs-string">&quot;,address=&quot;</span>+ address.getAddress()                + <span class="hljs-string">&quot;,books=&quot;</span>        );        <span class="hljs-keyword">for</span> (String book:books)&#123;            System.out.print(<span class="hljs-string">&quot;&lt;&lt;&quot;</span>+book+<span class="hljs-string">&quot;&gt;&gt;\t&quot;</span>);        &#125;        System.out.println(<span class="hljs-string">&quot;\n爱好:&quot;</span>+hobbys);        System.out.println(<span class="hljs-string">&quot;card:&quot;</span>+card);        System.out.println(<span class="hljs-string">&quot;games:&quot;</span>+games);        System.out.println(<span class="hljs-string">&quot;wife:&quot;</span>+wife);        System.out.println(<span class="hljs-string">&quot;info:&quot;</span>+info);    &#125;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><h4 id="6-2-1-常量注入"><a href="#6-2-1-常量注入" class="headerlink" title="6.2.1 常量注入"></a>6.2.1 常量注入</h4><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Student&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--1.普通值注入--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;任文&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><p>测试类：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;  <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>  ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);  <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>  Student student = (Student) applicationContext.getBean(<span class="hljs-string">&quot;student&quot;</span>);  System.out.println(student.getName());&#125;</code></pre><p>//output: 任文</p><h4 id="6-2-2-Bean注入"><a href="#6-2-2-Bean注入" class="headerlink" title="6.2.2 Bean注入"></a>6.2.2 <strong>Bean注入</strong></h4><p>(Address)</p><p><strong>注意点：这里的值是一个引用，ref</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Address&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;青岛&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Student&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--1.普通值注入--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;任文&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--2. Bean注入--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;address&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;  <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>  ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);  <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>  Student student = (Student) applicationContext.getBean(<span class="hljs-string">&quot;student&quot;</span>);  System.out.println(student.getAddress().getAddress());&#125;</code></pre><p>//output: 青岛</p><h4 id="6-2-3-数组注入"><a href="#6-2-3-数组注入" class="headerlink" title="6.2.3 数组注入"></a>6.2.3 数组注入</h4><pre><code class="hljs java"><span class="hljs-keyword">private</span> String[] books;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Student&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--1.普通值注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;任文&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--2. Bean注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;address&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--3.String[] 数组注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;books&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>book1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>book2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>book3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);    <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>    Student student = (Student) applicationContext.getBean(<span class="hljs-string">&quot;student&quot;</span>);    System.out.println(Arrays.toString(student.getBooks()));&#125;</code></pre><p>//output: [book1, book2, book3]</p><h4 id="6-2-4-List注入"><a href="#6-2-4-List注入" class="headerlink" title="6.2.4 List注入"></a>6.2.4 List注入</h4><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;String&gt; hobbys;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Student&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--1.普通值注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;任文&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--2. Bean注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;address&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--3.String[] 数组注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;books&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>book1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>book2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>book3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbys&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>唱歌<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>画画<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>跑步<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);    <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>    Student student = (Student) applicationContext.getBean(<span class="hljs-string">&quot;student&quot;</span>);    System.out.println(student.getHobbys().toString());&#125;</code></pre><p>//output: [唱歌, 画画, 跑步]</p><h4 id="6-2-5-Map注入"><a href="#6-2-5-Map注入" class="headerlink" title="6.2.5 Map注入"></a>6.2.5 Map注入</h4><pre><code class="hljs java"><span class="hljs-keyword">private</span> Map&lt;String,String&gt; card;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;邮政&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;111&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;建行&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;222&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);    <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>    Student student = (Student) applicationContext.getBean(<span class="hljs-string">&quot;student&quot;</span>);    System.out.println(student.getCard().toString());&#125;</code></pre><p>//output: {邮政=111, 建行=222}</p><h4 id="6-2-6-set注入"><a href="#6-2-6-set注入" class="headerlink" title="6.2.6 set注入"></a>6.2.6 set注入</h4><pre><code class="hljs java"><span class="hljs-keyword">private</span> Set&lt;String&gt; games;<span class="hljs-comment">//集合</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;games&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bbb<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);    <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>    Student student = (Student) applicationContext.getBean(<span class="hljs-string">&quot;student&quot;</span>);    System.out.println(student.getGames().toString());&#125;</code></pre><p>output: [bbb, ccc, aaa]</p><h4 id="6-2-7-Null注入"><a href="#6-2-7-Null注入" class="headerlink" title="6.2.7 Null注入"></a>6.2.7 Null注入</h4><pre><code class="hljs java"><span class="hljs-keyword">private</span> String wife;<span class="hljs-comment">//空指针</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wife&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><pre><code class="hljs java">System.out.println(student.getWife());</code></pre><p>//output：null</p><blockquote><p>其实经过测试，发现无论进不进行NULL的注入，输出的结果都是null</p></blockquote><h4 id="6-2-8-Properties注入"><a href="#6-2-8-Properties注入" class="headerlink" title="6.2.8 Properties注入"></a>6.2.8 Properties注入</h4><pre><code class="hljs java"><span class="hljs-keyword">private</span> Properties info;</code></pre><p>Properties：表示一个持久的属性集.属性列表中每个键及其对应值都是一个字符串。</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span>555<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><pre><code class="hljs java">System.out.println(student.getInfo());</code></pre><p>总体测试：</p><pre><code class="hljs java">student.show();</code></pre><img src="/images/Spring5/image-20201115192239414.png" alt="image-20201115192239414" style="zoom:50%;" /><h4 id="6-2-9-p命名和c命名注入"><a href="#6-2-9-p命名和c命名注入" class="headerlink" title="6.2.9 p命名和c命名注入"></a>6.2.9 p命名和c命名注入</h4><p>User.java ：【注意：这里没有有参构造器！】</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;        <span class="hljs-keyword">this</span>.age = age;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +                <span class="hljs-string">&quot;, age=&quot;</span> + age +                <span class="hljs-string">&#x27;&#125;&#x27;</span>;    &#125;&#125;</code></pre><ol><li><strong>P命名空间注入</strong></li></ol><p>需要在头文件中加入约束文件:</p><pre><code class="hljs xml">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;<span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span>&gt;</span>     <span class="hljs-comment">&lt;!--P(属性: properties)命名空间 , 属性依然要设置set方法  需要有无参构造器和set方法--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;任文&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    <span class="hljs-comment">//获取ApplicationContext：拿到Spring容器</span>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);    <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span>    User user = (User) applicationContext.getBean(<span class="hljs-string">&quot;user&quot;</span>);    System.out.println(user.toString());&#125;</code></pre><img src="/images/Spring5/image-20201115214244836.png" alt="image-20201115214244836" style="zoom:50%;" /><ol start="2"><li><strong>c 命名空间注入</strong></li></ol><p>需要在头文件中加入约束文件</p><pre><code class="hljs xml">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">&quot;renwen&quot;</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">&quot;101&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--这个需要User实体类中有全参的构造器！！属性依然要设置set方法--&gt;</span></code></pre><img src="/images/Spring5/image-20201115214800388.png" alt="image-20201115214800388" style="zoom:50%;" /><p>注意点：</p><ul><li>p命名注入和c命名注入都需要导入约束！</li></ul><pre><code class="hljs xml">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</code></pre><h3 id="6-3-Bean-Scopes（Bean的作用域）"><a href="#6-3-Bean-Scopes（Bean的作用域）" class="headerlink" title="6.3 Bean Scopes（Bean的作用域）"></a>6.3 Bean Scopes（Bean的作用域）</h3><img src="/images/Spring5/image-20201115215212779.png" alt="image-20201115215212779" style="zoom:50%;" /><ul><li><strong>Singleton</strong> </li></ul><p>在Spring IOC容器中仅存在一个Bean实例，Bean以单例方式存在，默认值。</p><ul><li><h4 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h4></li></ul><p>每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean时，相当于执行new xxBean()</p><ul><li><strong>Request</strong></li></ul><p>每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境。</p><ul><li><strong>Session</strong></li></ul><p>同一个HTTP Session共享一个Bean，不同的Session使用不同Bean，仅适用于WebApplicationContext环境</p><h4 id="6-3-1-The-Singleton-Scope"><a href="#6-3-1-The-Singleton-Scope" class="headerlink" title="6.3.1 The Singleton Scope"></a>6.3.1 The Singleton Scope</h4><p>单例模式</p><img src="/images/Spring5/image-20201115215615293.png" alt="image-20201115215615293" style="zoom:50%;" /><p>当一个bean的作用域为Singleton，那么Spring IoC容器中<strong>只会存在一个共享的bean实例</strong>，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。Singleton是单例类型，就是在创建起容器时就同时自动创建了一个bean的对象，不管你是否使用，他都存在了，每次获取到的对象都是同一个对象。注意，Singleton作用域是Spring中的缺省作用域。要在XML中将bean定义成singleton，可以这样配置(Spring默认机制):</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.something.DefaultAccountService&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>/&gt;</span></code></pre><h4 id="6-3-2-The-Prototype-Scope"><a href="#6-3-2-The-Prototype-Scope" class="headerlink" title="6.3.2 The Prototype Scope"></a>6.3.2 The Prototype Scope</h4><p>原型模式</p><p>当一个bean的作用域为Prototype，表示一个bean定义对应多个对象实例。Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例。Prototype是原型类型，它在我们创建容器的时候并没有实例化，而是当我们获取bean的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象。根据经验，对有状态的bean应该使用prototype作用域，而对无状态的bean则应该使用singleton作用域。在XML中将bean定义成prototype，可以这样配置：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.foo.DefaultAccount&quot;</span><span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;</span>    或者 <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.foo.DefaultAccount&quot;</span><span class="hljs-attr">singleton</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span></code></pre><h4 id="6-3-3-Request"><a href="#6-3-3-Request" class="headerlink" title="6.3.3 Request"></a>6.3.3 Request</h4><p>当一个bean的作用域为Request，表示在一次HTTP请求中，一个bean定义对应一个实例；即每个HTTP请求都会有各自的bean实例，它们依据某个bean定义创建而成。该作用域仅在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginAction&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">cn.csdn.LoginAction</span>&quot; <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;request&quot;</span>/&gt;</span></code></pre><p>针对每次HTTP请求，Spring容器会根据loginAction bean的定义创建一个全新的LoginAction bean实例，且该loginAction bean实例仅在当前HTTP request内有效，因此可以根据需要放心的更改所建实例的内部状态，而其他请求中根据loginAction bean定义创建的实例，将不会看到这些特定于某个请求的状态变化。当处理请求结束，request作用域的bean实例将被销毁。</p><h4 id="6-3-4-Session"><a href="#6-3-4-Session" class="headerlink" title="6.3.4 Session"></a>6.3.4 Session</h4><p>当一个bean的作用域为Session，表示在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userPreferences&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.foo.UserPreferences&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;session&quot;</span>/&gt;</span></code></pre><p>针对某个HTTP Session，Spring容器会根据userPreferences bean定义创建一个全新的userPreferences bean实例，且该userPreferences bean仅在当前HTTP Session内有效。与request作用域一样，可以根据需要放心的更改所创建实例的内部状态，而别的HTTP Session中根据userPreferences创建的实例，将不会看到这些特定于某个HTTP Session的状态变化。当HTTP Session最终被废弃的时候，在该HTTP Session作用域内的bean也会被废弃掉。</p><h4 id="6-3-5-小结"><a href="#6-3-5-小结" class="headerlink" title="6.3.5 小结"></a>6.3.5 小结</h4><p>request、session、application，这些只能在web开发中使用。</p><h2 id="7-Bean的自动装配"><a href="#7-Bean的自动装配" class="headerlink" title="7. Bean的自动装配"></a>7. Bean的自动装配</h2><img src="/images/Spring5/image-20201115221023159.png" alt="image-20201115221023159" style="zoom:50%;" /><p>以上所有bean的属性都是手动设置的。</p><p>因此引入了自动装配的概念。</p><ul><li>自动装配时Spring满足bean依赖的一种方式！</li><li>Spring会在上下文中自动寻找，并自动给bean装配属性。</li></ul><p>Spring中bean有三种装配机制，分别是：</p><ul><li>在xml中显示配置；</li><li>在java中显示配置；</li><li>隐式的bean发现机制和自动装配；【重要】</li></ul><p>Spring的自动装配需要从两个角度实现，或者说是两个操作：</p><ol><li>组件扫描（component scanning）:<strong>Spring会自动发现应用上下文中所创建的bean；</strong></li><li>自动装配(autowriting)：<strong>Spring自动满足bean之间的依赖</strong>，也就是我们说的IOC/DI</li></ol><p>组件扫描和自动装配组合发会巨大威力，使得显示的配置降低到最少。</p><p>==<strong>推荐：不使用自动装配xml配置，使用注解！</strong>==</p><hr><p>个人理解：所谓的自动装配，可以简单的理解为，spring会自动在spring容器中寻找我们需要装配的bean对象。</p><hr><h3 id="7-1-测试环境搭建"><a href="#7-1-测试环境搭建" class="headerlink" title="7.1 测试环境搭建"></a>7.1 测试环境搭建</h3><ol><li>创建实体类Cat、Dog、User</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;miao~&quot;</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;wang~&quot;</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> Cat cat;    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-keyword">private</span> String str;&#125;</code></pre><p>测试：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);        User user = applicationContext.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);        user.getDog().shout();        user.getCat().shout();    &#125;</code></pre><img src="/images/Spring5/image-20201116140915343.png" alt="image-20201116140915343" style="zoom:50%;" /><p>测试成功！！</p><h3 id="7-2-autowire-“byName”-按照名称自动装配-autowriting"><a href="#7-2-autowire-“byName”-按照名称自动装配-autowriting" class="headerlink" title="7.2 autowire  “byName” 按照名称自动装配-autowriting"></a>7.2 autowire  “byName” 按照名称自动装配-autowriting</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Dog&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Cat&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;str&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;renwen&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><p>去除原来的原来的property引入，换成autowire自动装配，测试依然成功。</p><hr><p>autowire-byName的工作机制：</p><p>当一个bean节点带有 autowire byName的属性时。</p><ul><li>先查找该bean中所有set方法，当找到其中一个set方法时，如setCat，它将会自动将set去除，剩余Cat，并将Cat大写的首字母转换成小写cat</li><li>转换之后，去Spring容器中寻找beanid为cat的bean节点</li><li>如果找到，就取出注入；没有找到，就报空指针异常！</li></ul><hr><p>如果我们将cat的beanid换成别的，如catcc，那么将会报错！</p><img src="/images/Spring5/image-20201116142333671.png" alt="image-20201116142333671" style="zoom:50%;" /><img src="/images/Spring5/image-20201116142344885.png" alt="image-20201116142344885" style="zoom:50%;" /><img src="/images/Spring5/image-20201116142344885-1606489287311.png" alt="image-20201116142344885" style="zoom:50%;" /><h3 id="7-3-autowire-“byType”-按照类型自动装配-autowriting"><a href="#7-3-autowire-“byType”-按照类型自动装配-autowriting" class="headerlink" title="7.3 autowire “byType” 按照类型自动装配-autowriting"></a>7.3 autowire “byType” 按照类型自动装配-autowriting</h3><p>上一节，我们将cat的beanid改成了catcc，spring找不到了，因为名字不一样了，但是！</p><p>我们可以将<strong>autowire改成byType</strong>，说白了，就是<strong>通过查找spring中与自己对象属性相同的bean对象进行装配</strong>。这样一来，代码就能正常运行了!</p><img src="/images/Spring5/image-20201116142952541.png" alt="image-20201116142952541" style="zoom:50%;" /><p><strong>但是</strong>，这个也有一定的弊端，如果spring容器中，还有Cat类型 注册的对象，如下面的cat2</p><img src="/images/Spring5/image-20201116143151850.png" alt="image-20201116143151850" style="zoom:50%;" /><p>这样一来，容器中出现两个相同类型的bean对象，在对user进行按类型自动装配时就会报错，出现不唯一的异常！因此，<strong>要保证同一类型的对象，在spring容器中唯一。</strong></p><p>在byType中，即使bean没有id，但是要保证唯一，这样也可以自动装配，因为是按照类型进行装配的，与id无关！</p><h3 id="7-4-Spring中的自动装配和Autowired"><a href="#7-4-Spring中的自动装配和Autowired" class="headerlink" title="7.4 ==Spring中的自动装配和Autowired=="></a>7.4 ==Spring中的自动装配和Autowired==</h3><h4 id="1-自动装配"><a href="#1-自动装配" class="headerlink" title="1. 自动装配"></a>1. 自动装配</h4><p>当Spring装配Bean属性时，又是胡非常明确，就是需要将某个Bean的引用装配给指定属性。</p><p>为了应对这个明确的装配场景，Spring提供了自动装配（autowriting）。与其显式的装配Bean属性，为何不让Spring识别可以自动装配的场景。</p><p>当涉及到自动装配Bean的依赖关系时，Spring有多种处理方式。因此，Spring提供了4种装配策略。</p><ol><li>byName</li></ol><p>把与Bean的属性具有相同名字的其他Bean自动装配到Bean的对应属性中。</p><ol start="2"><li><p>byType</p></li><li><p>constructor</p></li></ol><p>它是说，把与Bean的构造器入参具有相同类型的其他Bean自动装配到Bean构造器的对应入参中。值得注意的是：具有相同类型的其他Bean这句话说明它在查找入参的时候，还是通过Bean的类型来确定。</p><p><strong>e.g.</strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<span class="hljs-keyword">private</span> Role role;  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(Role role)</span> </span>&#123;<span class="hljs-keyword">this</span>.role = role;&#125;&#125; &lt;bean id=&quot;user&quot; class=&quot;com.viewscenes.netsupervisor.entity.User&quot; autowire=&quot;constructor&quot;&gt;&lt;/bean&gt;复制代码</code></pre><ol start="4"><li>autodetect</li></ol><p>这种方法被标记为果实方法，在Spring3.0之后已经不再支持。</p><p>它首先会尝试使用constructor进行自动装配，如果失败再尝试使用byType。不过，它在Spring3.0之后已经被标记为@Deprecated。</p><ol start="5"><li>默认自动装配</li></ol><p>默认情况下，default-autowired属性被设置为none，表示所有的Bean都不使用自动装配，除非Bean上配置了autowired属性。如果需要为所有的Bean配置相同的autowired属性，有个办法可以简化这一操作。在根元素Beans上增加属性default-autowired=”ByType”.</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">default-autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span></code></pre><p><strong>Spring自动装配的优点不言而喻，但是事实上，在Spring XML配置文件里的自动装配并不推荐使用，其中最大的缺点在于不确定性。或者除非你对整个Spring应用中的所有Bean的情况了如指掌，不然虽则Bean的增多和关系复杂度的上升，情况可能会更糟糕。</strong></p><h4 id="2-Autowired"><a href="#2-Autowired" class="headerlink" title="2. Autowired"></a>2. Autowired</h4><p>从spring3.5 开始，开始支持使用注解来自动装配Bean属性。它允许更细粒度的自动装配，我们可以选择性的标注某一个属性来对其应用自动装配。</p><p>Spring支持集中不同的应用于自动装配的注解。</p><ul><li>Spring自带的@Autowired注解。</li><li>JSR-330的Inject注解。</li><li>JSR-250的@Resource注解</li></ul><p>我们今天只重点关注Autowired注解！</p><p><strong>只需要在需要注入的属性加入注解即可！</strong></p><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span>UserService userService;</code></pre><p>不过，使用它有几个点需要注意。</p><ol><li>强制性</li></ol><p>默认情况下，它具有强制契约特性，其所标注的属性必须是可装配的。如果没有Bean可以装配到Autowired所标注的属性或参数中，那么你会看到NoSuchBeanDefinitionException的异常信息。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">doResolveDependency</span><span class="hljs-params">(DependencyDescriptor descriptor, String beanName,</span></span><span class="hljs-function"><span class="hljs-params">Set&lt;String&gt; autowiredBeanNames, TypeConverter typeConverter)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<span class="hljs-comment">//查找Bean</span>Map&lt;String, Object&gt; matchingBeans = findAutowireCandidates(beanName, type, descriptor);<span class="hljs-comment">//如果拿到的Bean集合为空，且isRequired，就抛出异常。</span><span class="hljs-keyword">if</span> (matchingBeans.isEmpty()) &#123;<span class="hljs-keyword">if</span> (descriptor.isRequired()) &#123;raiseNoSuchBeanDefinitionException(type, <span class="hljs-string">&quot;&quot;</span>, descriptor);&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;&#125;</code></pre><p>看到上面的源码，我们可以得到这一信息，Bean集合为空不要紧，关键是isRequired条件不能成立，那么，如果我们不确定属性是否可以装配，可以这样来使用Autowired。</p><pre><code class="hljs dart"><span class="hljs-meta">@Autowired</span>(<span class="hljs-keyword">required</span>=<span class="hljs-keyword">false</span>)UserService userService</code></pre><ol start="2"><li>装配策略</li></ol><p>曾经有一个面试题：<strong>Autowired是按照什么策略来自动装配的呢？</strong></p><p>关于这个问题，不能一概而论，你不能简单的说按照类型或者按照名称。但是可以确定的一点是，<strong>它默认是按照类型来自动装配的，即byType。</strong></p><p>关键点findAutowireCandidates这个方法。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> Map&lt;String, Object&gt; <span class="hljs-title">findAutowireCandidates</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">String beanName, Class&lt;?&gt; requiredType, DependencyDescriptor descriptor)</span> </span>&#123;<span class="hljs-comment">//获取给定类型的所有bean名称，里面实际循环所有的beanName，获取它的实例</span><span class="hljs-comment">//再通过isTypeMatch方法来确定</span>String[] candidateNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(<span class="hljs-keyword">this</span>, requiredType, <span class="hljs-keyword">true</span>, descriptor.isEager());Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> LinkedHashMap&lt;String, Object&gt;(candidateNames.length);<span class="hljs-comment">//根据返回的beanName，获取其实例返回</span><span class="hljs-keyword">for</span> (String candidateName : candidateNames) &#123;<span class="hljs-keyword">if</span> (!isSelfReference(beanName, candidateName) &amp;&amp; isAutowireCandidate(candidateName, descriptor)) &#123;result.put(candidateName, getBean(candidateName));&#125;&#125;<span class="hljs-keyword">return</span> result;&#125;</code></pre><p>final: <strong>@Autowired默认使用byType来装配属性，如果匹配到类型的多个实例，再通过byName来确定Bean。</strong></p><p>如果通过名称还是确定不了。还是determineAutowireCandidate这个方法，它还有两种方式来确定。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> String <span class="hljs-title">determineAutowireCandidate</span><span class="hljs-params">(Map&lt;String, Object&gt; candidateBeans, </span></span><span class="hljs-function"><span class="hljs-params">DependencyDescriptor descriptor)</span> </span>&#123;Class&lt;?&gt; requiredType = descriptor.getDependencyType();<span class="hljs-comment">//通过@Primary注解来标识Bean</span>String primaryCandidate = determinePrimaryCandidate(candidateBeans, requiredType);<span class="hljs-keyword">if</span> (primaryCandidate != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">return</span> primaryCandidate;&#125;<span class="hljs-comment">//通过@Priority(value = 0)注解来标识Bean value为优先级大小</span>String priorityCandidate = determineHighestPriorityCandidate(candidateBeans, requiredType);<span class="hljs-keyword">if</span> (priorityCandidate != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">return</span> priorityCandidate;&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;</code></pre><ul><li>Primary</li></ul><p>它的作用是看Bean上是否包含@Primary注解，如果包含就返回。当然了，你不能把多个Bean都设置为@Primary，不然将会得到NoUniqueBeanDefinitionException异常。</p><ul><li>Priority</li></ul><p>你也可以在Bean上配置@Priority注解，它有个int类型的属性value，可以配置优先级大小。数字越小的，就会被优先匹配。同样的，你也不能把多个Bean的优先级配置成相同大小的数值，否则NoUniqueBeanDefinitionException异常照样会出现。</p><p><strong>最后需要注意的是：Priority的包在javax.annotation.Priority  如果想使用它还需要引入一个坐标。</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.annotation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.annotation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h4 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h4><p>主要阐述了Spring中的自动装配的集中策略，又通过源码分析了Autowired注解的使用方法。在Spring3.0之后，有效的自动装配策略分为byType、byName、constructor三种方式。注解Autowired默认使用byType来自动装配，如果存在类型的多个实例就尝试使用byName匹配，如果通过byName也确定不了，可以通过Primary和Priority注解来确定。</p><h3 id="7-5-自动装配Autowired"><a href="#7-5-自动装配Autowired" class="headerlink" title="7.5 自动装配Autowired"></a>7.5 自动装配Autowired</h3><ol><li>注解实现自动装配</li></ol><p>JDK1.5开始支持注解，Spring2.5开始去全面支持注解。</p><p>准备工作：<strong>利用注解的方式注入属性。</strong></p><ol><li>在spring配置文件中引入context文件头约束</li></ol><pre><code class="hljs xml"> xmlns:context=&quot;http://www.springframework.org/schema/context&quot;http://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd</code></pre><ol start="2"><li>开启<strong>属性</strong>注解支持</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span></code></pre><hr><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><img src="/images/Spring5/image-20201120084923684.png" alt="image-20201120084923684" style="zoom:50%;" /><hr><h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a><strong>@Autowired</strong></h4><p>直接在属性上使用即可！也可以直接在setter方法上使用。</p><p><strong>使用Autowired 我们可以不用编写setter方法，但是前提是这个自动配置的属性在IOC(Spring)容器中存在，且符合名字byName。</strong></p><p><strong>测试：</strong></p><ol><li>将将User类中的setter方法去掉，使用@Autowired注解。</li></ol><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-keyword">private</span> Cat cat;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-keyword">private</span> Dog dog;  <span class="hljs-keyword">private</span> String str;  <span class="hljs-function"><span class="hljs-keyword">public</span> Cat <span class="hljs-title">getCat</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> cat;  &#125;  <span class="hljs-function"><span class="hljs-keyword">public</span> Dog <span class="hljs-title">getDog</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> dog;  &#125;  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getStr</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> str;  &#125;&#125;</code></pre><ol start="2"><li>此时配置文件中的内容</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">                           https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           &quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Cat&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Dog&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="3"><li>测试成功，输出结果！</li></ol><p><strong>科普：</strong></p><ul><li>@Nullable  字段标记了这个注解，说明这个字段可以为null</li><li>@Autowired(required = false)</li></ul><p>如果显式定义了Autowired的required属性为false，说明这个对象可以为null，否则不允许。因为required的值默认为true。</p><h4 id="Qualifer"><a href="#Qualifer" class="headerlink" title="@Qualifer"></a>@Qualifer</h4><p><strong>@Autowired + @Qualifier</strong></p><ul><li><p>@Autowired是根据类型自动装配的，<strong>加上</strong>@Qualifier则根据byName的方式自动装配。</p></li><li><p><strong>@Qualifier不能单独使用。</strong></p></li></ul><p>测试实验步骤：</p><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Cat cat;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-keyword">private</span> String str;&#125;</code></pre><p>配置文件修改内容，保证类型存在对象。且名字不为类的默认名字！</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">                           https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           &quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Cat&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Cat&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Dog&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Dog&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="2"><li>没有加Qualifier测试，直接报错</li></ol><img src="/images/Spring5/image-20201120104904576.png" alt="image-20201120104904576" style="zoom:50%;" /><p>因为显示按照类型找寻，发现有两个，之后按照name寻找，找不到相匹配的项，所以报错了！</p><ol start="3"><li>在属性上添加Qualifier注解</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-meta">@Qualifier(value = &quot;cat1&quot;)</span>  <span class="hljs-keyword">private</span> Cat cat;  <span class="hljs-meta">@Autowired</span>  <span class="hljs-meta">@Qualifier(value = &quot;dog1&quot;)</span>  <span class="hljs-keyword">private</span> Dog dog;  <span class="hljs-keyword">private</span> String str;&#125;</code></pre><ol start="4"><li>测试，测试成功，成功输出！</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);    User user = applicationContext.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);    user.getCat().shout();  &#125;&#125;</code></pre><img src="/images/Spring5/image-20201120105240612.png" alt="image-20201120105240612" style="zoom:50%;" /><h4 id="Resources"><a href="#Resources" class="headerlink" title="@Resources"></a>@Resources</h4><ol><li>Resources如有指定的name属性，先按照该属性进行byName方式查找装配。</li><li>其次再进行默认的byName方式进行装配</li><li>如果以上都不成功，则按byType的方式自动装配。</li><li>都不成功，则报异常</li></ol><p>测试实验：</p><ol><li>beans中的配置</li></ol><p>Cat设置两个，必须设置Resources 指定名称进行查找。Dog设置一个，保证可以自动找到！</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">                           https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           &quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Cat&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Cat&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Dog&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="2"><li>实体类</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-meta">@Resource(name = &quot;cat1&quot;)</span>  <span class="hljs-keyword">private</span> Cat cat;  <span class="hljs-meta">@Resource</span>  <span class="hljs-keyword">private</span> Dog dog;  <span class="hljs-keyword">private</span> String str;&#125;</code></pre><ol start="3"><li>测试</li></ol><p>测试类：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);    User user = applicationContext.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);    user.getCat().shout();  &#125;&#125;</code></pre><p>测试成功！！</p><img src="/images/Spring5/image-20201120111233221.png" alt="image-20201120111233221" style="zoom:50%;" /><p><strong>结论：</strong></p><p>主要过程：先进行byName查找，失败；再进行byType查找，成功！</p><p>@Autowired与@Resource异同：</p><p>1、@Autowired与@Resource都可以用来装配bean。都可以写在字段上，或写在setter方法上。</p><p>2、@Autowired默认按类型装配（属于spring规范），默认情况下必须要求依赖对象必须存在，如果要允许null 值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用</p><p>3、@Resource（属于J2EE复返），默认按照名称进行装配，名称可以通过name属性进行指定。如果没有指定name属性，当注解写在字段上时，默认取字段名进行按照名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。</p><p>它们的作用相同都是用注解方式注入对象，但执行顺序不同。@Autowired先byType，@Resource先byName。</p><h2 id="8-Spring注解开发"><a href="#8-Spring注解开发" class="headerlink" title="8. Spring注解开发"></a>8. Spring注解开发</h2><img src="/images/Spring5/image-20201120114001211.png" alt="image-20201120114001211" style="zoom:50%;" /><p>在spring4 之后，想要使用注解形式，必须要引入aop包。其实在引入webmvc的依赖之后，就已经引入aop的包。</p><p>在配置文件中，还得要引入一个context约束！</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">                           https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">                           &quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Cat&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Cat&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.pojo.Dog&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><h3 id="8-1-Bean的实现"><a href="#8-1-Bean的实现" class="headerlink" title="8.1 Bean的实现"></a>8.1 Bean的实现</h3><p>我们之前都是使用bean的标签进行bean注入，但是实际开发中，我们一般都会使用注解！</p><ol><li>配置扫描哪些包下的注解</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">                           https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--指定注解扫描包--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wen.pojo&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="2"><li>在指定包下编写类，增加注解</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;user&quot;)</span><span class="hljs-comment">/* 相当于 &lt;bean id=&quot;user&quot; class=&quot;com.wen.pojo.User&quot;&gt;*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-keyword">private</span> String name = <span class="hljs-string">&quot;2222&quot;</span>;&#125;</code></pre><ol start="3"><li>测试</li></ol><img src="/images/Spring5/image-20201120142244915.png" alt="image-20201120142244915" style="zoom:50%;" /><h3 id="8-2-属性如何注入"><a href="#8-2-属性如何注入" class="headerlink" title="8.2 属性如何注入"></a>8.2 属性如何注入</h3><p>使用注解注入属性。</p><ol><li>可以不使用set方法，直接在定义属性名上方添加@Value(“值”)</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;user&quot;)</span><span class="hljs-comment">/* 相当于 &lt;bean id=&quot;user&quot; class=&quot;com.wen.pojo.User&quot;&gt;*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-meta">@Value(&quot;333&quot;)</span>  <span class="hljs-comment">/* 相当于配置文件中 &lt;property name=&quot;name&quot; value=&quot;333&quot;&gt;*/</span>  <span class="hljs-keyword">private</span> String name;&#125;</code></pre><img src="/images/Spring5/image-20201120142530432.png" alt="image-20201120142530432" style="zoom:50%;" /><ol start="2"><li>如果提供了set方法，在set方法上添加@Value(“值”)</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;user&quot;)</span><span class="hljs-comment">/* 相当于 &lt;bean id=&quot;user&quot; class=&quot;com.wen.pojo.User&quot;&gt;*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-comment">//    @Value(&quot;333&quot;)</span>  <span class="hljs-comment">/* 相当于配置文件中 &lt;property name=&quot;name&quot; value=&quot;333&quot;&gt;*/</span>  <span class="hljs-keyword">private</span> String name;  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> name;  &#125;  <span class="hljs-meta">@Value(&quot;444&quot;)</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;    <span class="hljs-keyword">this</span>.name = name;  &#125;&#125;</code></pre><img src="/images/Spring5/image-20201120142815550.png" alt="image-20201120142815550" style="zoom:50%;" /><h3 id="8-3-衍生的注解"><a href="#8-3-衍生的注解" class="headerlink" title="8.3 衍生的注解"></a>8.3 衍生的注解</h3><p>我们的这些注解，就是代替了在配置文件当中配置步骤而已！更加的方便快捷！</p><p><strong>@Component三个衍生注解</strong></p><p>为了更好的进行分层，Spring可以使用其他三个注解，功能一样，目前使用哪一个功能都一样。</p><ul><li>@Controller：Web层</li><li>@Service：service层</li><li>@Repository：dao层</li></ul><p>写上这些注解，就相当于将这个类交给Spring管理装配了！</p><h3 id="8-4-自动装配"><a href="#8-4-自动装配" class="headerlink" title="8.4 自动装配"></a>8.4 自动装配</h3><p>在Bean的自动装配中讲解过，就不写了！</p><h3 id="8-5-作用域"><a href="#8-5-作用域" class="headerlink" title="8.5 作用域"></a>8.5 作用域</h3><p><strong>@Scope</strong></p><ul><li><strong>singleton</strong>：默认的，Spring会采用单例模式创建这个对象。关闭工厂，所有的对象都会销毁。</li><li><strong>prototype</strong>：多例模式。关闭工厂，所有的对象不会销毁。内部的垃圾回收机制会回收。</li></ul><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;user&quot;)</span><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-keyword">private</span> String name;  <span class="hljs-meta">@Value(&quot;444&quot;)</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;    <span class="hljs-keyword">this</span>.name = name;  &#125;&#125;</code></pre><h3 id="8-6-小结"><a href="#8-6-小结" class="headerlink" title="8.6 小结"></a>8.6 小结</h3><p><strong>XML与注解比较</strong></p><ul><li>XML可以适用任何场景，结构清晰，维护方便。</li><li>注解不是自己提供的类使用不了，开发简单。</li></ul><p><strong>XML与注解整合开发：推荐最佳实践</strong></p><ul><li>XML管理Bean</li><li>注解完成属性注入</li><li>==<strong>使用过程中，可以不用扫描，扫描是为了类上的注解。</strong>==</li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span></code></pre><p><strong>作用：</strong>(上面这句<a href="context:annotation-config/">context:annotation-config/</a>的作用)</p><ul><li>进行注解驱动注册，从而使注解生效。</li><li>用于激活那些已经在Spring容器里注册过的bean上面的注解，也就是显式的向Spring注册。</li><li>如果不扫描包，就需要手动配置bean</li><li>如果不加注解驱动，则注入的值为Null！</li></ul><h3 id="8-7-基于Java类进行配置"><a href="#8-7-基于Java类进行配置" class="headerlink" title="8.7 基于Java类进行配置"></a>8.7 基于Java类进行配置</h3><p>JavaConfig原来是一个Spring的一个子项目，它通过Java类的方式提供Bean的定义信息，在Spring4的版本，JavaConfig已经正式成为Spring4的核心功能。</p><p><strong>测试：</strong></p><ol><li>编写一个实体类 User</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//将这个类标注为Spring的一个组件，放到容器中！</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-meta">@Value(&quot;999&quot;)</span>  <span class="hljs-keyword">private</span> String name;  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> name;  &#125;&#125;</code></pre><ol start="2"><li>新建一个config配置包，编写一个MyConfig配置类</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">// 代表这是一个配置类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfig</span> </span>&#123;      <span class="hljs-meta">@Bean</span>  <span class="hljs-comment">//t通过方法注册一个bean</span>  <span class="hljs-comment">//这里的返回值就是Bean的类型，方法名就是Bean的id</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User();    &#125;&#125;</code></pre><ol start="3"><li>编写测试类，注意这里测试类变化了，不再是从配置文件中获取容器的上下文了！！</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    <span class="hljs-comment">//不再是从配置文件中获取上下文，而是从配置类中获取上下文！！</span>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(MyConfig.class);    User user = applicationContext.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);    System.out.println(user.getName());  &#125;&#125;</code></pre><p>测试成功！</p><img src="/images/Spring5/image-20201120151212913.png" alt="image-20201120151212913" style="zoom:50%;" /><p><strong>同时配置类也可以像之前配置文件那样，导入其他的配置类！</strong></p><ol><li>我们再编写一个测试类！</li></ol><pre><code class="hljs java"><span class="hljs-meta">@COnfiguration</span> <span class="hljs-comment">//代表这是一个配置类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfig2</span></span>&#123;  &#125;</code></pre><ol start="2"><li>在之前的配置类中我们来选择导入这个配置类。</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@Import(MyConfig2.class)</span><span class="hljs-comment">//导入其他配置类，类似于配置文件中的include标签。</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfig</span></span>&#123;  <span class="hljs-meta">@Bean</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User();  &#125;&#125;</code></pre><p>关于这种Java类的配置方式，我们在之后的SpringBoot和SpringCloud中还会大量看到，我们需要知道这些注解的作用即可！！</p><h2 id="9-静态-动态代理模式"><a href="#9-静态-动态代理模式" class="headerlink" title="9. 静态/动态代理模式"></a>9. 静态/动态代理模式</h2><p>为什么要学习代理模式，因为AOP*（面向切面编程）的底层机制就是动态代理！</p><p>代理模式：</p><ul><li>静态代理</li><li>动态代理</li></ul><p><strong>学习AOP之前，我们要先了解一下代理模式！</strong></p><p>代理模式作为23种经典设计模式之一，其比较官方的定义为“为其他对象提供一种代理以控制对这个对象的访问”，简单点说就是，之前A类自己做一件事，在使用代理之后，A类不直接去做，而是由A类的代理类B来去做。代理类其实是在之前类的基础上做了一层封装。java中有静态代理、JDK动态代理、CGLib动态代理的方式。静态代理指的是代理类是在编译期就存在的，相反动态代理则是在程序运行期动态生成的，</p><p>代理模式的功能主要是起到增强方法和权限拦截的作用。</p><img src="/images/Spring5/image-20201120153501285.png" alt="image-20201120153501285" style="zoom:50%;" /><h3 id="9-1-静态代理"><a href="#9-1-静态代理" class="headerlink" title="9.1 静态代理"></a>9.1 静态代理</h3><p>静态代理角色分析</p><ul><li>抽象角色：一般使用接口或者抽象类来实现。</li><li>真实角色：被代理的角色。</li><li>代理角色：代理真实角色；  <ul><li>代理真实角色后，一般会做一些附属的操作</li></ul></li><li>客户：使用代理角色来进行一些操作</li></ul><p><strong>代码实现与分析</strong></p><p>Rent.java  即抽象角色</p><pre><code class="hljs java"><span class="hljs-comment">//抽象角色：租房</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Rent</span> </span>&#123;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p>Host.java 即真实角色</p><pre><code class="hljs java"><span class="hljs-comment">//真实角色：房东 房东要出租房子</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span></span>&#123;  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>&#123;    System.out.println(<span class="hljs-string">&quot;房屋出租！&quot;</span>);  &#125;&#125;</code></pre><p>Proxy.java 即代理角色</p><pre><code class="hljs java"><span class="hljs-comment">//代理角色：中介</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span> </span>&#123;   <span class="hljs-keyword">private</span> Host host;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">()</span> </span>&#123; &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">(Host host)</span> </span>&#123;       <span class="hljs-keyword">this</span>.host = host;  &#125;   <span class="hljs-comment">//租房</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>&#123;       seeHouse();       host.rent();       fare();  &#125;   <span class="hljs-comment">//看房</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seeHouse</span><span class="hljs-params">()</span></span>&#123;       System.out.println(<span class="hljs-string">&quot;带房客看房&quot;</span>);  &#125;   <span class="hljs-comment">//收中介费</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fare</span><span class="hljs-params">()</span></span>&#123;       System.out.println(<span class="hljs-string">&quot;收中介费&quot;</span>);  &#125;&#125;Client . java 即客户<span class="hljs-comment">//客户类，一般客户都会去找代理！</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;       <span class="hljs-comment">//房东要租房</span>       Host host = <span class="hljs-keyword">new</span> Host();       <span class="hljs-comment">//中介帮助房东</span>       Proxy proxy = <span class="hljs-keyword">new</span> Proxy(host);       <span class="hljs-comment">//你去找中介！</span>       proxy.rent();  &#125;&#125;</code></pre><p>Client . java 即客户</p><pre><code class="hljs java"><span class="hljs-comment">//客户类，一般客户都会去找代理！</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;       <span class="hljs-comment">//房东要租房</span>       Host host = <span class="hljs-keyword">new</span> Host();       <span class="hljs-comment">//中介帮助房东</span>       Proxy proxy = <span class="hljs-keyword">new</span> Proxy(host);       <span class="hljs-comment">//你去找中介！</span>       proxy.rent();  &#125;&#125;</code></pre><p>分析，在这个过程中，你直接接触的就是中介，就如同现实生活中的样子，你看不到房东，但是你依旧通过中介，租到了房东的房子，这就是所谓的代理模式，程序源于生活，所以学编程的人，一般能够更加抽象的看待生活中发生的事情。</p><p><strong>静态代理的好处：</strong></p><ul><li>可以使得我们的真实角色更加纯粹，不再去关注一些公共的事情。</li><li>公共的业务由代理来完成，是西安了业务分工。</li></ul><p><strong>缺点：</strong></p><ul><li>类多了，多了代理类，工作量变大了，开发效率降低。</li></ul><p><strong>再举个例子：</strong></p><p>1、创建一个抽象角色，比如咋们平时做的用户业务，抽象起来就是增删改查！</p><pre><code class="hljs java"><span class="hljs-comment">//抽象角色：增删改查业务</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>;   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>;   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p>2、我们需要一个真实对象来完成这些增删改查操作</p><pre><code class="hljs java"><span class="hljs-comment">//真实对象，完成增删改查操作的人</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-title">implementsUserService</span> </span>&#123;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;       System.out.println(<span class="hljs-string">&quot;增加了一个用户&quot;</span>);  &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;       System.out.println(<span class="hljs-string">&quot;删除了一个用户&quot;</span>);  &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;       System.out.println(<span class="hljs-string">&quot;更新了一个用户&quot;</span>);  &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>&#123;       System.out.println(<span class="hljs-string">&quot;查询了一个用户&quot;</span>);  &#125;&#125;</code></pre><p>3、需求来了，现在我们需要增加一个日志功能，怎么实现！</p><ul><li>思路1 ：在实现类上增加代码 【麻烦！】</li><li>思路2：使用代理来做，能够不改变原来的业务情况下，实现此功能就是最好的了！</li></ul><p>4、设置一个代理类来处理日志！代理角色</p><pre><code class="hljs java"><span class="hljs-comment">//代理角色，在这里面增加日志的实现</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceProxy</span> <span class="hljs-title">implementsUserService</span> </span>&#123;   <span class="hljs-keyword">private</span> UserServiceImpl userService;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserService</span><span class="hljs-params">(UserServiceImpluserService)</span> </span>&#123;       <span class="hljs-keyword">this</span>.userService = userService;  &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;       log(<span class="hljs-string">&quot;add&quot;</span>);       userService.add();  &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;       log(<span class="hljs-string">&quot;delete&quot;</span>);       userService.delete();  &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;       log(<span class="hljs-string">&quot;update&quot;</span>);       userService.update();  &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>&#123;       log(<span class="hljs-string">&quot;query&quot;</span>);       userService.query();  &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String msg)</span></span>&#123;       System.out.println(<span class="hljs-string">&quot;执行了&quot;</span>+msg+<span class="hljs-string">&quot;方法&quot;</span>);  &#125;&#125;</code></pre><p>5、测试访问类：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;       <span class="hljs-comment">//真实业务</span>       UserServiceImpl userService = newUserServiceImpl();       <span class="hljs-comment">//代理类</span>       UserServiceProxy proxy = newUserServiceProxy();       <span class="hljs-comment">//使用代理类实现日志功能！</span>       proxy.setUserService(userService);       proxy.add();  &#125;&#125;</code></pre><p><strong>其中的思想就是：==我们在不改变原来的代码的情况下，实现了对原有功能的增强，这是AOP中最核心的思想。==</strong></p><p>AOP：纵向开发，横向开发</p><img src="/images/Spring5/image-20201121120114168.png" alt="image-20201121120114168" style="zoom:50%;" /><p>我们想要静态代理的好处，又不想要静态代理的缺点（工作量变大，开发效率低），所以就有了动态代理！</p><h3 id="9-2-动态代理"><a href="#9-2-动态代理" class="headerlink" title="9.2 动态代理"></a>9.2 动态代理</h3><p>动态代理的底层就是反射！</p><ul><li><p>动态代理的角色和静态代理是一样的。</p></li><li><p>动态代理的代理类是动态生成的。静态代理的代理类是我们提前写好的。</p></li><li><p>动态代理分为两类，一类是基于动态接口代理、一类是基于类的动态代理。</p><ul><li>基于接口的动态代理——JDK动态代理</li><li>基于类的动态代理——cglib</li><li>Java字节码：现在用的比较多的是javasist来生成动态代理</li></ul></li></ul><p>我们这里使用JDK的原生代码来实现，其余的道理都是一样的。</p><p><strong>JDK的动态代理需要了解两个类：</strong></p><p>核心：InvocationHandler（调用处理程序）和Proxy（代理）</p><pre><code class="hljs java"><span class="hljs-function">Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, 方法 method, Object[]args)</span></span>;</code></pre><p>参数说明：</p><ul><li>proxy：调用该方法的代理实例</li><li>method：所述方法对应于调用代理实例上的接口方法的实例。方法对象的声明类将是该方法声明的接口，它可以是代理类继承该方法的代理接口的超级接口。</li><li>args ：包含的方法调用传递代理实例的参数值的对象的阵列，或null如果接口方法没有参数。原始类型的参数包含在适当的原始包装器类的实例中，例如java.lang.Integer或java.lang.Boolean 。</li></ul><p><strong>代码实现：</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.pojo;<span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<span class="hljs-comment">//动态生成代理类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;    <span class="hljs-comment">//被代理的接口</span>    <span class="hljs-keyword">private</span> Object target;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTarget</span><span class="hljs-params">(Object target)</span> </span>&#123;        <span class="hljs-keyword">this</span>.target = target;    &#125;    <span class="hljs-comment">//生成得到代理类</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(),<span class="hljs-keyword">this</span>);    &#125;    <span class="hljs-comment">//处理代理实例，并返回结果</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;        log(method.getName());<span class="hljs-comment">//可以通过method做很多事情！</span>        <span class="hljs-comment">//动态代理的本质，就是使用反射机制实现</span>        Object result = method.invoke(target, args);        <span class="hljs-keyword">return</span> result;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String msg)</span></span>&#123;        System.out.println(msg);    &#125;&#125;</code></pre><p>客户端：</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//真实角色</span>        Host host = <span class="hljs-keyword">new</span> Host();        <span class="hljs-comment">//代理角色  现在没有 只有一个处理程序</span>        ProxyInvocationHandler pih = <span class="hljs-keyword">new</span> ProxyInvocationHandler();        <span class="hljs-comment">//通过调用程序处理角色 来处理我们要调用的接口对象</span>        pih.setTarget(host);        <span class="hljs-comment">//生成代理角色</span>        Rent proxy = (Rent)pih.getProxy();        proxy.rent();    &#125;&#125;</code></pre><p>随着业务的庞大，使用静态代理的话，会有越来越多的代理类，因此我们选择了动态代理类。动态代理类，一个动态代理可以代理多个类，代理的是接口。（<strong>通过传入的真实类 会找到最上层的接口，这是我猜想的，应该是反射机制的原因，之后学了反射之后，再来进行补充！！</strong>）</p><p><strong>动态代理的好处：</strong></p><ul><li>Proxy类的代码量被固定下来，不会因为业务的逐渐庞大而庞大；</li><li>可以实现AOP编程，实际上静态代理也可以实现，总的来说，AOP可以算作是代理模式的一个典型应用；</li><li>解耦，通过参数就可以判断真实类，不需要事先实例化，更加灵活多变。</li><li>一个动态代理可以代理多个类，代理的是接口！</li></ul><h2 id="10-AOP-面向切面编程"><a href="#10-AOP-面向切面编程" class="headerlink" title="10. AOP-面向切面编程"></a>10. AOP-面向切面编程</h2><p>上一节，我们了解了代理模式，这是AOP的基础，AOP是代理模式的一个应用！</p><h3 id="10-1-什么是AOP"><a href="#10-1-什么是AOP" class="headerlink" title="10.1 什么是AOP"></a>10.1 什么是AOP</h3><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过<strong>预编译方式</strong>和<strong>运行期动态代理</strong>实现<strong>程序功能的统一维护</strong>的一种技术。</p><p>AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一个衍生泛型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><img src="/images/Spring5/640" alt="img" style="zoom:50%;" /><p>公司要求不改变原有的业务逻辑，增加日志的功能。其实写个代理类就可以了，增加验证参数、前置日志、后置日志。</p><p>但是在Spring中可能比较麻烦。</p><h3 id="10-2-AOP在Spring中的作用"><a href="#10-2-AOP在Spring中的作用" class="headerlink" title="10.2 AOP在Spring中的作用"></a>10.2 AOP在Spring中的作用</h3><p>==提供声明式事务：允许用户自定义切面==</p><p>以下名词需要了解：</p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。就是，与我们业务切面逻辑无关的，但是我们需要关注的部分，就是横切关注点。如：日志，安全，缓存，事务。。。</li><li>切面（Aspect）：横切关注点被模块化的特殊对象。即，<strong>他是一个类</strong>。</li><li>通知（Advice）：切面必须要完成的工作。即，<strong>他是类中的一个方法</strong>。</li><li>目标（Target）：被通知对象。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li><li>切入点（PointCut）：切面通知 执行的 “地点”的定义</li><li>连接点（JointPoint）：与切入点匹配的执行点。</li></ul><img src="/images/Spring5/640" alt="img" style="zoom:50%;" /><p>SpringAOP中，通过Adivice定义横切逻辑，Spring中支持5种类型的Advice。</p><img src="/images/Spring5/640" alt="img" style="zoom:50%;" /><p>即，AOP在不改变原有代码的情况下，去增加新的功能。</p><h3 id="10-3-使用Spring实现AOP"><a href="#10-3-使用Spring实现AOP" class="headerlink" title="10.3 使用Spring实现AOP"></a>10.3 使用Spring实现AOP</h3><h4 id="AOP实现——通过Spring-API实现"><a href="#AOP实现——通过Spring-API实现" class="headerlink" title="AOP实现——通过Spring API实现"></a>AOP实现——通过Spring API实现</h4><ol><li>编写业务接口和实现类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;增加了一个用户&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;删除了一个用户&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;查询了一个用户&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;修改了一个用户&quot;</span>);    &#125;&#125;</code></pre><ol start="2"><li>编写增强类，我们编写两个，一个前置增强、一个后置增强</li></ol><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogBefore</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodBeforeAdvice</span> </span>&#123;    <span class="hljs-comment">/*</span><span class="hljs-comment">    * method  要执行的目标对象的方法</span><span class="hljs-comment">    * objects 被调用的方法的参数</span><span class="hljs-comment">    * o 目标对象</span><span class="hljs-comment">    * */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">(Method method, Object[] objects, Object o)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;        System.out.println(o.getClass().getName() + <span class="hljs-string">&quot;的&quot;</span> + method.getName() + <span class="hljs-string">&quot;方法执行了&quot;</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogAfter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AfterReturningAdvice</span> </span>&#123;    <span class="hljs-comment">/*</span><span class="hljs-comment">    * o 返回值</span><span class="hljs-comment">    * method 被调用的方法</span><span class="hljs-comment">    * objects  被调用方法的参数</span><span class="hljs-comment">    * o1 被调用的目标对象</span><span class="hljs-comment">    * */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span><span class="hljs-params">(Object o, Method method, Object[] objects, Object o1)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;        System.out.println(o1.getClass().getName() + <span class="hljs-string">&quot;的&quot;</span> + method.getName() + <span class="hljs-string">&quot;方法，返回值：&quot;</span> + o);    &#125;&#125;</code></pre><ol start="3"><li>最后去Spring的文件中进行注册，并实现AOP切入实现，注意需要导入约束！</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--注册bean--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo1.UserServiceImpl&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logBefore&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo1.LogBefore&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logAfter&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo1.LogAfter&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--aop的配置--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>        <span class="hljs-comment">&lt;!--切入点， expression:表达式匹配要执行的方法--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.wen.demo1.UserServiceImpl.*(..))&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!--执行环绕，advice-ref 执行方法 pointcut-ref 切入点--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;logAfter&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;logBefore&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="4"><li>测试。</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);        UserService userService = applicationContext.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);        userService.add();    &#125;&#125;</code></pre><img src="/images/Spring5/image-20201122211541022.png" alt="image-20201122211541022" style="zoom:50%;" /><p>AOP的重要性：很重要！一定要理解其中的思路，主要是思想的理解！</p><p>Spring的AOP就是将公共业务（日志、安全等）和领域业务结合起来，当执行领域业务时，将会把公共业务加进来，实现公共业务的重复利用。领域业务更纯粹，程序员专注领域业务，其本质还是动态代理！</p><h4 id="AOP实现——自定义类来实现AOP"><a href="#AOP实现——自定义类来实现AOP" class="headerlink" title="AOP实现——自定义类来实现AOP"></a>AOP实现——自定义类来实现AOP</h4><p>目标业务类不变！依旧是UserServiceImpl！</p><ol><li>首先编写一个切入类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiyPointcut</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;--------方法执行前----------&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;--------方法执行后----------&quot;</span>);    &#125;&#125;</code></pre><ol start="2"><li>在Spring中进行配置</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--注册bean--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo1.UserServiceImpl&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logBefore&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo1.LogBefore&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logAfter&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo1.LogAfter&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;diy&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo2.DiyPointcut&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--aop的配置--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;diy&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;diyPointCut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.wen.demo1.UserServiceImpl.*(..))&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;diyPointCut&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;diyPointCut&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="3"><li>测试</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);        UserService userService = applicationContext.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);        userService.add();    &#125;&#125;</code></pre><img src="/images/Spring5/image-20201122212833713.png" alt="image-20201122212833713" style="zoom:50%;" /><h4 id="AOP实现——使用注解实现"><a href="#AOP实现——使用注解实现" class="headerlink" title="AOP实现——使用注解实现"></a>AOP实现——使用注解实现</h4><ol><li>编写一个注解实现的增强类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.demo3;<span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.After;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<span class="hljs-meta">@Aspect</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationPointCut</span> </span>&#123;    <span class="hljs-meta">@Before(&quot;execution(* com.wen.demo1.UserServiceImpl.*(..))&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;--------方法执行前----------&quot;</span>);    &#125;    <span class="hljs-meta">@After(&quot;execution(* com.wen.demo1.UserServiceImpl.*(..))&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;--------方法执行后----------&quot;</span>);    &#125;    <span class="hljs-meta">@Around(&quot;execution(* com.wen.demo1.UserServiceImpl.*(..))&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint jp)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;        System.out.println(<span class="hljs-string">&quot;环绕前&quot;</span>);        System.out.println(<span class="hljs-string">&quot;签名:&quot;</span>+jp.getSignature());        <span class="hljs-comment">//执行目标方法proceed</span>        Object proceed = jp.proceed();        System.out.println(<span class="hljs-string">&quot;环绕后&quot;</span>);        System.out.println(proceed);    &#125;&#125;</code></pre><ol start="2"><li>在Spring配置文件中，注册bean，并增强支持注解的配置。</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--注册bean--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo1.UserServiceImpl&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;annotationPointCut&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.demo3.AnnotationPointCut&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">        通过aop命名空间的&lt;aop:aspectj-autoproxy /&gt;</span><span class="hljs-comment">        声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。</span><span class="hljs-comment">        当然，spring 在内部依旧采用AnnotationAwareAspectJAutoProxyCreator</span><span class="hljs-comment">进行自动代理的创建工作，</span><span class="hljs-comment">        但具体实现的细节已经被&lt;aop:aspectj-autoproxy /&gt;隐藏起来了</span><span class="hljs-comment">    --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="3"><li>测试</li></ol><img src="/images/Spring5/image-20201122214033151.png" alt="image-20201122214033151" style="zoom:50%;" /><p><strong>aop:aspectj-autoproxy：说明</strong></p><p>通过aop命名空间的**&lt;aop:aspectj-autoproxy /&gt;**声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。当然，spring 在内部依旧采用AnnotationAwareAspectJAutoProxyCreator进行自动代理的创建工作，但具体实现的细节已经被&lt;aop:aspectj-autoproxy /&gt;隐藏起来了</p><p>&lt;aop:aspectj-autoproxy /&gt;有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为&lt;aop:aspectj-autoproxy  poxy-target-class=”true”/&gt;时，表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。</p><h2 id="11-整合MyBatis"><a href="#11-整合MyBatis" class="headerlink" title="11. 整合MyBatis"></a>11. 整合MyBatis</h2><p>步骤：</p><ol><li>导入相关的jar包</li></ol><ul><li>junit</li><li>mybatis</li><li>mysql数据库</li><li>spring相关的</li><li>aop织入</li><li>mybatis-spring</li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--spring相关--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-comment">&lt;!--mybatis-spring整合包 【重点】--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!--aspectJ AOP 织入器--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><p><strong>配置Maven静态资源过滤问题！</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>           <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><ol start="2"><li><p>编写配置文件</p></li><li><p>代码实现</p></li></ol><h3 id="11-1-回顾mybatis"><a href="#11-1-回顾mybatis" class="headerlink" title="11.1 回顾mybatis"></a>11.1 回顾mybatis</h3><ol><li>编写pojo实体类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.pojo;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String pwd;&#125;</code></pre><ol start="2"><li>实现mybatis的配置文件</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mybatis-config.xml--&gt;</span><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--核心配置文件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--事务管理--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--数据库相关--&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>    <span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在mybatis核心配置文件中注册--&gt;</span>    <span class="hljs-comment">&lt;!--    Type interface com.wen.mapper.UserMapper id not known to the MapperRegistry.--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/wen/mapper/UserMapper.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><pre><code class="hljs properties"><span class="hljs-comment">#db.properties</span><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true</span><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><span class="hljs-attr">password</span>=<span class="hljs-string">645645aa</span></code></pre><ol start="3"><li>编写MyBatisUtils工具类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.utils;<span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-comment">//SqlSessionFactory  SqlSession</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisUtils</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">//使用mybatis第一步:获取SqlSessionFactory对象</span>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;            InputStream inputStream = Resources.getResourceAsStream(resource);            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-comment">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span>    <span class="hljs-comment">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;        SqlSession sqlSession = sqlSessionFactory.openSession();        <span class="hljs-keyword">return</span> sqlSession;    &#125;&#125;</code></pre><ol start="4"><li>连接数据库（IDEA）</li></ol><img src="/images/Spring5/image-20201123091508200.png" alt="image-20201123091508200" style="zoom:50%;" /><ol start="5"><li>UserMapper接口编写</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.mapper;<span class="hljs-keyword">import</span> com.wen.pojo.User;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;userId&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectAllUsers</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;userId&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;&#125;</code></pre><ol start="6"><li>接口对应的Mapper映射文件</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--省去了以往的UserDaoImpl 省去了连接数据库的一些语句--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wen.mapper.UserMapper&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--命名空间 绑定一个指定的Mapper接口--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span>        insert into mybatis.user(id, name, pwd) values (#&#123;userId&#125;, #&#123;userName&#125;, #&#123;userPwd&#125;)    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span>&gt;</span>        delete from mybatis.user where id=#&#123;userId&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllUsers&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span>        select * from mybatis.user    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span>        select * from mybatis.user where id=$&#123;userId&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><ol start="7"><li>测试类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.wen.mapper.UserMapper;<span class="hljs-keyword">import</span> com.wen.pojo.User;<span class="hljs-keyword">import</span> com.wen.utils.MyBatisUtils;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapperTest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SqlSession sqlSession = MyBatisUtils.getSqlSession();        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        List&lt;User&gt; userList = mapper.selectAllUsers();        <span class="hljs-keyword">for</span> (User user : userList) &#123;            System.out.println(user.getName());        &#125;    &#125;&#125;</code></pre><img src="/images/Spring5/image-20201123091739554.png" alt="image-20201123091739554" style="zoom:50%;" /><p>测试：测试成功</p><img src="/images/Spring5/image-20201123091755933.png" alt="image-20201123091755933" style="zoom:50%;" /><h3 id="11-2-整合MyBatis方式一"><a href="#11-2-整合MyBatis方式一" class="headerlink" title="11.2 整合MyBatis方式一"></a>11.2 整合MyBatis方式一</h3><p>整个项目的结构：</p><img src="/images/Spring5/image-20201123105615677.png" alt="image-20201123105615677" style="zoom:50%;" /><ol><li>编写applicationContext.xml</li></ol><p>要和Spring一起使用MyBatis，需要在Spring应用上下文中定义至少两样东西：一个SqlSessionFactory和至少一个数据映射类。</p><p>在 MyBatis-Spring 中，可使用SqlSessionFactoryBean来创建 SqlSessionFactory。</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 指定spring读取db.properties配置 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--DataSource原来使用的是mybatis的，现在使用Spring的数据源--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--SqlSessionFactoryBean 来创建 sqlSessionFactory--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!--绑定mybatis配置文件 这样可以在这个文件中写mybatis-config.xml的相关配置 如下面包的扫描--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:com/wen/mapper/*.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--SqlSessionTemplate 是 MyBatis-Spring 的核心。</span><span class="hljs-comment">    作为 SqlSession 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 SqlSession。--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--因为SqlSessionTemplate没有set方法，只能使用构造器进行注入--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><p>其中db.properties如下：</p><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true&amp;allowPublicKeyRetrieval=true</span><span class="hljs-attr">name</span>=<span class="hljs-string">root</span><span class="hljs-attr">password</span>=<span class="hljs-string">645645aa</span></code></pre><p>注意：name 如果改成username userName都会报错，很奇怪！！</p><ol start="2"><li>编写pojo类、Mapper接口、Mapper.xml</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.pojo;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String pwd;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.mapper;<span class="hljs-keyword">import</span> com.wen.pojo.User;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;userId&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectAllUsers</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;userId&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--省去了以往的UserDaoImpl 省去了连接数据库的一些语句--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wen.mapper.UserMapper&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--命名空间 绑定一个指定的Mapper接口--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span>        insert into mybatis.user(id, name, pwd) values (#&#123;userId&#125;, #&#123;userName&#125;, #&#123;userPwd&#125;)    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span>&gt;</span>        delete from mybatis.user where id=#&#123;userId&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllUsers&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span>        select * from mybatis.user    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span>        select * from mybatis.user where id=$&#123;userId&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><ol start="3"><li>将sqlSession bean注入到Mapper bean中</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.mapper;<span class="hljs-keyword">import</span> com.wen.pojo.User;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionTemplate;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span></span>&#123;    <span class="hljs-comment">//我们所有的操作都使用sqlSession来执行，现在都使用sqlSessionTemplate</span>    <span class="hljs-keyword">private</span> SqlSessionTemplate sqlSession;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> </span>&#123;        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        <span class="hljs-keyword">return</span> mapper.addUser(map);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        <span class="hljs-keyword">return</span> mapper.deleteUser(id);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectAllUsers</span><span class="hljs-params">()</span> </span>&#123;        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        <span class="hljs-keyword">return</span> mapper.selectAllUsers();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        <span class="hljs-keyword">return</span> mapper.getUserById(id);    &#125;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.mapper.UserMapperImpl&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSession&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><p>完整的配置文件：</p><p><strong>db.properties</strong></p><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true&amp;allowPublicKeyRetrieval=true</span><span class="hljs-attr">name</span>=<span class="hljs-string">root</span><span class="hljs-attr">password</span>=<span class="hljs-string">645645aa</span></code></pre><p><strong>spring-mapper.xml</strong></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 指定spring读取db.properties配置 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--DataSource原来使用的是mybatis的，现在使用Spring的数据源--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--SqlSessionFactoryBean 来创建 sqlSessionFactory--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!--绑定mybatis配置文件 这样可以在这个文件中写mybatis-config.xml的相关配置 如下面包的扫描--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:com/wen/mapper/*.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--SqlSessionTemplate 是 MyBatis-Spring 的核心。</span><span class="hljs-comment">    作为 SqlSession 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 SqlSession。--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--因为SqlSessionTemplate没有set方法，只能使用构造器进行注入--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p><strong>mybatis-config.xml</strong></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--核心配置文件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!--一般 别名 设置 在这个文件进行配置--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p><strong>applicationContext.xml</strong></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-mapper.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.mapper.UserMapperImpl&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSession&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="5"><li>测试</li></ol><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.wen.mapper.UserMapper;<span class="hljs-keyword">import</span> com.wen.pojo.User;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapperTest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);        UserMapper userMapper = applicationContext.getBean(<span class="hljs-string">&quot;userMapper&quot;</span>, UserMapper.class);        List&lt;User&gt; userList = userMapper.selectAllUsers();        <span class="hljs-keyword">for</span> (User user : userList) &#123;            System.out.println(user.getName());        &#125;    &#125;&#125;</code></pre><p>测试成功！</p><img src="/images/Spring5/image-20201123110502571.png" alt="image-20201123110502571" style="zoom:50%;" /><h3 id="11-3-整合MyBatis方式二"><a href="#11-3-整合MyBatis方式二" class="headerlink" title="11.3 整合MyBatis方式二"></a>11.3 整合MyBatis方式二</h3><p>通过SqlSessionDaoSupport可以省略sqlSession在配置文件中的注入。</p><p>SqlSessionDaoSupport是一个抽象的支持类，用来为你提供SqlSession，调用getSqlSession()方法你会得到一个SqlSessionTemplate。</p><ol><li>修改UserMapperImpl类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wen.mapper;<span class="hljs-keyword">import</span> com.wen.pojo.User;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionTemplate;<span class="hljs-keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SqlSessionDaoSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span></span>&#123;    <span class="hljs-comment">//我们所有的操作都使用sqlSession来执行，现在都使用sqlSessionTemplate</span><span class="hljs-comment">//    private SqlSessionTemplate sqlSession; //这个一定要注释掉</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> </span>&#123;        <span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper.class).addUser(map);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        <span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper.class).deleteUser(id);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectAllUsers</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper.class).selectAllUsers();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        <span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper.class).getUserById(id);    &#125;&#125;</code></pre><ol start="2"><li>修改配置文件</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--applicationContext.xml--&gt;</span><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-mapper.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.mapper.UserMapperImpl&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><img src="/images/Spring5/image-20201123125502135.png" alt="image-20201123125502135" style="zoom:50%;" /><p><strong>这一部分不需要了！！</strong></p><ol start="3"><li>测试</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapperTest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);        UserMapper userMapper = applicationContext.getBean(<span class="hljs-string">&quot;userMapper&quot;</span>, UserMapper.class);        List&lt;User&gt; userList = userMapper.selectAllUsers();        <span class="hljs-keyword">for</span> (User user : userList) &#123;            System.out.println(user.getName());        &#125;    &#125;&#125;</code></pre><img src="/images/Spring5/image-20201123125626302.png" alt="image-20201123125626302" style="zoom:50%;" /><p>测试成功！！</p><h2 id="12-声明式事务"><a href="#12-声明式事务" class="headerlink" title="12.声明式事务"></a>12.声明式事务</h2><h3 id="12-1-回顾事务"><a href="#12-1-回顾事务" class="headerlink" title="12.1 回顾事务"></a>12.1 回顾事务</h3><ul><li><strong>把一组业务当作一个业务来做</strong>！要么都成功，要么都失败。</li><li>事务在项目开发中，十分的重要，涉及到数据的一致性问题，不能马虎！</li><li>确保数据的完整性和一致性。</li></ul><p>事务ACID原则：</p><ul><li><p>原子性</p><p>事务是原子性操作，由一系列动作组成，事务的原子性确保动作要么全部完成，要么完全不起作用。</p></li><li><p>一致性</p><p>一旦所有事务动作完成，事务就要被提交。数据和资源处于一种满足业务规则的一致性状态中。</p></li><li><p>隔离性</p><p>可能多个事务会同时处理相同的数据，因此每个事务都应该与其他食物隔离开来，防止数据损坏。</p></li><li><p>持久性：</p><p>事务一旦提交，无论系统发生什么问题，结果都不会影响。通常情况下，事务的结果被写到存储器中。</p></li></ul><p>我们先做一个实验：</p><ol><li>首先修改UserMapperImpl中的selectUsers方法</li></ol><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectAllUsers</span><span class="hljs-params">()</span> </span>&#123;  UserMapper mapper = getSqlSession().getMapper(UserMapper.class);  <span class="hljs-comment">//先进行添加操作</span>  mapper.addUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;renwen&quot;</span>, <span class="hljs-string">&quot;645645&quot;</span>));  <span class="hljs-comment">//删除操作</span>  mapper.deleteUser(<span class="hljs-number">6</span>);  <span class="hljs-comment">//最后进行select</span>  <span class="hljs-keyword">return</span> mapper.selectAllUsers();&#125;</code></pre><ol start="2"><li>其中delete操作 sql语句其实是错的！</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span>&gt;</span>  deletes from mybatis.user where id=#&#123;userId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span></code></pre><ol start="3"><li>测试</li></ol><p>结果：add成功执行，delete出错！</p><p>没有进行事务的管理；</p><p>我们想让他们都成功才成功，有一个失败就都失败，我们就应该需要事务。</p><p>以前我们都需要自己手动管理事务，十分麻烦！但是Spring给我们提供了事务管理，我们只需要配置即可！</p><h3 id="12-2-Spring中的事务管理"><a href="#12-2-Spring中的事务管理" class="headerlink" title="12.2 Spring中的事务管理"></a>12.2 Spring中的事务管理</h3><ul><li>声明式事务：AOP</li><li>编程式事务：需要代码编写（不太实用~）</li></ul><ol><li>配置声明式事务</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置声明式事务--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><ol start="2"><li>配置好事务管理器后，我们需要去配置事务的通知</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--结合AOP实现事务的织入--&gt;</span><span class="hljs-comment">&lt;!--配置事务的类 配置事务通知--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--给哪些方法配置事务--&gt;</span>  <span class="hljs-comment">&lt;!--配置事务的传播特性--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;selectAllUsers&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span></code></pre><ol start="3"><li>配置AOP织入事务</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置AOP织入事务--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txPointCut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.wen.mapper.*.*(..))&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;txPointCut&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span></code></pre><p>完整的xml：</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/tx</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/tx/spring-tx.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 指定spring读取db.properties配置 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--DataSource原来使用的是mybatis的，现在使用Spring的数据源jdbc--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--SqlSessionFactoryBean 来创建 sqlSessionFactory--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--注入数据源你--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!--绑定mybatis配置文件 这样可以在这个文件中写mybatis-config.xml的相关配置 如下面包的扫描--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:com/wen/mapper/*.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--SqlSessionTemplate 是 MyBatis-Spring 的核心。</span><span class="hljs-comment">    作为 SqlSession 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 SqlSession。--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--因为SqlSessionTemplate没有set方法，只能使用构造器进行注入--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置声明式事务--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--结合AOP实现事务的织入--&gt;</span>    <span class="hljs-comment">&lt;!--配置事务的类 配置事务通知--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--给哪些方法配置事务--&gt;</span>        <span class="hljs-comment">&lt;!--配置事务的传播特性--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;selectAllUsers&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置AOP织入事务--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txPointCut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.wen.mapper.*.*(..))&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;txPointCut&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><ol start="5"><li>仍然delete语句写错，进行测试！</li></ol><p>结果：直接报错，添加操作也没有成功！</p><p><strong>思考：</strong></p><p>为什么需要事务？</p><ol><li>如果不配置事务，可能存在数据提交不一致的情况；</li><li>如果我们不在Spring中去配置声明式事务，我们就需要在代码中手动配置事务！</li><li>事务在项目开发过程中非常重要，涉及到数据的一致性的问题，不容马虎！</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis</title>
    <link href="/2020/11/27/MyBatis/"/>
    <url>/2020/11/27/MyBatis/</url>
    
    <content type="html"><![CDATA[<p>环境：</p><ul><li>JDK 1.8</li><li>MySQL 8.0</li><li>maven  3.6.1</li><li>IDEA</li></ul><p>回顾：</p><ul><li>JDBC</li><li>MySQL</li><li>Java 基础</li><li>Maven</li><li>Junit  单元测试</li></ul><p>框架：配置文件的，最好的方式：看官网文档</p><ul><li>SSM  Mybatis: <a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></li></ul><p>补充以下：IDEA快捷键补充返回值和返回类型：ctrl+alt+v</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a><strong>1. 简介</strong></h2><h3 id="1-1-什么是Mybatis"><a href="#1-1-什么是Mybatis" class="headerlink" title="1.1 什么是Mybatis"></a><strong>1.1 什么是Mybatis</strong></h3><p><img src="/images/MyBatis/clipboard.png" alt="clipboard"></p><p>MyBatis 是一款优秀的<strong>持久层框架</strong>，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><p>MyBatis 本是apache的一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/3406069">开源项目</a>iBatis, 2010年这个<a href="https://baike.baidu.com/item/%E9%A1%B9%E7%9B%AE/477803">项目</a>由apache software foundation 迁移到了[google code](<a href="https://baike.baidu.com/item/google">https://baike.baidu.com/item/google</a> code/2346604)，并且改名为MyBatis 。2013年11月迁移到<a href="https://baike.baidu.com/item/Github/10145341">Github</a>。</p><p>iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的<a href="https://baike.baidu.com/item/%E6%8C%81%E4%B9%85%E5%B1%82/3584971">持久层</a>框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAOs）</p><p>当前，最新版本是MyBatis 3.5.6。</p><p><strong>如何获得Mybatis?</strong></p><ul><li>Github ：下载地址：<a href="https://github.com/mybatis/mybatis-3/releases/tag/mybatis-3.5.6">https://github.com/mybatis/mybatis-3/releases/tag/mybatis-3.5.6</a></li><li>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></li><li>Maven仓库</li></ul><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="1-2-持久化"><a href="#1-2-持久化" class="headerlink" title="1.2 持久化"></a><strong>1.2 持久化</strong></h3><p>数据持久化</p><ul><li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程.</li><li>内存:<strong>断电即失</strong></li><li>数据库(jdbc),  io文件持久化</li><li>生活:冷藏, 罐头</li></ul><p><strong>为什么需要持久化?</strong></p><ul><li>有一些对象不能丢失</li><li>内存价格高</li></ul><h3 id="1-3-持久层"><a href="#1-3-持久层" class="headerlink" title="1.3 持久层"></a><strong>1.3 持久层</strong></h3><p>Dao层  Service层 Controller层</p><ul><li>完成持久化工作的代码块</li><li>层界限十分明显</li></ul><h3 id="1-4-为什么需要Mybatis"><a href="#1-4-为什么需要Mybatis" class="headerlink" title="1.4 为什么需要Mybatis?"></a><strong>1.4 为什么需要Mybatis?</strong></h3><ul><li>帮助程序员将数据存入到数据库中。</li><li>方便</li><li>传统的JDBC过于复杂。简化。框架。自动化。</li><li>不用MyBatis也可以。更容易上手。<strong>技术没有高低之分，只有使用的人</strong></li><li>本身小巧，没有第三方依赖。</li><li>灵活：sql写在xml中</li><li>接触sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更加清晰，更易维护，更易单元测试。<strong>sql和代码的分离，提高了可维护性。</strong></li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql。</li></ul><p><strong>最重要的一点：使用的人很多！</strong></p><h2 id="2-第一个MyBatis程序"><a href="#2-第一个MyBatis程序" class="headerlink" title="2. 第一个MyBatis程序"></a>2. 第一个MyBatis程序</h2><p>思路：搭建环境-&gt;导入Mybatis-&gt;编写代码-&gt;测试！</p><p>MyBatisUtils实体类-&gt;mybatis-config.xml-&gt;User实体类-&gt;UserMapper接口-&gt;UserMapper.xml-&gt;UserMapperTest测试类</p><p><strong>前两个文件一般不需要修改，直接使用！</strong></p><h3 id="2-1-搭建环境"><a href="#2-1-搭建环境" class="headerlink" title="2.1 搭建环境"></a>2.1 搭建环境</h3><img src="/images/MyBatis/image-20201112093037981.png" alt="image-20201112093037981" style="zoom:50%;" /><p>新建项目</p><ol><li>新建一个普通的maven项目</li><li>删除src目录，变成父工程</li><li>导入依赖  至少两个：mybatis  mysql驱动 junit</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-comment">&lt;!--mybatis--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--mysql驱动--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--junit--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><h3 id="2-2-创建一个模块"><a href="#2-2-创建一个模块" class="headerlink" title="2.2 创建一个模块"></a>2.2 创建一个模块</h3><img src="/images/MyBatis/image-20201112094756244.png" alt="image-20201112094756244" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112094817132.png" alt="image-20201112094817132" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112095020393.png" alt="image-20201112095020393" style="zoom:50%;" /><p>这样就基于mybatis创建了一个子项目</p><img src="/images/MyBatis/image-20201112095058221.png" alt="image-20201112095058221" style="zoom:50%;" /><p>好处是：不用再重新导入依赖包了</p><img src="/images/MyBatis/image-20201112095130914.png" alt="image-20201112095130914" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112095146896.png" alt="image-20201112095146896" style="zoom:50%;" /><ul><li>编写mybatis的核心配置文件（官网上有）</li></ul><img src="/images/MyBatis/image-20201112100703771.png" alt="image-20201112100703771" style="zoom:50%;" /><p>编写mybatis-config.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--核心配置文件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--事务管理--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--数据库相关--&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8<span class="hljs-symbol">&amp;amp;</span>useSSL=false<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC<span class="hljs-symbol">&amp;amp;</span>rewriteBatchedStatements=true&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;645645aa&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>    <span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在mybatis核心配置文件中注册--&gt;</span><span class="hljs-comment">&lt;!--    Type interface com.wen.dao.UserMapper id not known to the MapperRegistry.--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/wen/dao/UserMapper.xml&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>每个基于 <strong>MyBatis</strong> 的应用都是以一个 <strong>SqlSessionFactory</strong> 的实例为核心的。<strong>SqlSessionFactory</strong> 的实例可以通过 <strong>SqlSessionFactoryBuilder</strong> 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。</p><p>(其实就是上面的编写mybatis-config.xml文件)</p><p>从 XML 文件中构建 SqlSessionFactory 的实例非常简单，建议使用类路径下的资源文件进行配置。 但也可以使用任意的输入流（InputStream）实例，比如用文件路径字符串或 file:// URL 构造的输入流。MyBatis 包含一个名叫 Resources 的工具类，它包含一些实用方法，使得从类路径或其它位置加载资源文件更加容易。</p><p><strong>官方文档：</strong></p><pre><code class="hljs java">String resource = <span class="hljs-string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;InputStream inputStream = Resources.getResourceAsStream(resource);SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</code></pre><ul><li>编写mybatis工具类</li></ul><img src="/images/MyBatis/image-20201112103239319.png" alt="image-20201112103239319" style="zoom:50%;" /><pre><code class="hljs java"><span class="hljs-comment">//SqlSessionFactory  SqlSession</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisUtils</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">//使用mybatis第一步:获取SqlSessionFactory对象</span>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;            InputStream inputStream = Resources.getResourceAsStream(resource);            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-comment">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span>    <span class="hljs-comment">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;        SqlSession sqlSession = sqlSessionFactory.openSession();        <span class="hljs-keyword">return</span> sqlSession;    &#125;&#125;</code></pre><h3 id="2-3-编写代码"><a href="#2-3-编写代码" class="headerlink" title="2.3 编写代码"></a>2.3 编写代码</h3><ul><li>实体类</li></ul><img src="/images/MyBatis/image-20201112103707857.png" alt="image-20201112103707857" style="zoom:50%;" /><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String pwd;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, String pwd)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.pwd = pwd;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPwd</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> pwd;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPwd</span><span class="hljs-params">(String pwd)</span> </span>&#123;        <span class="hljs-keyword">this</span>.pwd = pwd;    &#125;&#125;</code></pre><ul><li>Dao接口(后期改成Mapper)</li></ul><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span></span>&#123;    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;&#125;</code></pre><ul><li>接口实现类 UserMapper.xml</li></ul><p>由原来的UserDapImpl转变成一个Mapper配置文件</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--省去了以往的UserDaoImpl 省去了连接数据库的一些语句--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wen.dao.UserDao&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--命名空间 绑定一个指定的Mapper接口--&gt;</span><span class="hljs-comment">&lt;!--    查询语句 id 对应方法名字--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span>        select * from mybatis.user    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><p>语句中的返回类型一般有两种resultType和resultMap，最常用的是resultType</p><h3 id="2-4-测试（常见问题解决方法）"><a href="#2-4-测试（常见问题解决方法）" class="headerlink" title="2.4 测试（常见问题解决方法）"></a>2.4 测试（常见问题解决方法）</h3><p>注意点：</p><p>==Type interface com.wen.dao.UserMapper id not known to the <strong>MapperRegistry</strong>.==</p><p><strong>MapperRegistry：</strong>核心配置文件中注册mappers</p><img src="/images/MyBatis/image-20201112110245072.png" alt="image-20201112110245072" style="zoom:50%;" /><p>==java.io.IOException: Could not find resource org/mybatis/example/mybatis-config.xml==</p><img src="/images/MyBatis/image-20201112110638999.png" alt="image-20201112110638999" style="zoom:50%;" /><p>java下的UserMapper.xml没有生效。maven默认会启动resources下的所有配置文件，java下的xml文件不会启动生效。</p><p><strong>原因：</strong>由于maven约定大于配置，我们会遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：==（建议只要创建Maven项目就写入）==</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在build中配置resources, 来防止我们资源导出失败的问题--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.yml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.yml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><p>放在父工程中有可能不生效，最好子工程中也放一份。</p><ul><li>junit</li></ul><img src="/images/MyBatis/image-20201112122154868.png" alt="image-20201112122154868" style="zoom:50%;" /><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> </span>&#123;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-comment">//1. 获取SqlSession对象</span>        SqlSession sqlSession = MybatisUtils.getSqlSession();        <span class="hljs-comment">//2. 执行</span>        <span class="hljs-comment">//方式一：getMapper</span>        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);        List&lt;User&gt; userList = userMapper.getUserList();        <span class="hljs-keyword">for</span> (User user : userList) &#123;            System.out.println(user.getName());        &#125;        <span class="hljs-comment">//关闭sqlSession</span>        sqlSession.close();    &#125;&#125;</code></pre><p>可能会报如下的错误：</p><p>==Cause: com.sun.org.apache.xerces.internal.impl.io.MalformedByteSeque==</p><p><strong>解决方案：</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></code></pre><img src="/images/MyBatis/image-20201112122437880.png" alt="image-20201112122437880" style="zoom:50%;" /><p>测试成功：</p><img src="/images/MyBatis/image-20201112122642943.png" alt="image-20201112122642943" style="zoom:50%;" /><p><strong>可能遇见的问题：</strong></p><ul><li>配置文件没有注册</li><li>绑定接口不对：全限定名</li><li>方法名不对</li><li>返回类型不对</li><li>Maven导出资源问题</li></ul><h3 id="2-5-对命名空间的一点补充"><a href="#2-5-对命名空间的一点补充" class="headerlink" title="2.5  对命名空间的一点补充"></a>2.5  <strong>对命名空间的一点补充</strong></h3><p>在之前版本的 MyBatis 中，<strong>命名空间（Namespaces）</strong>的作用并不大，是可选的。 但现在，随着命名空间越发重要，你必须指定命名空间。</p><p>命名空间的作用有两个，一个是利用更长的全限定名来将不同的语句隔离开来，同时也实现了你上面见到的接口绑定。就算你觉得暂时用不到接口绑定，你也应该遵循这里的规定，以防哪天你改变了主意。 长远来看，只要将命名空间置于合适的 Java 包命名空间之中，你的代码会变得更加整洁，也有利于你更方便地使用 MyBatis。</p><p><strong>命名解析：</strong>为了减少输入量，MyBatis 对所有具有名称的配置元素（包括语句，结果映射，缓存等）使用了如下的命名解析规则。</p><ul><li>全限定名（比如 “com.mypackage.MyMapper.selectAllThings）将被直接用于查找及使用。</li><li>短名称（比如 “selectAllThings”）如果全局唯一也可以作为一个单独的引用。 如果不唯一，有两个或两个以上的相同名称（比如 “com.foo.selectAllThings” 和 “com.bar.selectAllThings”），那么使用时就会产生“短名称不唯一”的错误，这种情况下就必须使用全限定名。</li></ul><h3 id="2-6-作用域（Scope）和生命周期"><a href="#2-6-作用域（Scope）和生命周期" class="headerlink" title="2.6 作用域（Scope）和生命周期"></a>2.6 作用域（Scope）和生命周期</h3><h4 id="1-SqlSessionFactoryBuilder"><a href="#1-SqlSessionFactoryBuilder" class="headerlink" title="(1) SqlSessionFactoryBuilder"></a>(1) SqlSessionFactoryBuilder</h4><p>这个类可以被实例化、使用和丢弃，<u><strong>一旦创建了 SqlSessionFactory，就不再需要它了</u>。</strong> 因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。 你可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例，但最好还是不要一直保留着它，以保证所有的 XML 解析资源可以被释放给更重要的事情。</p><h4 id="2-SqlSessionFactory"><a href="#2-SqlSessionFactory" class="headerlink" title="(2) SqlSessionFactory"></a>(2) SqlSessionFactory</h4><p><u><strong>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。</strong></u> 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏习惯”。因此 SqlSessionFactory 的最佳作用域是应用作用域。 有很多方法可以做到，<u><strong>最简单的就是使用单例模式或者静态单例模式。</strong></u></p><h4 id="3-SqlSession"><a href="#3-SqlSession" class="headerlink" title="(3) SqlSession"></a>(3) SqlSession</h4><p><u>每个线程都应该有它自己的 SqlSession 实例</u>。<u>SqlSession 的实例不是线程安全的，因此是不能被共享的</u>，所以它的最佳的作用域是请求或方法作用域。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 如果你现在正在使用一种 Web 框架，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。 <u>换句话说，每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。</u> <u>这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 finally 块中。</u> </p><h2 id="3-增删查改的实现（CRUD）"><a href="#3-增删查改的实现（CRUD）" class="headerlink" title="3. 增删查改的实现（CRUD）"></a>3. 增删查改的实现（CRUD）</h2><p>C：Create（增加）、R：Retrieve（检索）、U：Update（更新）</p><p>D：Delete（删除）</p><p><strong>编写接口方法-&gt;编写Mapper中对应的sql语句-&gt;测试</strong></p><h3 id="3-1-select"><a href="#3-1-select" class="headerlink" title="3.1 select"></a>3.1 select</h3><p>选择、查询语句</p><ul><li>id：对应namespace中的方法名</li><li>resultType：Sql语句执行的返回值</li><li>parameterType：参数类型</li></ul><img src="/images/MyBatis/image-20201112184955494.png" alt="image-20201112184955494" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112185023566.png" alt="image-20201112185023566" style="zoom:50%;" /><p><strong>下图中的#{id}中的id对应UserMapper中getUserById的参数id.</strong></p><img src="/images/MyBatis/image-20201112185250610.png" alt="image-20201112185250610" style="zoom:50%;" /><p><strong>玫红色部分为固定部分。</strong></p><h3 id="3-2-insert"><a href="#3-2-insert" class="headerlink" title="3.2 insert"></a>3.2 insert</h3><p>增加接口方法。</p><img src="/images/MyBatis/image-20201112185642049.png" alt="image-20201112185642049" style="zoom:50%;" /><p>增加xml配置</p><img src="/images/MyBatis/image-20201112185702706.png" alt="image-20201112185702706" style="zoom:50%;" /><p>写测试类进行测试：</p><img src="/images/MyBatis/image-20201112185955187.png" alt="image-20201112185955187" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112190006284.png" alt="image-20201112190006284" style="zoom:50%;" /><p>运行成功，但数据库中没有成功添加？！！</p><img src="/images/MyBatis/image-20201112190036337.png" alt="image-20201112190036337" style="zoom:50%;" /><p>原因：增删改操作需要提交事务</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span></span>&#123;    SqlSession sqlSession = MybatisUtils.getSqlSession();    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);    userMapper.addUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;zhanger&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span>));    <span class="hljs-comment">//提交事务</span>    sqlSession.commit();  <span class="hljs-comment">//关闭</span>    sqlSession.close();&#125;</code></pre><img src="/images/MyBatis/image-20201112190337525.png" alt="image-20201112190337525" style="zoom:50%;" /><h3 id="3-3-update"><a href="#3-3-update" class="headerlink" title="3.3 update"></a>3.3 update</h3><img src="/images/MyBatis/image-20201112190834500.png" alt="image-20201112190834500" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112190848069.png" alt="image-20201112190848069" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112190820745.png" alt="image-20201112190820745" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112190912708.png" alt="image-20201112190912708" style="zoom:50%;" /><h3 id="3-4-delete"><a href="#3-4-delete" class="headerlink" title="3.4 delete"></a>3.4 delete</h3><img src="/images/MyBatis/image-20201112191114785.png" alt="image-20201112191114785" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112191125191.png" alt="image-20201112191125191" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112191136269.png" alt="image-20201112191136269" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112191136269-1606487584119.png" alt="image-20201112191136269" style="zoom:50%;" /><img src="/images/MyBatis/image-20201112191147706.png" alt="image-20201112191147706" style="zoom:50%;" /><h3 id="3-5-错误分析"><a href="#3-5-错误分析" class="headerlink" title="3.5 错误分析"></a>3.5 错误分析</h3><ol><li>标签不要匹配错误</li><li><img src="/images/MyBatis/image-20201112191730460.png" alt="image-20201112191730460" style="zoom:50%;" /></li></ol><p>必须使用路径，而namespace中使用的是包名。</p><img src="/images/MyBatis/image-20201112191814114.png" alt="image-20201112191814114" style="zoom:50%;" /><ol start="3"><li>读错，从后往前读。</li><li>NullPointException，空指针一场，可能是没有注册资源。</li><li>输出的xml文件中存在中文乱码问题，删掉重试即可。</li><li>Maven资源没有导出问题（见2.4常见问题解决方法）</li></ol><h3 id="3-6-万能Map（工作实践出的）"><a href="#3-6-万能Map（工作实践出的）" class="headerlink" title="3.6 万能Map（工作实践出的）"></a>3.6 万能Map（工作实践出的）</h3><img src="/images/MyBatis/image-20201112192754535.png" alt="image-20201112192754535" style="zoom:50%;" /><p>如果有100多个字段都修改，一个一个的写太难了！怎么办呢？</p><p><strong>我们使用Map传递参数！</strong></p><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑map，map可以某些字段为空，比较灵活。</p><pre><code class="hljs java">UserMapper:<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser2</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span></span>;</code></pre><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--使用万能的map--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser2&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span>  insert into user (id, name, pwd) values (#&#123;userId&#125;, #&#123;userName&#125;, #&#123;userPwd&#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUse2r</span><span class="hljs-params">()</span></span>&#123;  SqlSession sqlSession = MybatisUtils.getSqlSession();  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);  Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();  map.put(<span class="hljs-string">&quot;userId&quot;</span>, <span class="hljs-number">3</span>);  <span class="hljs-comment">//map.put(&quot;userName&quot;, &quot;likui&quot;);</span>  map.put(<span class="hljs-string">&quot;userPwd&quot;</span>, <span class="hljs-string">&quot;2222&quot;</span>);  userMapper.addUser2(map);  <span class="hljs-comment">//提交事务</span>  sqlSession.commit();  sqlSession.close();&#125;</code></pre><p>测试成功！</p><img src="/images/MyBatis/image-20201112194355751.png" alt="image-20201112194355751" style="zoom:50%;" /><p>map传递参数，直接在sql中取出Key即可；【parameterType=”map”】</p><p>对象传递参数，直接在sql中取出对象的属性即可【parameterType=”Object”】</p><p>只有一个基本类型参数时，可以直接在sql中取出。【parameterType=”int”】                        也可以不写。</p><p><strong>多个参数用Map,或者注解！</strong></p><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><pre><code class="hljs java">UserMapper:<span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserLike</span><span class="hljs-params">(String value)</span></span>;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span>  select * from user where name like #&#123;value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserLike</span><span class="hljs-params">()</span></span>&#123;  SqlSession sqlSession = MybatisUtils.getSqlSession();  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);  List&lt;User&gt; userList = userMapper.getUserLike(<span class="hljs-string">&quot;%zhang%&quot;</span>);  <span class="hljs-keyword">for</span> (User user : userList) &#123;    System.out.println(user.getName());  &#125;  sqlSession.close();&#125;</code></pre><img src="/images/MyBatis/image-20201112200158647.png" alt="image-20201112200158647" style="zoom:50%;" /><p><strong>第二种相比较于第一种会存在SQL注入的危险！</strong></p><p>模糊查询的两种方法：</p><ol><li>java代码执行的时候，传递通配符% %</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span>  select * from user where name like #&#123;value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><ol start="2"><li>在sql拼接中使用通配符</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span>&gt;</span>  select * from user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><h2 id="4-配置解析（在这之后才是真正要掌握的）"><a href="#4-配置解析（在这之后才是真正要掌握的）" class="headerlink" title="4. 配置解析（在这之后才是真正要掌握的）"></a>4. 配置解析（在这之后才是真正要掌握的）</h2><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。</p><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#mappers">https://mybatis.org/mybatis-3/zh/configuration.html#mappers</a>)</li></ul><h3 id="4-1-核心配置文件"><a href="#4-1-核心配置文件" class="headerlink" title="4.1 核心配置文件"></a>4.1 核心配置文件</h3><ul><li>mybatis-config.xml</li></ul><p>configuration（配置）</p><ul><li>properties（属性）</li><li>settings（设置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境配置）<ul><li>environment（环境变量）</li><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li><li>databaseIdProvider（数据库厂商标识）</li><li>mappers（映射器）</li></ul><h3 id="4-2-环境配置（environments）"><a href="#4-2-环境配置（environments）" class="headerlink" title="4.2 环境配置（environments）"></a>4.2 环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境。</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--MyBatis的默认环境--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;...&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development2&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;...&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span></code></pre><p><strong>注意一些关键点:</strong></p><ul><li>默认使用的环境 ID（比如：default=”development”）。</li><li>每个 environment 元素定义的环境 ID（比如：id=”development”）。</li><li>事务管理器的配置（比如：type=”JDBC”）。</li><li>数据源的配置（比如：type=”POOLED”）。</li></ul><p>默认环境和环境 ID 顾名思义。 环境可以随意命名，但务必保证默认的环境 ID 要匹配其中一个环境 ID。</p><p>以下了解即可！</p><ol><li><strong>事务管理器（transactionManager）</strong></li></ol><p>在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）</p><ul><li><p>JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。</p></li><li><p>MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。例如:</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;MANAGED&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;closeConnection&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span></code></pre></li></ul><p><strong>注意：如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。</strong></p><ol start="2"><li><strong>数据源（dataSource）</strong></li></ol><p>连接数据库</p><p>dbcp c3p0 druid（阿里的）</p><p>有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：</p><ul><li><strong>UNPOOLED</strong>– 这个数据源的实现会每次请求时打开和关闭连接。</li><li><strong>POOLED</strong>– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。</li><li><strong>JNDI</strong> – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。</li></ul><p><strong>MyBatis默认的事务管理器是JDBC，数据源：POOLED</strong></p><h3 id="4-3-属性（properties）"><a href="#4-3-属性（properties）" class="headerlink" title="4.3 属性（properties）"></a>4.3 属性（properties）</h3><p>可以通过属性（properties）来实现引用配置文件。</p><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。【db.properties】</p><ul><li>编写一个配置文件：db.properties</li></ul><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true</span><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><span class="hljs-attr">password</span>=<span class="hljs-string">645645aa</span></code></pre><p>需要注意一点，在原来的语句中可能使用了&amp;的转义写成了&amp;amp,但是单独定义时不需要，系统会自动进行转义。</p><ul><li>在核心配置文件章引入</li></ul><p><strong>在xml文件中都必须要求顺序！！！</strong></p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入外部配置文件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></code></pre><ol><li>可以直接引入外部文件</li><li>可以在其中增加一些属性配置</li><li>若两个文件中有相同的属性字段，优先使用外部属性文件的！！</li></ol><h3 id="4-4-类型别名（typeAliases）"><a href="#4-4-类型别名（typeAliases）" class="headerlink" title="4.4 类型别名（typeAliases）"></a>4.4 类型别名（typeAliases）</h3><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span>  <span class="hljs-comment">&lt;!--给实体类起别名--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.wen.pojo.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span></code></pre><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。</p><p>比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>；若有注解，则别名为其注解值。</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span>  <span class="hljs-comment">&lt;!--指定包名--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.wen.pojo&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span></code></pre><p>在实体类较少的情况下，使用第一种方式；</p><p>如果实体类十分多，建议使用第二种。第二种也可使用注解。</p><img src="/images/MyBatis/image-20201112210050180.png" alt="image-20201112210050180" style="zoom:50%;" /><p>下面是一些为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格。</p><table><thead><tr><th align="left">别名</th><th align="left">映射的类型</th></tr></thead><tbody><tr><td align="left">_byte</td><td align="left">byte</td></tr><tr><td align="left">_long</td><td align="left">long</td></tr><tr><td align="left">_short</td><td align="left">short</td></tr><tr><td align="left">_int</td><td align="left">int</td></tr><tr><td align="left">_integer</td><td align="left">int</td></tr><tr><td align="left">_double</td><td align="left">double</td></tr><tr><td align="left">_float</td><td align="left">float</td></tr><tr><td align="left">_boolean</td><td align="left">boolean</td></tr><tr><td align="left">string</td><td align="left">String</td></tr><tr><td align="left">byte</td><td align="left">Byte</td></tr><tr><td align="left">long</td><td align="left">Long</td></tr><tr><td align="left">short</td><td align="left">Short</td></tr><tr><td align="left">int</td><td align="left">Integer</td></tr><tr><td align="left">integer</td><td align="left">Integer</td></tr><tr><td align="left">double</td><td align="left">Double</td></tr><tr><td align="left">float</td><td align="left">Float</td></tr><tr><td align="left">boolean</td><td align="left">Boolean</td></tr><tr><td align="left">date</td><td align="left">Date</td></tr><tr><td align="left">decimal</td><td align="left">BigDecimal</td></tr><tr><td align="left">bigdecimal</td><td align="left">BigDecimal</td></tr><tr><td align="left">object</td><td align="left">Object</td></tr><tr><td align="left">map</td><td align="left">Map</td></tr><tr><td align="left">hashmap</td><td align="left">HashMap</td></tr><tr><td align="left">list</td><td align="left">List</td></tr><tr><td align="left">arraylist</td><td align="left">ArrayList</td></tr><tr><td align="left">collection</td><td align="left">Collection</td></tr><tr><td align="left">iterator</td><td align="left">Iterator</td></tr></tbody></table><h3 id="4-4-设置（settings）"><a href="#4-4-设置（settings）" class="headerlink" title="4.4 设置（settings）"></a>4.4 设置（settings）</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</p><ul><li>mapUnderscoreToCamelCase</li></ul><p>是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。 例如：last_name-&gt;lastName</p><ul><li>logImpl</li></ul><p>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</p><p> SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING  日志实现</p><ul><li>cacheEnabled  缓存</li></ul><p>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</p><ul><li><p>lazyLoadingEnabled  懒加载</p><p>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</p></li></ul><h3 id="4-5-其他配置"><a href="#4-5-其他配置" class="headerlink" title="4.5 其他配置"></a>4.5 其他配置</h3><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins">plugins（插件）</a><ul><li>MyBatis-Plus</li><li>MyBatis-generator-core</li><li>通用mapper</li></ul></li></ul><h3 id="4-6-映射器（mappers）"><a href="#4-6-映射器（mappers）" class="headerlink" title="4.6 映射器（mappers）"></a>4.6 映射器（mappers）</h3><p>MapperRegistry注册绑定接口文件。</p><img src="/images/MyBatis/image-20201112211421136.png" alt="image-20201112211421136" style="zoom:50%;" /><p>方式一：</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/wen/dao/UserMapper.xml&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></code></pre><p>方式二：使用Class文件绑定注册</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wen.dao.UserMapper&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></code></pre><p>注意：</p><ul><li>接口和Mapper配置文件必须同名</li><li>接口和Mapper配置文件必须在一个包下</li></ul><p>方式三：使用扫描包进行注入绑定</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">package</span>=<span class="hljs-string">&quot;com.wen.dao&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></code></pre><p>注意：</p><ul><li>接口和Mapper配置文件必须同名</li><li>接口和Mapper配置文件必须在一个包下</li></ul><h3 id="4-7-生命周期和作用域"><a href="#4-7-生命周期和作用域" class="headerlink" title="4.7 生命周期和作用域"></a>4.7 生命周期和作用域</h3><p>不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><p><img src="/images/MyBatis/image-20201112220538765.png" alt="image-20201112220538765"></p><p>SqlSessionFactoryBuilder：</p><ul><li>一旦创建了SqlSessionFactory，就不再需要它了。</li><li>局部变量</li></ul><p>SqlSessionFactory：</p><ul><li>可以想象为：数据库连接池</li><li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。</li><li>SqlSessionFactory 的最佳作用域是应用作用域。</li><li>最简单的就是使用单例模式或者静态单例模式。</li></ul><p>SqlSession：</p><ul><li>每个线程都应该有它自己的 SqlSession 实例。</li><li>连接到连接池的一个请求！</li><li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。（放到方法中）</li><li>用完之后需要赶紧关闭，否则资源被占用</li></ul><p><img src="/images/MyBatis/image-20201112232726419.png" alt="image-20201112232726419"></p><p>这里的每一个Mapper，就代表一个业务。</p><h2 id="5-解决属性名和字段名不一致的问题"><a href="#5-解决属性名和字段名不一致的问题" class="headerlink" title="5. 解决属性名和字段名不一致的问题"></a>5. 解决属性名和字段名不一致的问题</h2><h3 id="5-1-问题"><a href="#5-1-问题" class="headerlink" title="5.1 问题"></a>5.1 问题</h3><p>数据库中的字段：</p><img src="/images/MyBatis/image-20201112233017699.png" alt="image-20201112233017699" style="zoom:50%;" /><p>新建一个项目，拷贝之前的，测试实体类字段不一致的情况。</p><p>修改字段pwd-&gt;password</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;  <span class="hljs-keyword">private</span> String name;  <span class="hljs-keyword">private</span> String password;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-comment">//1. 获取SqlSession对象</span>  SqlSession sqlSession = MybatisUtils.getSqlSession();  <span class="hljs-comment">//2. 执行</span>  <span class="hljs-comment">//方式一：getMapper</span>  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);  User user = userMapper.getUserById(<span class="hljs-number">2</span>);  System.out.println(user.getName()+<span class="hljs-string">&quot;: &quot;</span> + user.getId() + <span class="hljs-string">&quot;: &quot;</span> + user.getPassword());  <span class="hljs-comment">//关闭sqlSession</span>  sqlSession.close();&#125;</code></pre><p>发现password字段为空：测试出现问题</p><img src="/images/MyBatis/image-20201113071345521.png" alt="image-20201113071345521" style="zoom:50%;" /><pre><code class="hljs java">select * from user where id = #&#123;id&#125;<span class="hljs-comment">//类型处理器</span>select id,name,pwd from user where id = #&#123;id&#125;</code></pre><p>解决方法：方法一</p><pre><code class="hljs java">select id,name,password from user where id = #&#123;id&#125;<span class="hljs-comment">//起别名就可</span></code></pre><h3 id="5-2-resultMap"><a href="#5-2-resultMap" class="headerlink" title="5.2 resultMap"></a>5.2 resultMap</h3><p>resultMap：结果集映射</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--结果集映射--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--column:数据库中的字段，property：实体类的中的属性--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span>  select * from user where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><ul><li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。</li><li>ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</li><li><code>ResultMap</code> 的优秀之处——你完全可以不用显式地配置它们。**(只需要配置不同的字段即可)**</li></ul><p><strong>使用方法：</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_name&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;hashed_password&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></code></pre><p>然后在引用它的语句中设置 <code>resultMap</code> 属性就行了（注意我们去掉了 <code>resultType</code> 属性）。比如:</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUsers&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userResultMap&quot;</span>&gt;</span>  select user_id, user_name, hashed_password  from some_table  where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><p>如果世界就这么简单就好了！！<img src="/images/MyBatis/image-20201113073217197.png" alt="image-20201113073217197"></p><h2 id="6-日志"><a href="#6-日志" class="headerlink" title="6. 日志"></a>6. 日志</h2><h3 id="6-1-日志工厂"><a href="#6-1-日志工厂" class="headerlink" title="6.1 日志工厂"></a>6.1 日志工厂</h3><p>如果一个数据库操作出现异常，我们需要排错，日志就是最好的助手。</p><p>曾经：sout debug</p><p>现在：日志工厂</p><p>logImpl</p><p>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</p><ul><li> SLF4J </li><li>LOG4J 【掌握】</li><li>LOG4J2 </li><li>JDK_LOGGING </li><li>COMMONS_LOGGING </li><li>STDOUT_LOGGING 【掌握】</li><li>NO_LOGGING </li></ul><p>在MyBatis中具体使用哪一个日志实现，在设置中设定。</p><p><strong>STDOUT_LOGGING：标准日志输出</strong></p><p>在MyBatis核心配置文件中，配置我们的日志！</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span></code></pre><img src="/images/MyBatis/image-20201113075212076.png" alt="image-20201113075212076" style="zoom:50%;" /><h3 id="6-2-LOG4J"><a href="#6-2-LOG4J" class="headerlink" title="6.2 LOG4J"></a><strong>6.2 LOG4J</strong></h3><ul><li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件。</li><li>我们可以控制每一条日志的输出格式</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li><li>通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li></ul><ol><li>需要导包</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><ol start="2"><li>log4j.properties</li></ol><pre><code class="hljs properties"><span class="hljs-comment">### 配置根 目的地###</span><span class="hljs-meta">log4j.rootLogger</span> = <span class="hljs-string">debug,console,fileAppender</span><span class="hljs-comment">### 日志输出级别 ###</span><span class="hljs-meta">log4j.logger.org.mybatis</span>=<span class="hljs-string">debug</span><span class="hljs-meta">log4j.logger.java.sql</span>=<span class="hljs-string">debug</span><span class="hljs-meta">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">debug</span><span class="hljs-meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">debug</span><span class="hljs-meta">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">debug</span><span class="hljs-comment">### 配置输出到控制台 ###</span><span class="hljs-meta">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><span class="hljs-meta">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><span class="hljs-meta">log4j.appender.console.Threshold</span> = <span class="hljs-string">debug</span><span class="hljs-meta">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><span class="hljs-meta">log4j.appender.console.layout.ConversionPattern</span> =  <span class="hljs-string">%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span><span class="hljs-comment">### 配置输出到文件 ###</span><span class="hljs-meta">log4j.appender.fileAppender</span> = <span class="hljs-string">org.apache.log4j.FileAppender</span><span class="hljs-meta">log4j.appender.fileAppender.File</span> = <span class="hljs-string">logs/log.log</span><span class="hljs-meta">log4j.appender.fileAppender.Append</span> = <span class="hljs-string">true</span><span class="hljs-meta">log4j.appender.fileAppender.Threshold</span> = <span class="hljs-string">DEBUG</span><span class="hljs-meta">log4j.appender.fileAppender.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><span class="hljs-meta">log4j.appender.fileAppender.layout.ConversionPattern</span> = <span class="hljs-string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;[%t:%r]-[%p]%m%n</span><span class="hljs-comment">### 配置输出到文件，并且每天都创建一个文件 ###</span><span class="hljs-meta">log4j.appender.dailyRollingFile</span> = <span class="hljs-string">org.apache.log4j.DailyRollingFileAppender</span><span class="hljs-meta">log4j.appender.dailyRollingFile.File</span> = <span class="hljs-string">logs/log.log</span><span class="hljs-meta">log4j.appender.dailyRollingFile.Append</span> = <span class="hljs-string">true</span><span class="hljs-meta">log4j.appender.dailyRollingFile.Threshold</span> = <span class="hljs-string">DEBUG</span><span class="hljs-meta">log4j.appender.dailyRollingFile.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><span class="hljs-meta">log4j.appender.dailyRollingFile.layout.ConversionPattern</span> = <span class="hljs-string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n### 配置输出到文件，且大小到达指定尺寸的时候产生一个新的文件 ###log4j.appender.ROLLING_FILE=org.apache.log4j.RollingFileAppender log4j.appender.ROLLING_FILE.Threshold=ERROR log4j.appender.ROLLING_FILE.File=rolling.log log4j.appender.ROLLING_FILE.Append=true log4j.appender.ROLLING_FILE.MaxFileSize=10KB log4j.appender.ROLLING_FILE.MaxBackupIndex=1 log4j.appender.ROLLING_FILE.layout=org.apache.log4j.PatternLayout log4j.appender.ROLLING_FILE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n</span></code></pre><ol start="3"><li>配置log4j为日志实现</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LOG4J&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span></code></pre><ol start="4"><li>log4j的使用！直接测试运行刚才的查询</li></ol><img src="/images/MyBatis/image-20201113081623597.png" alt="image-20201113081623597" style="zoom:50%;" /><p><strong>简单使用</strong></p><ol><li>在要使用log4j的类中，导入包import org.apache.log4j.Logger;</li><li>日志对象，参数为当前类的class </li></ol><pre><code class="hljs java"><span class="hljs-keyword">static</span> Logger logger = Logger.getLogger(UserMapperTest.class);</code></pre><ol start="3"><li>测试方法</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLog4j</span><span class="hljs-params">()</span></span>&#123;  logger.info(<span class="hljs-string">&quot;info:进入了testLog4j&quot;</span>);  logger.debug(<span class="hljs-string">&quot;debug:进入了testLog4j&quot;</span>);  logger.error(<span class="hljs-string">&quot;error:进入了testLog4j&quot;</span>);&#125;</code></pre><p>之后如果想打印一些信息，之前会经常用System.out.println()，现在可以直接用logger.info()、logger.error()、logger.debug()来进行输出。</p><ol start="4"><li>日志级别</li></ol><pre><code class="hljs java">logger.info(<span class="hljs-string">&quot;info:进入了testLog4j&quot;</span>);logger.debug(<span class="hljs-string">&quot;debug:进入了testLog4j&quot;</span>);logger.error(<span class="hljs-string">&quot;error:进入了testLog4j&quot;</span>);</code></pre><p><strong>log日志文件打不开？！</strong></p><img src="/images/MyBatis/image-20201113082531661.png" alt="image-20201113082531661" style="zoom:50%;" /><p>解决方法：</p><p><strong>方案一：</strong></p><p>mybatis核心配置文件中不要使用或中使用package来指定要扫描的包！！</p><p>原因：使用package指定要扫描的包，会产生乱码，生成的log文件，IDEA打不开。</p><img src="/images/MyBatis/image-20201113082831359.png" alt="image-20201113082831359" style="zoom:50%;" /><p>删除扫描包配置之后</p><img src="/images/MyBatis/image-20201113082716048.png" alt="image-20201113082716048" style="zoom:50%;" /><p><strong>方案二：</strong></p><img src="/images/MyBatis/image-20201113083027304.png" alt="image-20201113083027304" style="zoom:50%;" /><img src="/images/MyBatis/image-20201113083402249.png" alt="image-20201113083402249" style="zoom:50%;" /><p>这时可以查看文件了！（虽然存在乱码，依然可以打开查看）</p><img src="/images/MyBatis/image-20201113083435007.png" alt="image-20201113083435007" style="zoom:50%;" /><h2 id="7-分页"><a href="#7-分页" class="headerlink" title="7. 分页"></a>7. 分页</h2><p><strong>为什么需要分页？</strong></p><img src="/images/MyBatis/image-20201113084732912.png" alt="image-20201113084732912" style="zoom: 25%;" /><ul><li>减少数据的处理量</li></ul><h3 id="7-1-利用Limit分页"><a href="#7-1-利用Limit分页" class="headerlink" title="7.1 利用Limit分页"></a><strong>7.1 利用Limit分页</strong></h3><p>select * from user limit 0,2;  从0开始，分两个</p><p>select * from user limit 2；从0开始，长度为2</p><p>使用MyBatis实现分页，核心是SQL</p><ol><li>接口</li></ol><pre><code class="hljs java">UserMapper.java  <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserByLimit</span><span class="hljs-params">(Map&lt;String,Integer&gt; map)</span></span>;</code></pre><ol start="2"><li>Mapper</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--分页--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLimit&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span>  select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><ol start="3"><li>测试</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLimit</span><span class="hljs-params">()</span></span>&#123;  SqlSession sqlSession = MybatisUtils.getSqlSession();  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);  Map&lt;String,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();  map.put(<span class="hljs-string">&quot;startIndex&quot;</span>,<span class="hljs-number">0</span>);  map.put(<span class="hljs-string">&quot;pageSize&quot;</span>,<span class="hljs-number">2</span>);  List&lt;User&gt; userByLimit = userMapper.getUserByLimit(map);  <span class="hljs-keyword">for</span> (User user : userByLimit) &#123;    System.out.println(user.getName()+<span class="hljs-string">&quot;: &quot;</span> + user.getPassword());  &#125;  sqlSession.close();&#125;</code></pre><img src="/images/MyBatis/image-20201113092408125.png" alt="image-20201113092408125" style="zoom:50%;" /><h3 id="7-2-RowBounds分页"><a href="#7-2-RowBounds分页" class="headerlink" title="7.2 RowBounds分页"></a>7.2 RowBounds分页</h3><p>不建议开发使用！那就简单写写，科普一下！<img src="/images/MyBatis/image-20201113092625610.png" alt="image-20201113092625610"></p><p>RowBounds：不使用SQL实现，在Java层面实现！</p><ol><li>接口</li></ol><pre><code class="hljs java"><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserByRowBounds</span><span class="hljs-params">()</span></span>;</code></pre><ol start="2"><li>Mapper.xml</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    RowBounds--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByRowBounds&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span>  select * from user<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><ol start="3"><li>测试类</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testRowBounds</span><span class="hljs-params">()</span></span>&#123;  SqlSession sqlSession = MybatisUtils.getSqlSession();  <span class="hljs-comment">//RowBounds实现</span>  RowBounds rowBounds = <span class="hljs-keyword">new</span> RowBounds(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);  <span class="hljs-comment">//通过java代码层面实现分页</span>  List&lt;User&gt; userList = sqlSession.selectList(<span class="hljs-string">&quot;com.wen.dao.UserMapper.getUserByRowBounds&quot;</span>,<span class="hljs-keyword">null</span>,rowBounds);  <span class="hljs-keyword">for</span> (User user : userList) &#123;    System.out.println(user.getName() + <span class="hljs-string">&quot;: &quot;</span> + user.getPassword());  &#125;  sqlSession.close();&#125;</code></pre><img src="/images/MyBatis/image-20201113093633848.png" alt="image-20201113093633848" style="zoom:50%;" /><h3 id="7-3-分页插件"><a href="#7-3-分页插件" class="headerlink" title="7.3 分页插件"></a>7.3 分页插件</h3><img src="/images/MyBatis/image-20201113093918975.png" alt="image-20201113093918975" style="zoom:50%;" /><p>了解即可，万一之后用到可以使用！<img src="/images/MyBatis/image-20201113094152149.png" alt="image-20201113094152149"></p><h2 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8. 使用注解开发"></a>8. 使用注解开发</h2><p>除了MyBatis一般都会使用注解开发！<img src="/images/MyBatis/image-20201113094325233.png" alt="image-20201113094325233"></p><h3 id="8-1-面向接口编程"><a href="#8-1-面向接口编程" class="headerlink" title="8.1 面向接口编程"></a>8.1 面向接口编程</h3><p>我们都学过面向对象编程，也学习过接口，但是在真正的开发中，很多时候我们会选择面向对象编程。</p><p><strong>根本原因：==解耦==、可扩展、提高复用，分层开发中，上层不用管具体的实现，大家都遵守共同的标准，使得开发变得容易，规范性更好。</strong></p><p>关于接口的理解：</p><ul><li><p>接口从更深层次的理解，应是定义（规范、约束）与实现（名实分离的原则）的分离</p></li><li><p>接口的本身反应了系统人员对系统的抽象理解。</p></li><li><p>接口有两类</p><p>-第一类：对一个个体的抽象，它可对应一个抽象体（abstract class）</p><p>-第二类：对一个个体某方面的抽象，即形成一个抽象面（interface）</p></li><li><p>一个个体可能有多个抽象面。抽象体和抽象面是有区别的。</p></li></ul><p>三个面向的区别：</p><ul><li>面向对象：我们考虑问题时，以对象为单位，考虑它的属性和方法。</li><li>面向过程：我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现。</li><li>接口设计与非接口设计是针对复用技术而言的，与面向对象（/过程）不是一个问题，更多的体现是对系统整体的架构。</li></ul><h3 id="8-2-使用注解开发"><a href="#8-2-使用注解开发" class="headerlink" title="8.2 使用注解开发"></a>8.2 使用注解开发</h3><ol><li>在核心配置文件绑定接口</li></ol><pre><code class="hljs java">mybatis-config.xml&lt;!--绑定接口--&gt;&lt;mappers&gt;  &lt;mapper <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.wen.dao.UserMapper&quot;</span>/&gt;&lt;/mappers&gt;</code></pre><ol start="2"><li>注解在接口上实现</li></ol><pre><code class="hljs java">UserMapper.java  <span class="hljs-meta">@Select(&quot;select id,name,pwd as password from user&quot;)</span>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUsers</span><span class="hljs-params">()</span></span>;</code></pre><p>一旦字段改变，注解的方式就显得非常的麻烦。当sql语句更复杂的时候，也不太好用。</p><p>本质：反射机制实现</p><p>底层：动态代理</p><h4 id="MyBatis详细流程"><a href="#MyBatis详细流程" class="headerlink" title="MyBatis详细流程"></a><strong>MyBatis详细流程</strong></h4><img src="/images/MyBatis/image-20201113110717482.png" alt="image-20201113110717482" style="zoom:50%;" /><p>Bravo！！<img src="/images/MyBatis/image-20201113110753787.png" alt="image-20201113110753787"></p><h3 id="8-3-CRUD"><a href="#8-3-CRUD" class="headerlink" title="8.3 CRUD"></a>8.3 CRUD</h3><p><strong>自动提交事务</strong></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(<span class="hljs-keyword">true</span>);&#125;</code></pre><p>多个参数可以用@Param(“”)注解，但必须是基本类型。</p><pre><code class="hljs java"><span class="hljs-comment">//方法存在多个参数，所有的参数前面必须加上@Param注解</span>    <span class="hljs-meta">@Select(&quot;select * from where id = #&#123;id&#125; and name = #&#123;name&#125;&quot;)</span>    <span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id, <span class="hljs-meta">@Param(&quot;name&quot;)</span> String name)</span></span>;</code></pre><img src="/images/MyBatis/image-20201113121441254.png" alt="image-20201113121441254" style="zoom:50%;" /><p><strong>id是从注解中的名称获取的！！</strong></p><p><strong>增加：</strong></p><pre><code class="hljs java"><span class="hljs-meta">@Insert(&quot;insert into user(id, name, pwd) values(#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;)&quot;)</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;</code></pre><pre><code class="hljs java">MyBatisUtils.java:<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(<span class="hljs-keyword">true</span>);&#125;<span class="hljs-comment">//true:代表自动提交事务</span></code></pre><p><strong>查找：</strong></p><pre><code class="hljs java">UserMapper.java:<span class="hljs-comment">//方法存在多个参数，所有的参数前面必须加上@Param注解</span><span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;id&#125; and name = #&#123;name&#125;&quot;)</span><span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id2, <span class="hljs-meta">@Param(&quot;name&quot;)</span> String name)</span></span>;Test:<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-comment">//1. 获取SqlSession对象</span>  SqlSession sqlSession = MybatisUtils.getSqlSession();  <span class="hljs-comment">//2. 执行</span>  <span class="hljs-comment">//方式一：getMapper</span>  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);  User user = userMapper.getUserById(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;5555&quot;</span>);  System.out.println(user.getName());  <span class="hljs-comment">//关闭sqlSession</span>  sqlSession.close();&#125;</code></pre><p><strong>修改：</strong></p><pre><code class="hljs java">UserMapper.java:<span class="hljs-meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id=#&#123;id&#125;&quot;)</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-comment">//1. 获取SqlSession对象</span>  SqlSession sqlSession = MybatisUtils.getSqlSession();  <span class="hljs-comment">//2. 执行</span>  <span class="hljs-comment">//方式一：getMapper</span>  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);  userMapper.updateUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;777&quot;</span>, <span class="hljs-string">&quot;777&quot;</span>));  <span class="hljs-comment">//关闭sqlSession</span>  sqlSession.close();&#125;</code></pre><p><strong>删除：</strong></p><pre><code class="hljs java">UserMapper.java:<span class="hljs-meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-comment">//1. 获取SqlSession对象</span>  SqlSession sqlSession = MybatisUtils.getSqlSession();  <span class="hljs-comment">//2. 执行</span>  <span class="hljs-comment">//方式一：getMapper</span>  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);  userMapper.deleteUser(<span class="hljs-number">2</span>);  <span class="hljs-comment">//关闭sqlSession</span>  sqlSession.close();&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select id,name,pwd as password from user&quot;)</span><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUsers</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//方法存在多个参数，所有的参数前面必须加上@Param注解</span><span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;id&#125; and name = #&#123;name&#125;&quot;)</span><span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id2, <span class="hljs-meta">@Param(&quot;name&quot;)</span> String name)</span></span>;<span class="hljs-meta">@Insert(&quot;insert into user(id, name, pwd) values(#&#123;id&#125;, #&#123;name&#125;, #&#123;password&#125;)&quot;)</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<span class="hljs-meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id=#&#123;id&#125;&quot;)</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<span class="hljs-meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;</code></pre><p><strong>关于@Param()注解</strong></p><ul><li>基本类型的参数或者String类型，需要加上。</li><li>引用类型不需要加。</li><li>如果只有一个参数，可以忽略，但是建议加上。</li><li>我们在SQL中引用的就是我们这里的@Param()中设定的属性名。</li></ul><p><strong>关于${}和#{}的区别</strong></p><ul><li>#{}能够很大程度上防止sql注入，而${}无法防止sql注入。</li><li>能用#{}尽量使用#{}</li></ul><h2 id="9-Lombok"><a href="#9-Lombok" class="headerlink" title="9. Lombok"></a>9. Lombok</h2><p>第三方工具</p><p>Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.</p><p>Never write another getter or equals method again, with one <strong>annotation</strong> your class has a fully featured builder, Automate your logging variables, and much more.</p><p>Lombok 是一种 Java™ 实用工具，可用来帮助开发人员消除 Java 的冗长，尤其是对于简单的 Java 对象（POJO）。它通过注解实现这一目的。</p><ol><li><p>在IDEA中安装Lombok插件</p></li><li><p>引入Lombok依赖</p><hr><dependency>    <groupId>org.projectlombok</groupId>    <artifactId>lombok</artifactId>    <version>1.18.12</version>    <scope>provided</scope></dependency><hr></li></ol><ol start="3"><li>在实体类上加注解即可</li></ol><p><strong>常用的注解：</strong></p><ul><li>@Getter and @Getter</li><li>@ToString</li><li>@EqualsAndHashCode</li><li>@AllArgsConstructor</li><li>@NoArgsConstructor</li><li>@Data</li><li>@Accessors</li></ul><hr><p>@Data等价于上面的@Setter、@Getter、@RequiredArgsConstructor、@ToString、@EqualsAndHashCode</p><hr><img src="/images/MyBatis/image-20201113193152340.png" alt="image-20201113193152340" style="zoom:50%;" /><p>优点：</p><ul><li>提高开发效率</li><li>代码简洁</li></ul><p>缺点：</p><ul><li>不支持多种参数构造器的重载。</li><li>虽然省去了手动创建getter/setter方法的麻烦，但是大大降低了源代码的可读性和完整性，降低了阅读源代码的舒适度。</li></ul><h2 id="10-复杂查询"><a href="#10-复杂查询" class="headerlink" title="10. 复杂查询"></a>10. 复杂查询</h2><ul><li>多对一：关联</li><li>一对多：集合</li></ul><h3 id="10-1-多对一处理"><a href="#10-1-多对一处理" class="headerlink" title="10.1 多对一处理"></a>10.1 多对一处理</h3><img src="/images/MyBatis/image-20201113201018723.png" alt="image-20201113201018723" style="zoom:50%;" /><img src="/images/MyBatis/image-20201113201147828.png" alt="image-20201113201147828" style="zoom:50%;" /><p><img src="/images/MyBatis/image-20201113201222165.png" alt="image-20201113201222165"></p><p>注意：</p><p>创建相同的目录结构</p><img src="/images/MyBatis/image-20201113203832658.png" alt="image-20201113203832658" style="zoom:50%;" /><p>java目录下：使用com.wen.dao创建，而resources下使用com/wen/dao创建。</p><img src="/images/MyBatis/image-20201113203920130.png" alt="image-20201113203920130" style="zoom:50%;" /><p>创建测试环境：</p><ul><li>核心配置文件mybatis-config.xml和MyBatisUtils工具类</li><li>创建表 student teacher</li><li>创建实体类 Student Teacher</li><li><strong>编写Dao、Mapper</strong>  嵌套处理</li></ul><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentMapper</span> </span>&#123;    <span class="hljs-comment">//查询所有的学生，以及老师的信息（涉及多表查询）</span>    <span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">getStudents</span><span class="hljs-params">()</span></span>;    <span class="hljs-function">Student <span class="hljs-title">getStudentById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;sid&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudents&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;Student_Teacher&quot;</span>&gt;</span>  select * from student<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Student_Teacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">            复杂的属性:我们需要单独处理</span><span class="hljs-comment">            association ： 对象</span><span class="hljs-comment">            collection ： 集合</span><span class="hljs-comment">        --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacher&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span>  select * from teacher where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-comment">&lt;!--上面的语句改成id=#&#123;tid&#125;也一样，好像不影响传值--&gt;</span></code></pre><ul><li>测试</li></ul><img src="/images/MyBatis/image-20201113210441811.png" alt="image-20201113210441811" style="zoom:50%;" /><h4 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h4><p>类似：子查询</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudents&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;Student_Teacher&quot;</span>&gt;</span>  select * from student<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Student_Teacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">            复杂的属性:我们需要单独处理</span><span class="hljs-comment">            association ： 对象</span><span class="hljs-comment">            collection ： 集合</span><span class="hljs-comment">        --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacher&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span>  select * from teacher where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-comment">&lt;!--上面的语句改成id=#&#123;tid&#125;也一样，好像不影响传值--&gt;</span></code></pre><img src="/images/MyBatis/image-20201113212309019.png" alt="image-20201113212309019" style="zoom:50%;" /><p><strong>下面的虽然可以替换成别的，但是最好和上面的保持一致！！<img src="/images/MyBatis/image-20201113212424872.png" alt="image-20201113212424872"></strong></p><h4 id="按照结果查询处理"><a href="#按照结果查询处理" class="headerlink" title="按照结果查询处理"></a>按照结果查询处理</h4><p>类似：连表查询</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--按照结果嵌套处理--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudents2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;Student_Teacher2&quot;</span>&gt;</span>  select student.id sid,student.name sname,teacher.name tname  from student,teacher  where student.tid = teacher.id<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Student_Teacher2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></code></pre><img src="/images/MyBatis/image-20201113212534960.png" alt="image-20201113212534960" style="zoom:50%;" /><h3 id="10-2-一对多处理"><a href="#10-2-一对多处理" class="headerlink" title="10.2 一对多处理"></a>10.2 一对多处理</h3><img src="/images/MyBatis/image-20201113212823953.png" alt="image-20201113212823953" style="zoom:50%;" /><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-comment">//一对多</span>    <span class="hljs-keyword">private</span> List&lt;Student&gt; students;&#125;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tid;&#125;</code></pre><pre><code class="hljs java">TeacherMapper.java<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TeacherMapper</span> </span>&#123;    <span class="hljs-comment">//获取一个指定老师下的所有学生及老师的信息</span>    <span class="hljs-function">Teacher <span class="hljs-title">getTeacher</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tid&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;Teacher_Student&quot;</span>&gt;</span>  select student.id sid, student.name sname, teacher.name tname, teacher.id tid  from student,teacher  where student.tid = teacher.id<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Teacher_Student&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--集合中的泛型信息，我们使用ofType--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;studentList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></code></pre><img src="/images/MyBatis/image-20201113222454568.png" alt="image-20201113222454568" style="zoom:50%;" /><p>//按照查询嵌套处理就不编码了，太麻烦了！！<img src="/images/MyBatis/image-20201113222953722.png" alt="image-20201113222953722"></p><h3 id="10-3-小结"><a href="#10-3-小结" class="headerlink" title="10.3 小结"></a>10.3 小结</h3><ol><li>关联 - association  【多对一】</li><li>集合 - collection 【一对多】</li><li>javaType  &amp;&amp; ofType<ol><li>javaType用来指定实体类中的属性的类型</li><li>ofType 用来指定映射到List或者集合中的pojo类型，泛型中约束类型！</li></ol></li></ol><p><strong>注意点：</strong></p><ul><li>保证SQL的可读性，通俗易懂</li><li>注意一对多、多对一中，属性名和字段的问题</li><li>如果问题不好排查错误，可以使用日志，建议使用Log4j</li></ul><p><strong>面试高频：</strong></p><ul><li>MySql引擎</li><li>InnoDB底层原理</li><li>索引</li><li>索引优化</li></ul><h2 id="11-动态SQL"><a href="#11-动态SQL" class="headerlink" title="11. 动态SQL"></a>11. 动态SQL</h2><p><strong>动态SQL：根据不同的条件生成不同的SQL语句。</strong></p><p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</p><p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach（最痛苦）</li></ul><h3 id="11-1-环境搭建"><a href="#11-1-环境搭建" class="headerlink" title="11.1 环境搭建"></a>11.1 环境搭建</h3><p><strong>创建blog表</strong></p><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> blog(    <span class="hljs-keyword">id</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;博客id&#x27;</span>,    title <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;博客标题&#x27;</span>,    author <span class="hljs-built_in">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;博客作者&#x27;</span>,    create_time datetime <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;创建时间&#x27;</span>,    views <span class="hljs-built_in">int</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">comment</span> <span class="hljs-string">&#x27;浏览量&#x27;</span>)<span class="hljs-keyword">engine</span> = <span class="hljs-keyword">innodb</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">charset</span> = utf8</code></pre><p>创建一个基础工程</p><ol><li>导包</li><li>编写配置文件</li><li>编写实体类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Blog</span> </span>&#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String title;    <span class="hljs-keyword">private</span> String author;    <span class="hljs-keyword">private</span> Date createTime;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> views;&#125;</code></pre><ol start="4"><li>编写实体类对应的接口及Mapper文件</li></ol><h3 id="11-2-if语句"><a href="#11-2-if语句" class="headerlink" title="11.2 if语句"></a>11.2 if语句</h3><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment">* 如果map中传递的是title，则查找出所有title的书籍</span><span class="hljs-comment">* 如果传递的是author，则查找出所有author的书籍</span><span class="hljs-comment">* 否则查找所有书籍*/</span><span class="hljs-function">List&lt;Blog&gt; <span class="hljs-title">queryBlogIF</span><span class="hljs-params">(Map map)</span></span>;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.Blog&quot;</span>&gt;</span>  select * from blog  <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span>      title = #&#123;title&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span>      and author = #&#123;author&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span></code></pre><p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p><p>说白了，<em>where</em>可以智能化保证<em>sql</em>语句的正确！！<img src="/images/MyBatis/image-20201114084842350.png" alt="image-20201114084842350" style="zoom:50%;" /></p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;    SqlSession sqlSession = MybatisUtils.getSqlSession();    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);    HashMap map = <span class="hljs-keyword">new</span> HashMap();    map.put(<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;遇见狂神说&quot;</span>);    List&lt;Blog&gt; blogs = mapper.queryBlogIF(map);    <span class="hljs-keyword">for</span> (Blog blog : blogs) &#123;        System.out.println(blog.getTitle());    &#125;    sqlSession.close();&#125;</code></pre><h3 id="11-3-常用标签"><a href="#11-3-常用标签" class="headerlink" title="11.3 常用标签"></a>11.3 常用标签</h3><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，<em>MyBatis</em> 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p><h4 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose  when otherwise"></a><strong><em>choose  when otherwise</em></strong></h4><pre><code class="hljs xml">    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">    按顺序执行第一个符合的条件</span><span class="hljs-comment">    --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.Blog&quot;</span>&gt;</span>  select * from blog  <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span>        title = #&#123;title&#125;      <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span>        and author = #&#123;author&#125;/*这个and不加好像也可以，但是最好规范写代码，加上and最好*/      <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span>        and views &gt; #&#123;views&#125;      <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><h4 id="set"><a href="#set" class="headerlink" title="set"></a><strong><em>set</em></strong></h4><p><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBlogSet&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span>  update mybatis.blog  <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span> title = #&#123;title&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span> author = #&#123;author&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span>  where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></code></pre><p><strong>第一句中的if 逗号,必须加上，否则会报错！！</strong></p><img src="/images/MyBatis/image-20201114090943589.png" alt="image-20201114090943589" style="zoom:50%;" /><p><strong>上述情况会报错！因为update是不能没有set语句的！！</strong></p><p>所谓的动态SQL，本质还是SQL语句，只是我们可以在SQL层面去执行一个逻辑代码。</p><p><em>if where set choose otherwise when</em></p><h3 id="11-4-SQL片段-复用"><a href="#11-4-SQL片段-复用" class="headerlink" title="11.4 SQL片段-复用"></a>11.4 SQL片段-复用</h3><p>有的时候，我们可能会将一些公共的部分抽取出来，方便复用！</p><img src="/images/MyBatis/image-20201114102501988.png" alt="image-20201114102501988" style="zoom:50%;" /><img src="/images/MyBatis/image-20201114102529314.png" alt="image-20201114102529314" style="zoom:50%;" /><ul><li>使用sql标签抽取公共部分</li><li>在需要的地方使用include标签引入</li></ul><p>注意：</p><ul><li>最好基于单表来定义sql片段</li><li>不要存在where标签</li></ul><h3 id="11-5-foreach语句"><a href="#11-5-foreach语句" class="headerlink" title="11.5 foreach语句"></a>11.5 foreach语句</h3><p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）</p><img src="/images/MyBatis/image-20201114102950034.png" alt="image-20201114102950034" style="zoom:50%;" /><p>e.g.(源于拉丁文，是for example的简写)</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--我们传递一个map,map中可以存在一个集合</span><span class="hljs-comment">        select * from blog where (id=1 or id=2)</span><span class="hljs-comment">    --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBogForEach&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wen.pojo.Blog&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span>  select * from mybatis.blog  <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span>      id = #&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><p>测试：</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;  SqlSession sqlSession = MybatisUtils.getSqlSession();  BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);  HashMap map = <span class="hljs-keyword">new</span> HashMap();  ArrayList&lt;String&gt; ids = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();  ids.add(<span class="hljs-string">&quot;1&quot;</span>);  ids.add(<span class="hljs-string">&quot;2&quot;</span>);  map.put(<span class="hljs-string">&quot;ids&quot;</span>, ids);  List&lt;Blog&gt; blogs = mapper.queryBogForEach(map);  <span class="hljs-keyword">for</span> (Blog blog : blogs) &#123;    System.out.println(blog.getTitle());  &#125;  sqlSession.close();&#125;</code></pre><p>==动态SQL就是在拼接SQL语句，我们只需要保证SQL的正确性，按照SQL的格式，去排列组合就可以了！==</p><p>建议：</p><ul><li>先在mysql中写出完整的SQL，测试成功后，再对应的去修改成为我们的动态SQL实现通用。</li></ul><h2 id="12-缓存"><a href="#12-缓存" class="headerlink" title="12. 缓存"></a>12. 缓存</h2><h3 id="12-1-简介"><a href="#12-1-简介" class="headerlink" title="12.1 简介"></a>12.1 简介</h3><p>查询：连接数据库-&gt;消耗资源！！</p><p>解决：一次查询的结果可以暂存在一个可以直接取到的地方-&gt;放入内存</p><p>再次查询时，直接走缓存，就不需要走数据库。</p><ol><li><p><strong>什么是缓存[cache]？</strong></p><p>-存在内存中的临时数据</p><p>-将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上（关系型数据库数据文件）查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</p></li><li><p>为什么使用缓存？</p><p>减少和数据库的交换次数，减少系统开销，提高系统效率</p></li><li><p><strong>什么样的数据能使用缓存？</strong></p><p>经常查询并且不经常改变的数据。</p></li></ol><h3 id="12-2-MyBatis缓存"><a href="#12-2-MyBatis缓存" class="headerlink" title="12.2 MyBatis缓存"></a>12.2 MyBatis缓存</h3><ul><li><p>MyBatis包含一个非常强大的查询缓存特性，他可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率</p></li><li><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong>。</p><ul><li><p>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</p></li><li><p>二级缓存需要<strong>手动</strong>开启和配置，它是基于namespace级别的缓存。</p></li><li><p>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来定义二级缓存。</p></li></ul></li></ul><p>  Cache是一个接口interface,</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Cache</span> </span>&#123;    <span class="hljs-function">String <span class="hljs-title">getId</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">putObject</span><span class="hljs-params">(Object var1, Object var2)</span></span>;    <span class="hljs-function">Object <span class="hljs-title">getObject</span><span class="hljs-params">(Object var1)</span></span>;    <span class="hljs-function">Object <span class="hljs-title">removeObject</span><span class="hljs-params">(Object var1)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getSize</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">default</span> ReadWriteLock <span class="hljs-title">getReadWriteLock</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;&#125;</code></pre><h3 id="12-3一级缓存"><a href="#12-3一级缓存" class="headerlink" title="12.3一级缓存"></a>12.3一级缓存</h3><img src="/images/MyBatis/image-20201114124103438.png" alt="image-20201114124103438" style="zoom:50%;" /><p>缓存失效的情况：</p><ul><li>映射语句文件中的所有 select 语句的结果将会被缓存。</li><li>映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。因为增删改操作有可能会改变数据库的数据。</li><li>查询不同的Mapper.xml。</li><li>手动清理缓存！</li></ul><pre><code class="hljs java">sqlSession.clearCache();</code></pre><p><strong>小结：</strong></p><p>一级缓存默认是开启的，只在一次SqlSession中有效，也就是在连接-&gt;关闭连接这个时间段。</p><p>一级缓存就是一个Map。（一级缓存又称本地的会话缓存。）</p><h3 id="12-4-二级缓存"><a href="#12-4-二级缓存" class="headerlink" title="12.4 二级缓存"></a>12.4 二级缓存</h3><ul><li>二级缓存也就全局缓存，一级缓存作用域太低了，所以诞生了二级缓存。</li><li>基于namespace级别的缓存，一个命名空间，对应一个二级缓存。</li><li>工作机制<ul><li>一个会话查询一条数据时，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了，但是我们想要的是(二级缓存的机制)，一级缓存会话关闭了，一级缓存中的数据被保存到二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存map中。</li></ul></li></ul><p>步骤：</p><ol><li>开启全局缓存</li></ol><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--显示的设置全局缓存--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span></code></pre><ol start="2"><li>在要使用二级缓存的mapper文件中开启！</li></ol><p><img src="/images/MyBatis/image-20201114162610558.png" alt="image-20201114162610558"></p><p>也可以自定参数：</p><pre><code class="hljs xml">&lt;cache  eviction=&quot;FIFO&quot;  flushInterval=&quot;60000&quot;  size=&quot;512&quot;  readOnly=&quot;true&quot;/&gt;</code></pre><p>可用的清除策略有：</p><ul><li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li><li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li><li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li><li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li></ul><p>默认的清除策略是 LRU。</p><p>flushInterval（刷新间隔）属性可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。</p><p>size（引用数目）属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。</p><p>readOnly（只读）属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。 因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。 速度上会慢一些，但是更安全，因此默认值是 false。</p><ol start="3"><li>测试</li></ol><img src="/images/MyBatis/image-20201114163546331.png" alt="image-20201114163546331" style="zoom:50%;" /><img src="/images/MyBatis/image-20201114163531437.png" alt="image-20201114163531437" style="zoom:50%;" /><p><strong>问题：</strong></p><p>我们需要将实体类序列化！否则会报错！(缓存、通信都最好将对象进行序列化)</p><p>Error serializing object.  Cause: java.io.NotSerializableException: com.wen.pojo.User</p><p><strong>小结：</strong></p><ul><li>只要开启了二级缓存，在同一个Mapper下就有效。</li><li>所有的数据都会先放在一级缓存中</li><li>只有当会话提交，或者关闭的时候，才会提交到二级缓存中</li></ul><h3 id="12-5-缓存原理"><a href="#12-5-缓存原理" class="headerlink" title="12.5 缓存原理"></a>12.5 缓存原理</h3><img src="/images/MyBatis/image-20201114165527710.png" alt="image-20201114165527710" style="zoom:50%;" /><h3 id="12-6-自定义缓存-Ehcache"><a href="#12-6-自定义缓存-Ehcache" class="headerlink" title="12.6 自定义缓存-Ehcache"></a>12.6 自定义缓存-Ehcache</h3><p>Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存,Java EE和轻量级容器。</p><p>但是，没人用啊哈哈哈哈~<img src="/images/MyBatis/image-20201114170513447.png" alt="image-20201114170513447"></p><img src="/images/MyBatis/image-20201114170535832.png" alt="image-20201114170535832" style="zoom:50%;" /><p>既然这样，那我就不学了！！</p><p>Redis数据库（非关系型数据库）来做缓存！K-V</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/11/27/hello-world/"/>
    <url>/2020/11/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
